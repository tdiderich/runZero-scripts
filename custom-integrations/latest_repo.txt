LICENSE
MIT License

Copyright (c) [Year] [Your Name or Organization]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

----
README.md
# runZero Custom Integrations

👋 Welcome to the runZero Custom Integration library!

runZero is a total attack surface and exposure management platform that combines [active scanning](https://help.runzero.com/docs/discovering-assets/), [passive discovery](https://help.runzero.com/docs/traffic-sampling/), and API integrations to deliver complete visibility into managed and unmanaged assets across IT, OT, IoT, cloud, mobile, and remote environments. runZero can be used as a hosted service (SaaS) or managed on-premise. The runZero stack consists of one more Consoles, linked Explorers that run as light-weight services on network points-of-presence, and a command-line tool that can be used for offline data collection. runZero can be managed through the web interface, via API, or for self-hosted customers, on the command line.

If you are not a runZero user today, [sign up](https://www.runzero.com/try) for a trial that can be converted to our free Community Edition.

This repository includes **custom integrations** that run in the context of a runZero Explorer. These integrations are written in Starlark, a language similar to Python.

To create a custom integration within runZero, you will need a user account with `superuser` privileges.

You can find detailed documentation about Starlark-based integrations on the [runZero help portal](https://help.runzero.com/docs/custom-integration-scripts/).

# Getting Help

If you need help setting up a custom integration, you can create an [issue](https://github.com/runZeroInc/runzero-custom-integrations/issues/new) on this GitHub repo, and our team will work with you. If you have a Customer Success Engineer, you can also work with them directly. 

# Existing Integrations 

## Import to runZero 
- [Automox](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/automox/)
- [Carbon Black](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/carbon-black/)
- [Cisco-ISE](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/cisco-ise/)
- [Cortex XDR](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/cortex-xdr/)
- [Device42](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/device42/)
- [Digital Ocean](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/digital-ocean/)
- [Drata](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/drata/)
- [Extreme Networks CloudIQ](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/extreme-cloud-iq/)
- [JAMF](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/jamf/)
- [Kandji](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/kandji/)
- [Lima Charlie](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/lima-charlie/)
- [Manage Engine Endpoint Central](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/manage-engine-endpoint-central/)
- [Netskope](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/netskope/)
- [NinjaOne](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/ninjaone/)
- [runZero Task Sync](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/task-sync/)
- [Snipe-IT](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/snipe-it/)
- [Stairwell](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/stairwell/)
- [Tanium](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/tanium/)
## Export from runZero 
- [runZero Vunerability Workflow](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/vulnerability-workflow/)
- [Sumo Logic](https://github.com/runZeroInc/runzero-custom-integrations/blob/main/sumo-logic/)
## The boilerplate folder has examples to follow

1. Sample [README.md](./boilerplate/README.md) for contributing
2. Sample [script](./boilerplate/custom-integration-boilerplate.star) that shows how to use all of the supported libraries
3. Sample [config.json](./boilerplate/config.json) that gives context on the integration for automations to reference

## Contributing

We welcome contributions to this repository! Whether you're fixing a bug, adding a new feature, or improving documentation, your efforts make a difference. To ensure a smooth process, please follow these guidelines:

1. **Fork the Repository**: Start by forking this repository to your GitHub account.

2. **Create a Branch**: Create a feature branch for your changes. Use a descriptive name like `feature/new-integration` or `fix/bug-description`.

3. **Make Your Changes**: Implement your changes and test thoroughly. Ensure your code adheres to our coding standards and is well-documented.

4. **Commit Your Changes**: Write clear and concise commit messages that describe what you changed and why.

5. **Open a Pull Request (PR)**: 
   - Go to the original repository and open a pull request from your fork.
   - Provide a detailed description of your changes, including the problem your contribution solves and how it was tested.

6. **Code Review**: Collaborate with the maintainers during the review process. Be open to feedback and iterate on your changes if necessary.

7. **Merge**: Once approved, your PR will be merged by a maintainer.

---

## License

This repository is licensed under the [MIT License](./LICENSE). By contributing to this project, you agree that your contributions will be licensed under the same terms.

----
.gitignore
*.gz
test/*
----
tanium/custom-integration-tanium.star
load('runzero.types', 'ImportAsset', 'NetworkInterface', 'Software', 'Vulnerability')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_post='post', http_get='get', 'url_encode')

def force_string(value):
    if type(value) == "list":
        output = ",".join([str(v) for v in value])
    elif type(value) == "dict":
        output = json_encode(value)
    else:
        output = str(value)

    return output[:1023]

def build_vulnerabilities(vulnerabilities):
    output_vulnerabilities = []
    uuid = 0
    for vuln in vulnerabilities:
        uuid += 1
        absoluteFirstFoundDate = vuln.get("absoluteFirstFoundDate", "")
        affectedProducts = vuln.get("affectedProducts", "")
        cisaDateAdded = vuln.get("cisaDateAdded", "")
        cisaDueDate = vuln.get("cisaDueDate", "")
        cisaNotes = vuln.get("cisaNotes", "")
        cisaProduct = vuln.get("cisaProduct", "")
        cisaRequiredAction = vuln.get("cisaRequiredAction", "")
        cisaShortDescription = vuln.get("cisaShortDescription", "")
        cisaVendor = vuln.get("cisaVendor", "")
        cisaVulnerabilityName = vuln.get("cisaVulnerabilityName", "")
        cpes = vuln.get("cpes", [])
        cveId = vuln.get("cveId", "")
        cveYear = vuln.get("cveYear", "")
        cvssScore = vuln.get("cvssScore", 0)
        if cvssScore == None:
            cvssScore = 0
        excepted = vuln.get("excepted", "")
        firstFound = vuln.get("firstFound", "")
        isCisaKev = vuln.get("isCisaKev", "")
        lastFound = vuln.get("lastFound", "")
        lastScanDate = vuln.get("lastScanDate", "")
        scanType = vuln.get("scanType", "")

        # take plain text severity and map to rz integer
        severity = vuln.get("severity", 0)

        rank_map = {
            "Critical": 4,
            "High": 3,
            "Medium": 2,
            "Low": 1,
        }

        score_map = {
            "Critical": 10,
            "High": 7,
            "Medium": 5,
            "Low": 2,
        }

        if severity in rank_map:
            risk_rank = rank_map[severity]
            score = score_map[severity]
        else:
            risk_rank = 0
            score = 0
        summary = vuln.get("summary", "")
        output_vulnerabilities.append(
                Vulnerability(
                    id=str(uuid),
                    name=str(summary)[:255],
                    description=str(summary)[:255],
                    cve=str(cveId)[:13],
                    solution=str(cisaRequiredAction),
                    cvss2BaseScore=float(cvssScore),
                    cvss2TemporalScore=float(cvssScore),
                    cvss3BaseScore=float(cvssScore),
                    cvss3TemporalScore=float(cvssScore),
                    riskScore=float(score),
                    riskRank=risk_rank,
                    severityScore=float(score),
                    severityRank=risk_rank,
                    serviceAddress="127.0.0.1",
                    customAttributes={
                        "affectedProducts": force_string(affectedProducts),
                        "cisaDueDate": force_string(cisaDueDate),
                        "cisaNotes": force_string(cisaNotes),
                        "cisaProduct": force_string(cisaProduct),
                        "cisaRequiredAction": force_string(cisaRequiredAction),
                        "cisaVulnerabilityName": force_string(cisaVulnerabilityName),
                        "cisaVendor": force_string(cisaVendor),
                        "cveYear": force_string(cveYear),
                        "excepted": force_string(excepted),
                        "firstFound": force_string(firstFound),
                        "lastScanDate": force_string(lastScanDate),
                        "scanType": force_string(scanType),
                        "summary": force_string(summary),
                        "cpes": force_string(cpes),
                        "absoluteFirstFoundDate": force_string(absoluteFirstFoundDate),
                        "cisaDateAdded": force_string(cisaDateAdded),
                        "isCisaKev": force_string(isCisaKev),
                        "lastFound": force_string(lastFound),
                        "cisaShortDescription": force_string(cisaShortDescription),
                    },
                )
            )

    return output_vulnerabilities
def build_software(applications, installed_software):
    software = []
    unique_applications = {}
    for a in applications + installed_software:
        key_list = a.get("name", "").split(" ")
        key_unique = (
            "_".join(key_list[0:2]) if len(key_list) > 1 else "_".join(key_list)
        )
        if key_unique not in unique_applications:
            unique_applications[key_unique] = {
                "name": a.get("name", ""),
                "version": a.get("version", ""),
                "vendor": a.get("vendor", ""),
            }
    final_applications = []
    for index, value in unique_applications.items():
        final_applications.append(value)

    for index in range(len(final_applications)):
        name = final_applications[index].get("name", "")
        vendor = final_applications[index].get("vendor", "")
        version = final_applications[index].get("version", "")
        software.append(
            Software(
                id=str(index),
                vendor=vendor,
                    product=name,
                    version=version,
                    serviceAddress="127.0.0.1",
                )
            )

    return software
def asset_networks(ips, mac):
    ip4s = []
    ip6s = []
    for ip in ips[:99]:
        ip_addr = ip_address(ip)
        if ip_addr.version == 4:
            ip4s.append(ip_addr)
        elif ip_addr.version == 6:
            ip6s.append(ip_addr)
        else:
            continue

    if not mac:
        return NetworkInterface(ipv4Addresses=ip4s, ipv6Addresses=ip6s)

    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)


def build_asset(item):
    asset_id = item.get('id', None)
    if not asset_id:
        return None
    
    eid_first_seen = item.get("eidFirstSeen", None)
    computer_id = item.get("computerID", None)
    eid_last_seen = item.get("eidLastSeen", None)
    namespace = item.get("namespace", None)
    system_uuid = item.get("systemUUID", None)
    name = item.get("name", None)
    domain_name = item.get("domainName", None)
    serial_number = item.get("serialNumber", None)
    manufacturer = item.get("manufacturer", None)
    model = item.get("model", None)
    ip_address = item.get("ipAddress", None)
    mac_addresses = item.get("macAddresses", None)
    primary_user = item.get("primaryUser", None)
    last_logged_in_user = item.get("lastLoggedInUser", None)
    is_virtual = item.get("isVirtual", None)
    is_encrypted = item.get("isEncrypted", None)
    chassis_type = item.get("chassisType", None)
    os = item.get("os", None)
    services = item.get("services", None)
    installed_applications = item.get("installedApplications", None)
    deployed_software_packages = item.get("deployedSoftwarePackages", None)
    risk = item.get("risk", None)
    compliance = item.get("compliance", None)

    # create network interfaces
    ips = [ip_address]
    networks = []
    for m in mac_addresses:
        network = asset_networks(ips=ips, mac=m)
        networks.append(network)

    software = build_software(applications=installed_applications, installed_software=deployed_software_packages)
    vulnerabilities = build_vulnerabilities(vulnerabilities=compliance.get("cveFindings", []))
    return ImportAsset(
        id=asset_id,
        networkInterfaces=networks,
        os=os.get("name", None),
        osVersion=os.get('generation', ''),
        manufacturer=manufacturer,
        model=model,
        hostnames=[name],
        customAttributes={
            "eid_first_seen": eid_first_seen,
            "eid_last_seen": eid_last_seen,
            "namespace": namespace,
            "system_uuid": system_uuid,
            "serial_number": serial_number,
            "mac_addresses": mac_addresses,
            "primary_user": primary_user,
            "last_logged_in_user": last_logged_in_user,
            "is_virtual": is_virtual,
            "is_encrypted": is_encrypted,
            "risk": risk,
            "computer_id": computer_id,
        },
        domain=domain_name,
        # firstSeenTS=eid_first_seen, # TODO: add parsing
        deviceType=chassis_type,
        software=software[:99],
        vulnerabilities=vulnerabilities[:99]
    )


def build_assets(inventory):
    assets = []
    for item in inventory:
        asset_info = item.get("node", {})
        asset = build_asset(asset_info)
        if asset:
            assets.append(asset)

    return assets

def get_endpoints(tanium_url, tanium_token):
    query = """query getEndpoints($first: Int, $after: Cursor) {
    endpoints(first: $first, after: $after) {
        edges {
        node {
            id
            eidFirstSeen
            eidLastSeen
            namespace
            computerID
            systemUUID
            name
            domainName
            serialNumber
            manufacturer
            model
            ipAddress
            macAddresses
            primaryUser {
                name
                email
            }
            lastLoggedInUser
            isVirtual
            isEncrypted
            chassisType
            os {
                name 
                platform
                generation
                language
            }
            services {
                name
                status
            }
            installedApplications {
                name
                version
            }
            deployedSoftwarePackages {
                name
                vendor
                version
            }
            risk {
                totalScore
                riskLevel
                assetCriticality
                criticalityScore
            }
            compliance {
                cveFindings {
                    absoluteFirstFoundDate
                    affectedProducts
                    cisaDateAdded
                    cisaDueDate
                    cisaNotes
                    cisaProduct
                    cisaRequiredAction
                    cisaShortDescription
                    cisaVendor
                    cisaVulnerabilityName
                    cpes
                    cveId
                    cveYear
                    cvssScore
                    excepted
                    firstFound
                    isCisaKev
                    lastFound
                    lastScanDate
                    scanType
                    severity
                    summary
                }
            }
        }
        }
        pageInfo {
        hasNextPage
        endCursor
        startCursor
        }
        totalRecords
    }
    }"""
    cursor = None
    hasNextPage = True
    endpoints = []
    while hasNextPage:
        # set cursor if it exists (all but the first query)
        if cursor:
            variables = {"first": 100, "after": cursor}
        else:
            variables = {"first": 100}

        body = {"query": query, "variables": variables}

        # get endpoints
        data = http_post(
            tanium_url + "/plugin/products/gateway/graphql",
            headers={"Content-Type": "application/json", "session": tanium_token},
            body=bytes(json_encode(body)),
        )
        
        # unnpack results and add to the endpoints
        json_data = json_decode(data.body)
        new_endpoints = json_data.get("data", {}).get("endpoints", {}).get("edges", [])
        endpoints.extend(new_endpoints)
        
        # check if there is a next page
        hasNextPage = json_data.get("data", {}).get("endpoints", {}).get("pageInfo", {}).get("hasNextPage", False)
        cursor = json_data.get("data", {}).get("endpoints", {}).get("pageInfo", {}).get("endCursor", None)
    
    return endpoints

def main(*args, **kwargs):
    tanium_url = "https://<update-me>.titankube.com"
    tanium_token = kwargs['access_secret']

    tanium_endpoints = get_endpoints(tanium_url, tanium_token)

    if not tanium_endpoints:
        print("got nothing from Tanium")
        return None

    assets = build_assets(tanium_endpoints)

    if not assets:
        print("no assets")

    return assets

----
tanium/config.json
{ "name": "Tanium", "type": "inbound" }

----
tanium/README.md
# Custom Integration: Tanium

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Tanium requirements

- Tanium API URL (e.g., `https://<your-tanium-instance>/plugin/products/gateway/graphql`).
- API Token with permissions to access endpoint and compliance data via the Tanium GraphQL API.

## Steps

### Tanium configuration

1. Obtain the API Token from your Tanium instance:
   - Follow the [Tanium API Documentation](https://docs.tanium.com/) for guidance on generating an API token.
   - Ensure the token has permissions to query endpoint data and compliance findings.
2. Note down your Tanium API URL.

### runZero configuration

1. (OPTIONAL) - Make any necessary changes to the script to align with your environment.
    - Modify API queries as needed to filter endpoint data or compliance findings.
    - Adjust data parsing or mappings to suit your organizational needs.
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - Use the `access_secret` field for your Tanium API Token.
    - For `access_key`, input a placeholder value like `foo` (unused in this integration).
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "tanium").
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` to ensure it has valid syntax.
    - Click `Save` to create the Custom Integration.
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to recur at the desired timeframes.
    - Select the Explorer you'd like the Custom Integration to run from.
    - Click `Save` to kick off the first task.

### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration.
- The task will retrieve endpoint, software, and vulnerability data from your Tanium instance and upload it to runZero.
- Assets in runZero will be updated or created based on the data retrieved from Tanium.

### Notes

- Ensure that your Tanium GraphQL API endpoint is accessible from the system running the runZero Explorer.
- You can monitor task execution and check for any errors or issues in the [tasks](https://console.runzero.com/tasks) page.
- Customize the `build_assets` function to include additional fields or mappings as needed for your organization.
- Search for assets enriched by this integration using the runZero search query `custom_integration:tanium`.

----
snipe-it/config.json
{ "name": "Snipe-IT", "type": "inbound" }
----
snipe-it/snipeit.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_post='post', http_get='get', 'url_encode')
load('uuid', 'new_uuid')

#Change the URL to match your Snipe-IT server
SNIPE_BASE_URL = 'https://<domain or IP>:<port>'
RUNZERO_REDIRECT = 'https://console.runzero.com/'

def build_assets(assets_json):
    assets_import = []
    for asset in assets_json:
        id = asset.get(str('id'), new_uuid)
        model_info = asset.get('model', {})
        if model_info:
            model = model_info.get('name', '')
        else:
            model = ''
        device_info = asset.get('category', {})
        if device_info:
            device_type = device_info.get('name', '')
        else:
            device_type = ''
        manuf_info = asset.get('manufacturer', {})
        if manuf_info:
            manufacturer = manuf_info.get('name', '')
        else:
            manufacturer = ''
        # Map custom fields from Snipe-IT
        custom_fields = asset.get('custom_fields', {})
        if custom_fields:
            mac_info =custom_fields.get('MAC Address', {})
            if mac_info:
                mac = mac_info.get('value', None)
        else:
            mac = None

        # Map additional Snipe-IT fields as custom attributes
        age = asset.get('age', '')
        asset_tag = asset.get('asset_tag', '')
        book_value = asset.get(str('book_value'), '')
        byod = asset.get(str('byod'), '')
        checkin_count = asset.get(str('checkin_counter'), '')
        checkout_count = asset.get(str('checkout_counter'), '')
        company_info = asset.get('company', {})
        if company_info:
            company_name = company_info.get('')
        created_info = asset.get('created_at', {})
        if created_info:
            created = created_info.get('datetime', '')
        else:
            created = ''
        eol = asset.get(str('eol'), '')
        eol_date = asset.get(str('asset_eol_date'), 'NA')
        expected_checkin = asset.get(str('expected_checkin'), '')
        last_audit = asset.get('last_audit_date', '')
        last_checkout = asset.get(str('last_checkout'), '')
        location_info = asset.get('location', {})
        if location_info:
            location = location_info.get('name', '')
        else:
            location = ''
        model_number = asset.get('model_number', '')
        name = asset.get('name', '')
        next_audit = asset.get('next_audit_date', '')
        notes = asset.get('notes', '')
        order_number = asset.get(str('order_number'), '')
        purchase_cost = asset.get('purchase_cost', '')
        purchase_date = asset.get('purchase_date', '')
        requests_count = asset.get(str('requests_counter'), '')
        serial = asset.get('serial', '')
        status_info = asset.get('status_label', {})
        if status_info:
            status_name = status_info.get('name', '')
            status_type = status_info.get('status_type', '')
        else:
            status_name = ''
            status_type = ''
        supplier_info = asset.get('supplier', {})
        if supplier_info:
            supplier = supplier_info.get('name', '')
        else:
            supplier = ''
        updated_info = asset.get('updated_at', {})
        if updated_info:
            updated = updated_info.get('datetime', '')
        else:
            updated = ''
        user_checkout = asset.get(str('user_can_checkout'), '')
        warranty_months = asset.get('warranty_months', '')
        warranty_exp = asset.get(str('warranty_expires'), '')

        # parse IP addresses
        ipv4s = []
        ipv6s = []
        ips = []
        networks = asset.get('networks', {})
        if networks:
            ipv4s = networks.get('v4', [])
            ipv6s = networks.get('v6', [])
            
            if ipv4s:
                for v4 in ipv4s:
                    addr = v4.get('ip_address', '')
                    ips.append(addr)
        
            if ipv6s:
                for v6 in ipv6s:
                    addr = v6.get('ip_address', '')
                    ips.append(addr)        

        network = build_network_interface(ips=[], mac=mac)
        
        assets_import.append(
            ImportAsset(
                id=str(id),
                model=model,
                deviceType=device_type,
                manufacturer=manufacturer,
                networkInterfaces=[network],
                customAttributes={
                    "age": age,
                    "asset.tag": asset_tag,
                    "book.value": book_value,
                    "byod": byod,
                    "checkin.count": checkin_count,
                    "checkout.count": checkout_count,
                    "eol": eol,
                    "eol.date": eol_date,
                    "expected.checkin": expected_checkin,
                    "first.seen": created,
                    "last.audit": last_audit,
                    "last.checkout": last_checkout,
                    "last.seen": updated,
                    "location": location,
                    "model.number": model_number,
                    "name": name,
                    "next.audit": next_audit,
                    "notes": notes,
                    "order.number": order_number,
                    "purchase.cost": purchase_cost,
                    "purchase.date": purchase_date,
                    "requests.count": requests_count,
                    "serial.number": serial,
                    "status.name": status_name,
                    "status.type": status_type,
                    "supplier.name": supplier,
                    "user.checkout": user_checkout,
                    "warranty.months": warranty_months,
                    "warranty.expiration": warranty_exp
                }
            )
        )
    return assets_import

# build runZero network interfaces; shouldn't need to touch this
def build_network_interface(ips, mac):
    ip4s = []
    ip6s = []
    for ip in ips[:99]:
        ip_addr = ip_address(ip)
        if ip_addr.version == 4:
            ip4s.append(ip_addr)
        elif ip_addr.version == 6:
            ip6s.append(ip_addr)
        else:
            continue
    if not mac:
        return NetworkInterface(ipv4Addresses=ip4s, ipv6Addresses=ip6s)
    
    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def main(**kwargs):
    # assign API key from kwargs
    token = kwargs['access_secret']

    # get assets
    assets = []
    url = '{}/{}'.format(SNIPE_BASE_URL, 'api/v1/hardware')
    assets = http_get(url, headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token})
    if assets.status_code != 200:
        print('failed to retrieve assets' + str(assets))
        return None

    assets_json = json_decode(assets.body)['rows']

    # build asset import
    assets_import = build_assets(assets_json)
    if not assets_import:
        print('no assets')
        return None

    return assets_import
----
snipe-it/README.md
# Custom Integration: Snipe-IT

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero

## Snipe-IT requirements

- **API Bearer Token** for **Snipe-IT** API authentication
- **Snipe-IT Base URL** (depends on local install)

## Snipe-IT API Docs

- [Snipe-IT API Reference](https://snipe-it.readme.io/reference/api-overview)
- [Snipe-IT Docs](https://snipe-it.readme.io/docs)

## Steps

### Snipe-IT configuration

1. [Generate an API bearer token](https://snipe-it.readme.io/reference/generating-api-tokens) in the **Snipe-IT** console
2. Find your base URL for the **Snipe-IT** API
    - This will be the hostname or host:port of the **Snipe-IT** server
    - example: `https://my.snipe.org`
    - example: `https://192.168.5.64:8443`
3. Update `SNIPE_BASE_URL` variable in the script (line 8)
    - Do not place a trailing `/` at the end of the URL; this formatting is handled in the script when completing the API URL

### runZero configuration

1. (OPTIONAL) - make any neccessary changes to the script to align with your environment
    - runZero requires at least one common field to merge assets with. The default **Snipe-IT** fieldset "Asset with MAC address"
    tracks MAC addresses and this is the minimum field needed for runZero asset merging to take effect (though this field may not
    always be available with runZero scanned assets)
    - The base script will map Snipe's "category" to runZero's asset "type"; maintaining category naming conventions consistent to runZero's type values would be beneficial
    - "Model" and "Manufacturer" fields in Snipe are also mapped to the corresponding "Model" and "Manufacturer" attributes in runZero
    - Add additional custom fields that are configured in **Snipe-IT**
        - **Snipe-IT** is highly configurable and many custom fields and fieldsets can be created for assets
        - Tracking additional fields such as os, os version, and hostname could be beneficial for merging. If adding these custom fields to fieldset then map them in 
        the custom integration script accordingly
        - Any additional custom fields tracked in **Snipe-IT** that do not correspond to runZero's [ImportAsset](https://runzeroinc.github.io/runzero-sdk-py/autoapi/runzero/types/_data_models_gen/index.html#runzero.types._data_models_gen.ImportAsset) data model can be mapped to custom attributes following the pattern in the script 
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials)
    - Select the type `Custom Integration Script Secrets`
    - Both `access_key` and `access_secret` are required, but **Snipe-IT** only requires the bearer token
        - Input a placeholder value like `foo` for the `access_key` value
        - Input the **Snipe-IT** bearer token in the `access_secret` field 
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new)
    - Add a Name and Icon (e.g. snipeit)
        - The name given to the custom integration will correspond to the custom_integration value when creating queries
    - Toggle `Enable custom integration script` to input your finalized script
    - Click `Validate` to ensure it has valide syntax
    - Click `Save` to create the Custom Integration 
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/)
    - Select the Credential and Custom Integration created in steps 2 and 3
    - Update the task schedule to recur at the desired timeframes
    - Select the Explorer you'd like the Custom Integration to run from
    - Click `Save` to kick off the first task 


### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration 
- The task will update the existing assets with the data pulled from the Custom Integration source 
- The task will create new assets for when there are no existing assets that meet merge criteria (hostname, MAC, etc)
- You can search for assets enriched by this custom integration with the runZero search `custom_integration:snipeit`
----
task-sync/custom-integration-task-sync.star
load('http', http_get='get', http_post='post', http_put='put', 'url_encode')
load('json', json_decode='decode')
load('gzip', gzip_decompress='decompress', gzip_compress='compress')

# Parameters from kwargs
SAAS_ORG_ID = "ORG-UUID-REPLACE"
SAAS_SITE_ID = "SITE-UUID-REPLACE"
SAAS_BASE_URL = "https://console.runzero.com"
SELF_ORG_ID = "ORG-UUID-REPLACE"
SELF_SITE_ID = "SITE-UUID-REPLACE"
SELF_BASE_URL = "https://console.runzero.com"
SAAS_TASK_SEARCH_FILTER = 'name:="test"'

# Flags
HIDE_TASKS_ON_SYNC = False

def get_tasks(saas_token):
    params = {"_oid": SAAS_ORG_ID, "search": SAAS_TASK_SEARCH_FILTER}
    url = "{}{}{}".format(SAAS_BASE_URL, "/api/v1.0/org/tasks?", url_encode(params))
    headers = {"Content-Type": "application/json", "Authorization": "Bearer {}".format(saas_token)}
    response = http_get(url, headers=headers)
    if response.status_code != 200:
        print("Failed to get tasks", response.status_code)
        return []
    return json_decode(response.body)

def sync_task(task_id, saas_token, self_token):
    # Download data from SaaS
    print("Pulling task with ID {}".format(task_id))
    download_url = "{}/api/v1.0/org/tasks/{}/data".format(SAAS_BASE_URL, task_id)
    download = http_get(download_url, headers={"Authorization": "Bearer {}".format(saas_token), "Accept": "application/octet-stream", "Content-Encoding": "gzip"}, timeout=3600)
    if download.status_code != 200:
        print("Failed to download task:", task_id)
        return False

    # Upload data to self-hosted
    print("Uploading task with ID {}".format(task_id))
    unzipped = gzip_decompress(download.body)
    upload_url = "{}/api/v1.0/org/sites/{}/import?_oid={}".format(SELF_BASE_URL, SELF_SITE_ID, SELF_ORG_ID)
    upload = http_put(upload_url, headers={"Authorization": "Bearer {}".format(self_token), "Content-Type": "application/octet-stream", "Content-Encoding": "gzip"}, body=gzip_compress(unzipped), timeout=3600)

    if upload.status_code != 200:
        print("Failed to upload task:", task_id)
        return False

    print("Successfully synced task:", task_id)

    if HIDE_TASKS_ON_SYNC:
        hide_url = "{}/api/v1.0/org/tasks/{}/hide?_oid={}".format(SAAS_BASE_URL, task_id, SAAS_ORG_ID)
        hide = http_post(hide_url, headers={"Authorization": "Bearer {}".format(saas_token), "Content-Type": "application/json"})
        if hide.status_code == 200:
            print("Task hidden:", task_id)

    return True

def main(**kwargs):
    saas_token = kwargs["access_key"]       # SaaS token
    self_token = kwargs["access_secret"]    # Self-hosted token

    tasks = get_tasks(saas_token)
    print("Got {} task(s) to sync".format(len(tasks)))
    if not tasks:
        print("No tasks found.")
        return

    for task in tasks:
        task_id = task.get("id", "")
        if not task_id:
            continue
        success = sync_task(task_id, saas_token, self_token)
        if not success:
            print("Sync failed for task:", task_id)

    return None

----
task-sync/config.json
{ "name": "runZero Task Sync", "type": "inbound" }

----
task-sync/README.md
# Custom Integration: Task Sync

## Overview

This integration script is designed to sync tasks between a runZero SaaS instance and a self-hosted runZero console. It retrieves tasks from a SaaS instance, downloads their data, and uploads them to a self-hosted site. Optionally, it can hide the tasks in the SaaS instance after a successful sync.

## Requirements

### runZero Requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

### API Requirements

- SaaS Organization ID
- SaaS Site ID
- Self-hosted Organization ID
- Self-hosted Site ID
- API Tokens for both the SaaS and self-hosted instances

## Configuration Steps

1. **Obtain Required IDs and Tokens**
   - SaaS Organization ID (`ORG-UUID-REPLACE`)
   - SaaS Site ID (`SITE-UUID-REPLACE`)
   - Self-hosted Organization ID (`ORG-UUID-REPLACE`)
   - Self-hosted Site ID (`SITE-UUID-REPLACE`)
   - API Tokens for both SaaS and self-hosted instances

2. **Create the Credential for the Custom Integration**
   - Go to [runZero Credentials](https://console.runzero.com/credentials).
   - Select `Custom Integration Script Secrets`.
   - Use the `access_key` field for the SaaS token.
   - Use the `access_secret` field for the self-hosted token.

3. **Create the Custom Integration**
   - Go to [runZero Custom Integrations](https://console.runzero.com/custom-integrations/new).
   - Add a Name and Icon for the integration (e.g., "Task Sync").
   - Toggle `Enable custom integration script` to input the finalized script.
   - Click `Validate` to ensure it has valid syntax.
   - Click `Save` to create the Custom Integration.

4. **Create the Custom Integration Task**
   - Go to [runZero Ingest](https://console.runzero.com/ingest/custom/).
   - Select the Credential and Custom Integration created in the previous steps.
   - Update the task schedule to recur at the desired timeframes.
   - Select the Explorer you'd like the Custom Integration to run from.
   - Click `Save` to kick off the first task.

## Optional Settings

- To automatically hide tasks in the SaaS instance after sync, set the `HIDE_TASKS_ON_SYNC` flag to `True` in the script.

## Troubleshooting

- **Task Sync Failures**: Ensure that both the SaaS and self-hosted tokens are valid and have the necessary permissions.
- **Data Transfer Issues**: Confirm that the self-hosted console is reachable from the machine running this script.
- **Network Timeouts**: Increase the timeout in the `sync_task()` function if syncing large tasks.

---

## License

This integration is provided under the MIT License. See the LICENSE file for more details.

----
cisco-ise/config.json
{ "name": "Cisco-ISE", "type": "inbound" }

----
cisco-ise/README.md
# Custom Integration: Cisco ISE

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Cisco ISE requirements

- API user with access to the Cisco ISE **Monitoring Node API**.
- Base URL of your Cisco ISE instance (e.g., `https://ise.company.com`).
- Base64-encoded API credentials (`username:password`).

## Steps

### Cisco ISE configuration

1. **Verify API access**:
   - Log in to your Cisco ISE Monitoring Node.
   - Navigate to **Administration > System > Admin Access > Admin Groups** and ensure API users are granted access to the `Session/ActiveList` API.
   - Test access to:  
     `https://<ISE-HOST>/admin/API/mnt/Session/ActiveList`  
     using Basic Auth in a REST client (e.g., Postman).

2. **Base64 encode credentials**:
   - Encode `username:password` using Base64. You can use a terminal:
     ```bash
     echo -n 'username:password' | base64
     ```

### runZero configuration

1. Modify the script if needed:
   - Update the `CISCO_ISE_HOST` constant to point to your ISE Monitoring Node URL.
   - You may adjust parsing logic to capture additional session fields from the XML.

2. **Create a Credential for the Custom Integration**:
   - Go to [runZero Credentials](https://console.runzero.com/credentials).
   - Select `Custom Integration Script Secrets`.
   - Input the Base64-encoded string in the `access_secret` field.
   - Use a placeholder like `foo` for `access_key` (unused).

3. **Create the Custom Integration**:
   - Go to [runZero Custom Integrations](https://console.runzero.com/custom-integrations/new).
   - Add a name (e.g., `cisco-ise`) and icon for the integration.
   - Toggle **Enable custom integration script** and paste in the script.
   - Click `Validate`, then `Save`.

4. **Schedule the Integration Task**:
   - Go to [runZero Ingest](https://console.runzero.com/ingest/custom/).
   - Select the credential and custom integration you created.
   - Set a schedule for recurring updates.
   - Choose the Explorer instance to run the integration.
   - Click `Save`.

### What's next?

- The integration will retrieve active sessions from Cisco ISE.
- Device IP and MAC addresses will be mapped to runZero assets.
- You can find enriched assets using the runZero search query: *custom_integration:cisco_ise*


### Notes

- The integration extracts fields like `device_ip_address`, `calling_station_id` (MAC), and `user_name` (hostname).
- If `device_ip_address` is missing, it falls back to `framed_ip_address`.
- All ISE session IDs and NAS information are stored as `customAttributes`.
- You can customize the `build_assets()` function to include more session fields if needed.

----
cisco-ise/custom_integration_cisco-ise.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_get='get')

# Constants
CISCO_ISE_HOST = "<UPDATE_ME>"
ENDPOINTS_API_URL = "{}/admin/API/mnt/Session/ActiveList".format(CISCO_ISE_HOST)

def extract_sessions(xml):
    sessions = []
    chunks = xml.split("<activeSession>")
    for chunk in chunks[1:]:
        session = {}
        for tag in ["user_name", "calling_station_id", "nas_ip_address", "acct_session_id", "audit_session_id", "server", "framed_ip_address", "device_ip_address"]:
            open_tag = "<{}>".format(tag)
            close_tag = "</{}>".format(tag)
            if open_tag in chunk and close_tag in chunk:
                value = chunk.split(open_tag)[1].split(close_tag)[0]
                session[tag] = value
            else:
                session[tag] = None
        sessions.append(session)
    return sessions

def get_endpoints(auth_b64):
    """Retrieve all endpoints from Cisco ISE."""
    headers = {
        "Accept": "application/xml",
        "Authorization": "Basic {}".format(auth_b64)
    }

    response = http_get(ENDPOINTS_API_URL, headers=headers)

    if response.status_code != 200:
        print("Failed to retrieve endpoints. Status: {}".format(response.status_code))
        print(response.body)
        return []

    xml = response.body
    sessions = extract_sessions(xml)

    print("Total number of sessions: {}".format(len(sessions)))

    return sessions

def build_network_interface(ip, mac=None):
    """Build a runZero NetworkInterface object."""
    ip4s, ip6s = [], []

    if ip:
        ip_addr = ip_address(ip)
        if ip_addr.version == 4:
            ip4s.append(ip_addr)
        elif ip_addr.version == 6:
            ip6s.append(ip_addr)

    if not ip4s and not ip6s and not mac:
        return None

    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def build_assets(sessions):
    """Convert Cisco ISE session data into runZero assets."""
    assets = []

    for session in sessions:
        mac = session.get("calling_station_id")
        ip = session.get("device_ip_address") or session.get("framed_ip_address")
        hostname = session.get("user_name")

        if not mac and not ip:
            continue

        network = build_network_interface(ip=ip, mac=mac)

        custom_attrs = {
            "acct_session_id": session.get("acct_session_id"),
            "audit_session_id": session.get("audit_session_id"),
            "nas_ip_address": session.get("nas_ip_address"),
            "server": session.get("server")
        }

        assets.append(
            ImportAsset(
                id=session.get("audit_session_id"),
                hostnames=[hostname] if hostname else [],
                networkInterfaces=[network] if network else [],
                customAttributes=custom_attrs
            )
        )

    return assets

def main(*args, **kwargs):
    """Main function for Cisco ISE integration."""
    auth_b64 = kwargs.get('access_secret')

    if not auth_b64:
        print("Missing authentication credentials.")
        return []

    sessions = get_endpoints(auth_b64)

    if not sessions:
        print("No sessions found.")
        return []

    assets = build_assets(sessions)

    if not assets:
        print("No assets created.")

    return assets

----
scale-computing/config.json
{ "name": "Scale Computing", "type": "inbound" }

----
scale-computing/README.md
# Custom Integration: Scale Computing

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Scale Computing requirements

- API Key with access to the SC//Fleet Manager API.
- Base URL: `https://api.scalecomputing.com`

## Steps

### Scale Computing configuration

1. Generate an API Key via SC//Fleet Manager:
   - Navigate to the [API Keys](https://fleet.scalecomputing.com/organization/settings) section.
   - Choose a role with `vmView` or `clusterView` permissions.
   - Note down the API Key.

2. Confirm API access:
   - Test access to the endpoint `https://api.scalecomputing.com/api/v2/clusters` using the API Key.

### runZero configuration

1. (OPTIONAL) - Modify the script if needed:
   - Filter for specific clusters or tags.
   - Customize attributes captured in runZero.

2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials):
   - Select **Custom Integration Script Secrets**.
   - Input your Scale API Key into `access_secret`.
   - Use a placeholder like `foo` for `access_key`.

3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new):
   - Name your integration (e.g., `scale-computing`).
   - Paste the finalized script.
   - Click **Validate**, then **Save**.

4. [Create the Integration Task](https://console.runzero.com/ingest/custom/):
   - Choose the Credential and Integration.
   - Select an Explorer to run the script.
   - Set your schedule and **Save**.

### What's next?

- Task execution will appear on the [Tasks page](https://console.runzero.com/tasks).
- New and updated assets will be visible in the Inventory.
- Use the search query:  

----
scale-computing/custom-integration-scale-computing.star
load('requests', 'Session')
load('json', json_decode='decode')
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('base64', base64_encode='encode')

def main(*args, **kwargs):
    """
    runZero custom integration using Scale API v1.
    Authenticates with Basic Auth using values from a JSON-formatted access_secret dict.
    """
    secret =json_decode(kwargs['access_secret'])
    username = secret['access_key']
    password = secret['access_secret']
    base_url = secret['base_url'].rstrip('/')
    if not base_url:
        return []

    # Construct Basic Auth header
    auth_string = "{}:{}".format(username, password)
    auth_header = "Basic {}".format(base64_encode(auth_string))

    session = Session()
    session.headers.set("Accept", "application/json")
    session.headers.set("Authorization", auth_header)

    # Get all clusters
    clusters = {}
    cluster_url = "{}/v1/clusters".format(base_url)
    resp = session.get(cluster_url)
    if resp and resp.status_code == 200:
        data =json_decode(resp.body)
        for cluster in data:
            clusters[cluster["id"]] = cluster["name"]

    # Get all VMs
    assets = []
    vm_url = "{}/v1/vms".format(base_url)
    resp = session.get(vm_url)
    if resp and resp.status_code == 200:
        data =json_decode(resp.body)
        for vm in data:
            ip_list = vm.get("ip_addresses", [])
            interfaces = [NetworkInterface(ip=ip) for ip in ip_list if ip]

            asset = ImportAsset(
                id=vm["id"],
                hostname=vm["name"],
                os="Scale VM",
                osVersion=vm.get("description", ""),
                customAttributes={
                    "clusterId": vm["cluster_id"],
                    "clusterName": clusters.get(vm["cluster_id"], ""),
                    "status": vm.get("status"),
                    "tags": vm.get("tags", []),
                    "memoryMB": vm.get("memory_mb"),
                    "cpuCount": vm.get("cpu_count"),
                    "createdAt": vm.get("created_at"),
                    "updatedAt": vm.get("updated_at")
                },
                networkInterfaces=interfaces
            )
            assets.append(asset)

    return assets

----
test/scan.runzero.gz
      koW%@[:~) ?Ȳl"Y&F.31?̬=A--Z{Ŋٗ{yi/gC)Żǯv>?<zOow_?/~yٟ=~xlz3C6<==c9ۺ{㇇ǿ헻<<vw_vWG~޿//ܼ_{wv?}l/>sKR!d[mƚ|/?>>[§.!?ӳۻ>nv1~}wo6ٟ}ßȳ׻/~ݧ_?|}ujq&Fx|n×>}>~{ya^X?/~_=TuW(^=BBL0ҘSǊc*jY15,1T2< *o5TAP&KRv&I"Iy$)O$)o;+pJEԛo{(XIpDdTڡ$5pTr)o=kqq{pw{χǊC*$dSqx_=?n1<|4pc=oVa*/,7F,^c:Fl_`Y*lvww8VQ^BH9Rs/ csS7p8B*¬KǌBjR? =~!uL4)1Dæ H
;ۀ'+A!EQ?~OVϝ]Xٹ{lU2ͺrTT\|}
3yLB<¢0Lxñ>i<֒S,S"vsw*pcE1M>giLbXo}#T' n p8XyB#iB!95c$	v&Ua6L^,%IOݾ |e_<	RT=%@\/\\.bo?gElMv6MRL(@RTvE)XYHjt/bO/C1 GUNOw8XNU)r<3L7pӯSTzx2B		L3<(Mw8$O8QdWjT<}aHA"EMpc!eDɻLw$$(I`.6QL¥+; _9bRғx9 QX5)}<<aaB.%%扄wan?>~<sFx+!n!9pl7VwdFdN<047Ь#P9+x<^TfSPO+0-?-؟phJ8KK
(M/P4n2稢jԋ=:4TY'm{:Z=TdA
N3UE1<N7/ٔ+Nul)Şah͙&mQ.<VǱ9wOR<WGO;,#X)^L>GcUTφG-AGXDهo>n"˹綺:;BS 32epcU]H:a\_X`@u2&Gt"8Gi*ŪyD}s,1 y$3gPv8T3|gLA>XW(EȧpñfA+]8HeMItZ̡WJQ	veNȵsQ)t^:
Ξ=1/FOn$c\PL>|UwTm'bvyҐJ5c3Ë 0p(s/^%e% әf&y+K%
*@R/?~}Q֌nw/WxfiIzI]*f*$Xpr~իe0sB
"g}߀U3y[}X5܏}2UU1P2plcr.kUE]n>,X8|l$pH:;+^OiSLP1lYD]6Apá
sR;ml 0&ySFI>UscvfC*8# 5pl+Q..b7flkwae9pl
ywXYlkopLHU zǡt8Vwǯj	E+s.OyGCa7rAxñyJ/c}0Z.ָ<<;9)p݆XahS,K|?`LRKSPyD_
gmOwp![oÜpñ
:|ҤT05T>`3&[[q6;XJkǍX<%
8w(S｣+La-iW!Ĭ8@CYTHE
*bԕ%kWJyR돇-͸sy+.mY|b-!j	fxX^JŜRR|
9!p=jY_<,;RWF>:? 0LdO_lg01DA0_?;!3
jiG>g|vAxB$	pǔXC*D mC7RNe͈ =Kڑa.>pa4wBg;*oXV|,iAAa<>q^V)F'{|2SVNcwQ]X9.=,7uByٛRQz9m8,SDR":qƊn1Qު02jԠO)V@(YƊ\؍v0WRdSqV":AǖD7Q4>mFsfa3Be\M8b*M\SQ]ØRif 	p[páp׵bBFB<Qvf*nFẽon0 ?2;ċ/]3PIڬNn3^1=!7SzB<VHxh]av*enlFxñ)C**'z"fB)xñeb6x}VuFb e<!\B+/o	;	ae0Vʹ-VٗsQo=n2t"td\=p|a.\4~=qݎǣmKp㷧a=Tvs|;e1>S[BKחCP%jSl1{/ٔK:f޿lZB0g86P96~%Nc3$>_Z.ŒDM>Eu,c;,.Z-9;WFiO=6Fkוkr>>O4d;R`?PITR\VnEB!dA)V>OD_od*ǽ-0lb@Jm>~
b 36X/KF[
ߒ!pcU|e^/?53SSJt+la,ncՑF3:tHpc,B4nŝ=
g; GI^ɩy@)=.\:_͡.&iompjW303Q6p7>(io_d[0%zp]ʂyg9cT9/<N
(Lͷ`g6*pLf;!>N5E+v1,7SCo좽]pcwVi
dsiPCxU'WtnS;<βsփ1XKvzmPj2@~>3WF0NkT2lJ|ͧ-1)fZz;`whuYx˥*x$87NT+'#coAsT[1d)\K߻5C>3$NnK;@idGC14fuVe!8-)ߴFc(V5@Rd\/p2+ū4]^nkaJV.b<\%T1e%zH$h9#J]C5I=z`ѝ]vީ{Hw8VW윳v<0@ gjtKi/S\^钮^g=y^$rCz;+C
w>~4/,
AvlCEq՝	]LL.
w8EO0e;َ$|g?2 6']Sef(RB]yX-vcvyK"V~߇tVg#@e!`ݬ`B2ʫ-9Ƭœ9fb[5w8VP"<T:qn_
G;\*C.Kq8綺:RYXyb3AZ%dK(:߀ga>~txñ7R>hyӏ~;l-nehߵy8Vܫc{&aCGY/s()Y,VB}Apcl@M9dTRuXQ*X8/:pls&xFFGgfC.fL>#ZgMC2aجm<x6[*JiHu<4OfCI;RA=BjQPY"QQ|+
VsSmSز:-HrT{bXV;뇪[Ia> Sf)^Ū*pm!%($Gb!Od_)'^񐒊ajsM-QǊ맢kϕZN9<u@8N9*lC{^>hQy5su˶ExY/t֠Xv>x}Y/&c0v.U8Օy"/*}qe<Xyv*KϸG_tWwfI
\tҢWt4+{.#
1h<XJJ)B4W3Y
Y5l7:y쌟6IY۹B7,R3Ƌ:I63^tPSB5>)Ύb\{w<LScvu	W.c^.(d	\W[%HO
g(YgQ]PQ9,u7
u|H/Fkͅna!BӕH;+Nd+?;)3li3t's8'3p<ݙ-8B
_e0zhd}J@FMb"81ጅ.V	|jMDB}bobxmg.,#s0E
gӡ솃r;,),qp:t<XyH
#*ɽK,-sSsfҷ_^
7l5<NԜ(m7yzlUlU-ѱg";3<@\	JtQoCnpW_%]fmwki|{|ep)ԩr1pxñ⽙*ޛq5}t' gx
%s{;Xqڔא 7ShˍjabKw7O6&GtSCJ|T>
,ZIQ.nv8߆4^|Ѷ1O2*q{3Bxñ,g.FH#9z~So !u;wp/=Z
f
^vrw8k.|lzq36S=6;^m|͋qdRH+cRY6O>d8I`~RA :H4w8Vr,`s,#IyIV (l$ŖRiZQJM4-/lLX
_|G;jjdÙ鮫fil
w?XL[{4l*I/ƨދ3W6_&猰c36l$q'jTH1=CKfSzF׆.؞!n[j{ֻmQ|{EsoS7ؑ$d+)wt+nWP*ou0ǥ_tP_>N
*)i^*X_myUr >;TS^՗E)VK{},:s
g_5w!)k3Ez(Y)zCћkg-Bf(9lRŔ.di)YwV_J(KFpxڗiG&HW6c|ozǯxZQf\,_j<XE
FS9tUCjI:)ڸ4SI!ɊISg<3)XC*QS҅zGPB9)2щ S"|)~OLN	X]>ۉ]m>SS?Ǭ'303Wvp9j#fw,z&2T\Lّs}Kbq#wpwU~|7D #{3a ʌ;+js3XPehmg">-Z.83qApo<<>nD/JgUk)NP0W
{SWf)#-r+X<\zwDa Tތ<:*\+5J{\y*4Gw8Ve\'BQ'H>ꛏv^mvWXM`980.m&r`R<wzxñ
~_X;4<߰
[ ^CX
*i׍B5ZP)A+?) ;JtrB]j5@ exMm/-Dz-ҹ!LarJ<m}M%>>PT6V|o灅u	K~qtw`]Z}2
?;sbUBXt'@.*apa36;<<ptJrٚlo|z:hU>ᩙYkOZl28 i.=ϔyPw8AYD6X
{hpdX;+O'8e\T+X1!0(4<lv>XR*.1b.3Dփ[hkmFͱYZ`r0Y.
Wkk~%pԹ;۠&5^1β;|%Jivc{xñrPjf/.IY/Tus\K%(I8ftApáչFhL[_-3(ʼqK3wV[fw
z:NYR{[1c7Z	Z9E%ٚLIz[px[ZHK9L:O="~el1|sEj?mbAb!eM᛿퇻d_b28^60~UcT1L鳳6B;Q
Du&Yk	\1䫶QQP`MO{"HM`@M5N4c<XCzh%Sl<vSF	x9!EE+඾t]Q3)q獜sR:28 P4Ǧ#pqpYxñLBMeg/,ҷJ9ѷv-LZHY
CkO4ܽ{5Pi[6YHJ]|AB.ABiw(%b)7SWQ&-&ᚾpc1ES`åb0Pa15CBpcxIaUBCj־R *|<<]Q+FR*GT^1J\W> Hy`C/l/ :g 1eQ
URShui1B*8
!=(
V_ᠯxñ
{xG%:i]a@aA12w8Vғ>e=S|{HybrKTve͚1ER٦ZYqɌ̽'1F*lvP{7pA|H0^
0_&pc$3ޗRZT2R["WKApc/*r8/$|wjMV_|jMQ+ѹ<h;W-FϷИpxk%;.U	5SwW|Qd?Q	J8mLb)dcH"|8`?7.W5醢fqIgVWb)s㖹h/Pid/_|ƒt̀{	bvs_|Ǌ"*h}γONר\
 b3tZhא	l1P({a^Q"rW]E?Um,5s~Lhh	p(t<XB8@`K$	⒔Ę$Ibt)LJ 8Kyl03)yJs6SKY*8RjFoer,3 
d;L{܊1OM4w8V炏΄"[1sNe{LQRZ*TK;۠#YK1T9_=eӊAii3Uk |0׏HscU
z-Ѽ^*<\PDñz˩t3SV]USw9ryƘ#jρRxYm	pj<<5j=mlqsiZȍ]C-`
%RRT"
@0:m0"#ܓI&<c*G0ɘ
1)@C*hF7)qxe:oܮs,iylD40"D"es|]'__#k8/>`չ5#;+)1աG6e{Ǒr2GHdwTjhhG< ng6O7ȴ$dJ,!a3BhdW{pá
[%ckS
	RՏn,m<pU^H!j2灡m Z }$c\L  51:yAP[]l̈^~cZX90\3pl4%ej	Zx<&AFjٵg1LAR!hWJX#P-
OU-(1)4E)Ј٨08悵9]ߝB\wKAA̙'(||$UN C棊)Y)LH%r6Kk\vO
 %|pZIqʻT*)3;p˄.\XRJ
!C 5ƥbXaCdMxbq׵H;3No>,خ-}ԛo۽!Uot-{sc!{~sspz}<6␊Ix7d
n,pwmG@I+|M3b΂~mbpc!!e]1
e%̑	t;+_HyqZ:Hg=RrLCw8u_㼎ZT'n.t/UDTi7Ztmns*j9HAypX(΀ /]`,i h`Υ3T2i `B6\h<p|f؛0BT!lJr;+8C*QoN̺GYj<X,狫)E)q3rS|{X;+ܓ]q>Zky*LpuxñzFb)b8憔	WK͓1w80b?T,{*6\vؑ:2HkrY1E>n	c
rS-rAxñ)BI,;5(v%ȥB;=KSDb53:getBqxñ
*t$|UWLY٩	^A	pñ
fCw}$^|,	S91<wNá8﫴ˆF}Z
sS=>c e3!]B۠'졟lAo>ڸǏaLajDCPSJ6n{$0&|5FqE|c
cujӟC5bdh[}yK33H_ƨ9/ă>oF<=z1*?АY(f ˑ-M#,,Py:=]mΫs]5^Xz!V<55sYbd L;![iGRV	:pSw[vs73;+T4ՔO^bZh\6p<7%-qIV/?=~}q~ew>NED|I (5pc嫩(!8(fe-SifQas}JYj<מmUMY8+sdfL% 5V<_|@%;
oFaHS%x)A?sQ)ե<0SM4#)<VF&:2rB+=q髯u29t'bx1d;/nj8X}ysiӇ)Os 9[1	9H;MN]7Wa=MEG_^|XyH&Uw򯾙r&O_}͔SQI"6MaᔇDBi
G$@=xñrv_+8"󝞚;F9pGe[+O$a
=``=%f2]d<Gu=P[%n7w)3p/	k;c+85QgK[.§X,UM^988LuTެsl/>bR-g )Q@n)KHb'dF;YZj`F%f*½|ᩳ~⛳S1##yܶt1Sl/8t"FXp7	E2lE5ȊIT6Pe:6MI;]	OT3zD{LM4W
<yTvUo?rCws
i~1P9pndiʹdt\<zxxaL
["YP.@ymrdMPOzbp:tu#©Fj!=x\]ڙaϔS}<
ݔ뎇"AR"!
}TkO
[3{RAM̸,gJDýxñ
d+=nQᓯG6	LTYZ9k3EwZvaanqQsUsҩ4{w;+.+u.[}٢s<xᖚ*Sύf$~ŬDXYT<5S/>WΈCRLE2_{hNƵswX̾TkRĝjvv|٤=zN
lk@:Apc6p/ջQ?P+mݘ5'<#oCe傏~iHj+}a¼%f:ʯמ1[ockuEaJRvh2{1=>pck{Fع}on+}pa<<ެSI)kejA9 L5e8xñ
kR5*XO\5͇|h;]N{"xoLdf.\]|<XJHZM9CNL?0:SG!R;+!S5&Elrx{e8O%R P.gz1c
<1Hx%;nX\͙z=(9wx`ޣ,5nPkK,ZΊ{u:vXRМ;h<Xqb
^W=Z6wD;&NwwT_Mb1ZL+?mYK	b*2wYLbt/kdaA%°XtFȝDgq+i<"h#$wb 
g;*v¾9ʨxt:1osQ 
O>*3veɖM*mpu>63ZS&@_ʥ|;שX^*~^:2=O ML};rme%Wق<cKkdnۭJF!y+Uf.Z1۵p8{g&)V|=/c6~\2
LJqA@G^{a cm0.MJe>8<@R!|a ;+)i'XsЋ<m15GI
pco"6%;G 8]hwP0^}8V^R0ŚTԣϏd5H^:M S)Lc)V2|2f_g|CT0s[)H]JO
6	NR{|T<l'_plG9	_|=K4طURUtK(-m,[HM
GI7Bji&EAu!v8AKFTSq~2/SO]0wa-6^cV!ESV@4w$1'pOsb-/E++DFow8V<QU#չQvbj45,hTxX*>NVzu.lҍDb
Tkd(/>!>pl?a.ŷ؉}UELX*x,5)8K`o*!b]r	Xyp!RSg}aslCTMy$Ͼ܌/#0 χm@Ne7:@WP|ӿ	tFw8VS+i.+)QI	O5stgJ^j{E
&uO ְ_	'7g|Iڜ!C
%qAXu50!	g\5#;3~SQy{j BM\`*@~gLttf.27p'=I9-	^pcH}1;UvԛyԲD.d9)VQk)E'HmǮevꦆWsZ숨ǖڃKv8Tc/;rvd\gߦ#ۍBipñ9TYT|zc<boh4=ʿzD3f4fSk&s<XF&Fo?U0{%4TuS=Bޱ]J"2p@th 3-û|m[,=W]ҙ>&MBH%3
7*\g֨'m;#9^*	/ut!JU
jIL%]Vf8)7plL	ɚ`	1)(-Fٲ)JT8Rb;|&d2>(-
yaYv`*;7{<Xy!HW![h`َLT2;'PαhiTy*.#*IS<];>i5E?/ۿ\t<1BOͦ
{(XLN:ϫt渕%	ѐFg
y:"JN;ܠZW1[Uv#I-<l/2
vJv-%t?)AVT٫䀫7plBAs8c<wԮzܵ7$H=a,&#AExñ
 K=}*J*[gt	!`]B?x}8Xy54{
U.q«`33~Y|gC6Uӯ?W5UĮSǙtEwxnn\?pjHy)ol4kVnBQB>St2;6PK
{_r*|A2\٩ܥSJH1n_mb$1v8VOڶ:{ԶJxZ
%60[!I)PE~
"`}8Xy't#
d<Tdbi87pj*-tp{DUA
YUdpáVSF4!{>ssf־l2Knts/d}j>y9!#~ؾ{p1'mp߮kQMI>' ) Vu*1w8EzU	Eת̓Oӗ;U4!6ۻ̓Xf43w8v-55oYȳ:OgO!Rsƙ׿4(EW4!;z}^(r{%#άtbZtPVCjMN
)dH5; А6ԝFh-b*,~  ׷78]Ϗ}͏~[@Ss]jQ]ykJY!$㌵6o}*[D!,bq$3>n̎@Xvmd\]"ax
^APam̀<UTñMVXM[VKǏ_n}{wf^TcZ+%z֚7_֮+9Rjh	i0fz.sCX6;(-qhpu$=b<̡&ouk!45vOsDJ4phҮ%ҋܖR͐^ٙǞyݕM9]^&r+Mi9t~,Eb퇿(|JچX~Vr&(JǻwwE	o.\6phVƙ.(aA_w~x۾{sP]٬wMɰf6Y\bk:&U1R|_s
>rOŘ[ٮVW/cFWGwg>?Z̮`sY<A.s3Rhhxñm vxK2gJi0W;2̴wpxñmxW/?J.VRh=p3R45kb̤R{s:	+vz;w89&ܙaXD17,p[ 'cE'_JXħ5ٚsQ筗?"Ѣ)6c˛F/T7NΎ;X	+E㬱#ǲDJΧ蓦+f)D|^G:ICǊC*/:8RWT u	&yq>p ud)/3Yjn@hg];u8V<K՞sN/>RX_ARB҈sl3xñJW~lÚ)x9KtEaxñ幑RGU$C
4qs޺	d.CJzJ'H޳8<&(b<%ճI.kW䔋x:{p?<cş}fqFOF
\稯 屄, >{Sc!vpݱSRpo?$xktHaExñ
AWbZs䔷rt(5;ݿ/0y%Q'yHg_|GT%]ۡWo#1lcrĐET6x(R}@M{vϽjQ@q
;,OY8{+΃)yʝ-2)*)+(eST6yEP͍=ꢦؽ_2nwRǊKʥ'2YnｈT
=X;+ߏqRGe8H#y
)8;3$Rw8VR^w@
Re&w[$3p8rR`gAw!5#D0.wPg/t_.(,uP zF'xñyT.>)\|8KԶ_Kb!BaI-v0 IlP1*/E䥎YkØ`y	Y*7pR*JfPIڍ!T&=yH44 be-yb!U!*8Hpc@j݋u+{C*8PARb 
Z< L99`Cx*KER< C,%]KEm KaHCaNpc!%<ƗlpY!84l%sF.UvԸե\+?ȰRlLv	 %B0hC=ߐqnZ7kq+oE<Ls\|!QN_쥊:\:^SHţ9L=;+\ TFs>KE4g-އ:<8% DmG"8H?
]GT*wEu,Qn?MP^:m̜qU\b%+8H9φ@7zT)IB@
PY*2JH K%Blgt%ŷ RH=6^|x+֞CzTcRHrRJpc!]N=yH/lԣsT-5qj,D0n7P!A
icdۘ`x0`oK,\G5KrRy%r8XyHEܸ.
{N{"M./Sl1*ꥠsK:O[RTݠV3Ѯ
jG3LxS/_xg?Zqp)pá
<:esTV-<9p[I
g1Rk~*b"?qB)W;"oqh5'{!:x?/Xou@Q[6mΣ0e$RY<THv31Ixi}	q%8hql!:'3WoH/[X<!)K!62@&͗а~zѪ5'D
;~2<TOd	ohL~rpN}8P8K~3GL0RpH}8PY)\	'OO͖9_p*mIfb5SA-X3k;nf_D;O]}߱xx"qz;L<y<KS<d㍪)xa}.OxJ;t	[OwW-\2Z?xxD?6nL to9S3S~|"\0YAM,/$+f^O7cR߼>4Mz~]"J_p6ovn㶛{82n[*d.H//۬I߯w\3~Q>3F7p7ܥZ<0
0ޗd/ҼmxypO'ص
ּB
8g6|71*hL#A`(P;plDaMӛy	{Ly&Ay~	LEXyLÞEb|U"Sj[
1FSc䩕Vl
iY=5>hI}4(UKCTFw>h-!B#
aP aE}Zv8{74>gDRY|IDR}<XqLr:WKev[KsZ
x\87pl<%|9:g~e'B0;ۂǷ^`z)BϠq|x:6b7WcDBG0(R$KmV+xGu	f|h{8Zu/n,K;+)ZCdY{쌛'5y+׮\`ә=އ=%mc1;w8EUjUo{TyDyV;\=2,|%znEgu6)4ΰǔEBj8E:*TE<%	b!c+3.LL*0l84z݄==w_(<~l2'<<ɄڗYsy^2[ //]RO	c4O/?lâ0Pz׮Zb*Pkt$Ke6=q<um)#f5:)4Pmjq	wݗjwu>ST%,UFbRu>+0?Qщ|e+n*uiw%aL嚓<ݗH-1J-1KԺ
3<zjt32pcttu_)LP5:VPm)ѾL*)S+T三Ox<J)Oј?n1AU"SqMTy*N	~XR"k?$yL]̵ǶHTUh1tg"=pRQP4S
\Ђ,ҝt'Ts&Nv_0AeWOS;XO9KyLҎLIS(OsT_2w;Ŷ P1ő	P ]]8\bݷr'ZOa;+Cmp5Ֆ Ҥڶ$y&*&k@Jmw:Nv*Kz/.pHQ:)b:=ǶӅTY1`꧇ǻU
u$le:'q)jB_~P"I3
m_E)ØJ$N*&SM: SVS1VUY.SEz`DݗjTe$EФvþNrr773o=a)^\S;p<RvݷѩܓԌ4coQ'@䩒jJ#*!kAEc3_{dp?WcjF|	<[[pٗTx7y )mɨB7KTMF}<.ӃKĔjTx$y8
])
Sq)GT\'	u]>I	ؤ
*zu('㣧3e/ۿÇ_IqčFӵylLI[d<='yOg<S
ԺiUF1!'GP9K(qz0w'W]b*`='LjSl=!EJW㜾XLEP1k,w8VqЋB֪byGGX+=}<XyL,<=Z)`>\_*FǶؑ%iM1x`|%&OYm{<<}+&+*L̔7plwY\
8w)7)FĮﾉS=g耟
Fg]j)SlL	0ffXL9BËY]lN5Q)ȶ)Kw8E.<<cZ/*`jfSL5SHN}!y*wPSR"05>6ǲlQ Sjt:Zv!}ucPMcSTpT=u>Ŷ0rU`1ɣ3W:v<'BN1SS9M^?y3o<,Sdέ3*7YgTZ}j35zL:㰠g$艨}}jt+hKOң1E4OþJWL5:yHѺ- S^guJ)|%FgM=(sb,O,%)5z"~$TǖjF=Iv>v
1SYPtEW#3z#iX	;I˶hu-Jۇ2%+vd{rDgU=Ecj&6}\<2OϾbBv`5嗭
d6UEdW&zpƻET"a<<]n)lغ;WHѐrRQQ9H~6r*)RP6ӣpo<<e(Lv֜l}Კ+nj<ZANeWBT)[24)_auxT
,,/D_6_K5kj`:7=Y</3YM1 |62;,C:΀o`bP5t
P%j\ѭ RU涶
ǶхB1U!%4*UQUF"A%<$aoؐnf|%CD{Ƕ@Ժ/s5Rgd
Jv.+d)7)KSS~|≮d/a*`Q:
+
ǶS&<J8L9LQ5L9UȧST5u5e3X, <UsHTSl,iQGEiH}p!E;+xxkHxʶr}	̎+f}%@SDoḀ&]@+})cL-[GkbC+r2@EY
I76 T0sy}
?l߽àc9ĹYbabd6srA*BO?5evڛdN-l8RtRdO?` T
Z*#mgQ@q
l[ņ;@J^yBlu0h4,̫paKJ*la 
-˖(3)>f;`!I<`&;(όsKԆT>Tm1"rڶ倒+µ<U =QgR7`sph+OXx:g(詘ElrWB^eݨ-+h rf(|E"U~LHyh@\!*89@a<G&y(7m (iRf]rz}1r3A"j(Eo"MC[\y((@/ϻ?v~ߡ%gUwG>6ټ
8US]Ae̓zu7:o"ꯗ< lA]
hPo߾~OQ؞H^;	lfx@upá
+W1#
vb>猛55yQ%UU:g;[i樒 ʨ<|-3NИRկ,yB
2{rwĝ7RkiPj]e(ֱ`b?TgBmpx1)},tĻmQ5.H07V`"V+/k
.|c6C<uhxVq)3;C=sӢc#S"
J8s)[Fj76}:Χ(lbebTE1WamQ_DA<abFSSSޠg*>ق+3Q(O~M~jw/3Ppj`o	"78P<\U@qWI[a	fsa1>>i
f(̫!A Paݕ5+of((lEd4vgg; P^?>|Ey}arG6ffEy
kآ<Ta30w<ݖ.Sh@嵺rV73W`gPP:^f^*z,\W\yej>C]P20[C%^yl98}C[Pҽ)
Wj"jf4C5$pZ%5Q5̳DsxS6l'/:=`_yx_G_1s/ni+oO%6 
x)ʃ0T-Uyj^a'>pK<S&;r5+}y@#5ll9cFp7chg4zE	:Iŧ(T[{KQ3MRTg^ޭCpB(k~ea@
.gO- %-7QE<`B {.ç)f(i 
Xݢ/Z;%
{DRf(P;l
A\yA
y0
:>7K0lQ662pZDC
P.[M1΄"蓒**ԫs=dshyQ@7%>GTr+½'J3emu6/yݼb
\Y6<
a(*wppv
vXj~Ͽooy1-ro
pce۰lV1Q^5b]*2U#6"k3<7}»u6ovn6[h>6p`qLqᰙS8>2Q7?|7w3{aky,hڈPͧǻ9O
p@(U;+N$媜r*BK`/+zTp*}>plL?0eS*)`SLaF?6TYcTj)Е	a]P".a<Z-0U-SxjH5}T?*SҘ
j=cZ
xxyfUv<<T_YIT
ExL]kJ8H8)Ev6TIES0~F,`DSvS+{3|>+c
fUP9plL	T}S. ~*)3rܯ7plwZ.XSt=̮gKO9vTr	<"/؈X0*ݻo݂zJytS/~ U3Ukn_ڛ
Ʈ&rȪ^PNϦ)5L<}Q	aS槟_!LyR
GyDymam)ݶ$O!@"ךJIk½RJ(zjzgA5sX@o=wvdc66nM~ǫ]k}θywu%\vͶ!_ּ8ގ C1=&u{ܽ6@!fW#\[-+{xxHX,w'9?p<z4?wT@TvC
o<pdC\*fI1z,~homIcqqZ8j;ꅩ<9Cs} ~鿌w}/F[=&cspa<<%1VyN>pIUKPu̓Fg=kh).ƒ/VfVoϯ~W5×ݧ7~o>~.ٗ/nsۄΆؑuP3]wOw?`Κ`~cs>/3=;KJ!:@25bĲP5p迄PV /:y!K!/%zԿ?\aawh.:Iwݤ#`;v_?^/߿4n!񭙵᷿s]
{zΤ=}{F_.v8)o][ >CC!?w?
}}=AH}BٴˣԱi`y/09Q=5ap,kKk?֢2xK"р
}Z;"M5?;w_t_AK435짧<P2Ч|ŦXy>l(W
y7o9.XG"_."q+|yҮ^<޾^6cY̍	,6暱v8I0])EbaTu!Ϙ^EqU]Bq?ŻuȹR틺sxFn9iK]{E_s+$ w$}4fnIzIsy7?~=]1xP /9ӖJuáO F$c!s'i=#ۆRwpqOx(ޯkݫ߽Fpt áOYuAp	xVm@;;'}J	u]0UM
Yje@.Nve
',뢕Q{͍v:˔u;pSvkqxPBCJ~ow~wa?UgE<cX}9ӭj!BI!]H>eVv>)N~~C1$f}>M3G%j>7d7Иs}R.NjՌgzP1q[5v;n:hJ'Ū?@Er?
:(ԝ5.BvFNwfʪtAFSm
ce|ܝwJ;L̍ Fg,ig .<
nMpV]fX~[t !:㩫Rn<nŞpOx5{<)MKx&lLQcMc6ZPsW\#aMχx%!}Bع5^9+o݌	ݐ(.oT7º>P`;VbDx%}IMցĕSs5|Miĳ}~5kBlsGE:[.= υ}QsY0}vhdL.
&kz.ݾb.fLuܕ")A
֛Ue$;Ae"
s2f&E]6>XsPɹ|:o3f]$뎸+5hL a`fHw%n}\Ys=bĉ-v#]Y]>射ʛݱ`ah0X֝pˉFk;t nvJ@vNSݱsMz7w\߳y;bsa>V|%78¦+<)9*6{J1&h"{50X.o	7.BD
sfX	Yb1rdz0rv8I_mhJԊ_A|æB<
Lb8ЧNu|1dyK(NR	_2a7;jyS6bĚv++C>:r%|"	bJ&ِc*[݉M{0c.v}'V,C-.TYȝ:o_eG,cb`6kӔ*}ʇ<C.-$17S9~\l7#v8)-/=fU[*l>+P]p^J
PBA
yon{S#0:ʻx:
g;n;rMy"Ւ<5j\u
Y3XduIIWҰ4q\bV%W-29:$ Д*X˞NVآd'bΝϰ5ux.	+Lb}b;bl2ΓqNZ;u(Ӥ+vX ^;Ec\QƮNA0Ή/&®(k cG9U~,<.$:ZΪ~/^y81qG&FSbn]SY%vUbwv"v-kh'ju c`Q5 v%f&íǿ&A^\O$eoci3WqĖ".Y;Ɖ!#9/W7uĖsU.͌ѵhm ˁt#lZM[}r!:m$T4&P՘xj:D2IXbN-rt;J~n1g2]J`+r/xoQh <	IVId}'oUFِǋCz8Uf3oxܘsXsJ\T,NUc~I? Йl3dQM,|dc~$	gX̢X7"PXcu9OLNVO([E鞽j:_czb;?0He}خ?^ol?/n^>BO[-.t;Lqvd{@Q(vF:!eNݘcp({%ɄFĦsb.ٹzDabTI̉k28&鬒:)	 9@0,`x]P}%~j:#(YZ*A7.Ycz0콊dM]<ͯ<IԃN<C9aZ'd+. aٻ[k7w۟ҡ#/t0]^+*lqmOAٳwɪ؆ZHA$cX+:Pu%z|^4uzS91}wE"zYy:rL%쵁^Mvm0ڜeU8"G:D]=:YK)U1iSu~}^;O-g]RG'͎{p )Ϣ)6٩
wj8#,ttCz<[igu)A#!R1óW}grV%ѥj+	)3vy¢:SGUrF}Wi+g؍o޼xw=5۴԰{Ħ^zM%aДYs=(=j.$N,<Y2&h5vnaǙ즇Lҽtb:pUΐd48DgbF8ĘQ76Kl7gM7`o6GaF8
+By[b9!gRnB0kΐ9y
Ck
0\xStamArĦc!+kx%Zxh3WPE}_z>Cc{k85^i_hޖtdMʽ)3AU#j̄_vsy[b9+kA
m(#apW.(xNLgC*Q2}*Bi\ua<,ݜa5*VGaU
mV
OpGtN:WhDvsC!㋗&|ri[<<m*c,:KҔ9 yPP[xXlMn[Y<P2yHˋϻ[ȳWHGTE+B%.$^:..&qBKed?4Ik5ȚUo`8_+:܎XbV.%6M+H^8!1]+8EEӳwWɲ"(_/  0=8ܻ`Kl9y?19Xg	y?!moAP:>n;=P,3A% X@(p@y\b)@62eiͯS	(cdIPdu%TuJHm{PqB n#5+)
.ܲ0{hTb- nl53!d
Yamf7rN_@OmMT.JRj"f|YޯpjB odf<bDsx{xa%G1NFlCSyD2jC0FAP#TՅX'AxkH\Tv@Z6Rx|]b2c"%EI)(r%Vf19:t|\bYRju"nIKkz5g3V7x]tUCM]8mD.*8| ^3պةDv_CToKl:SFܑDb6@.`#az[y1e/	oK.N#O-%F2E9Fɋ*ϙ~cVby(޺\)6ێN#i?-9TVjӰgg"sX<FSΧ~Kl;zĒy?Mi}pvϤf]lMEZ>&-s݂RWդ#cĕ+ZvhLEmgJY}خ?.^,,'EP#%-@U[ V6BȻrb6 RdsOw
b1
	N`p|\b	05zT_AxE?S`34RC9~Cn{͸stF=QJڬT~Πʸ6=tIt?͹LI)`Xig=<6S&2TXa6oKl:';mɐeyQm۳;H1Ö{<%s?	:N\GPl@Q!Ghe5Kl7x:ZcZ<]n|U=e]?UN=1[vXka~p5Si,T-XE9lG%03xÓ[ܽtN%x9I s>G!EĦs6q>'9c<yQ.B'rى
{lu\GiAd #mM,]M2#uTCWGPFǢ.UZ܅3<АS@ᆘU jh;L%[$[s/]WԐnđD72;H$D7z R9:B7$/3yHId262Xy\b)X[R(TKu Ũq4 :	^lvHY)rd/8y Y%VTjÿ́^G`B
|K)&vE%p<.4Ĺ3y'`X5v4Us@Jn?NK4@J<KXv4o
}\j:1lN[yR"Fhb* )E eFU|JjuKoox$
OtүĦNt17LFe(`t/CQZa$d̰v7tCAFtRtԮA)mMgĜƈ5:1~fBq$JJNՍbׄ
uN]TC̞엛ϯ?GӘsX$^rYm[fּ-$J2jDTTIfp#q}PT݅Ey=/}k->qI5&Rlw|\b䚲
s^Tfts ب^ىk{5LmtcZQQUŢzdrl.2әv} 5c>΀K|Ot9-ϡҥZSVcڥ/ڼ-鬲)ILY:uN809bmMg=b2GT*/%_	4
{rb:羯Nu,B#)PSb:^;1%=LYrb\9#ui¶dMӰ#X:XVU`؄".D˞".N_=˗{)ϳ{t:y5phܱ'
7\_>xb] l->rR^uAWĞCCWBVjfuQ;gtuQ̱.-ꙸ_.6Ĳ%o"$qlp
bu@ϢSRJ	t*D!<km!pF;1Q*c3
b({p$.$7:B'sbNԺe5s^̊*Z	kpEL˻*-2K3R9/EդbA
54h9q{ʢ+׼-ir¥ (|FX9ˣ\/ ɜf%YF$R\8]8.ێ2Y!8Q3{EͤԛEqEj#JK.EｻBqmӳЈ8)<E<yr܍<w1wc	sK)9
9
k%1hN,gm܀׬e\[1k1N"OKl9#`KxGVMfccb}7:اsԚdcKd'O`~ZbYO=RD|Rh
]L?I~'æ[Ŗ9;qE
R`!Pe(ɔL5d8#pXv?50\#H/s\2p[,*圵O]uLx%ӣ$uDhY{|b9gڙ(cn(殟A0`C9VFmޖtN?7XsJ%=n(^m
4Ꟗ>HtU+${@MZ9@/5tt*&IjW:x>3Cӕ@,4]A)t#b݋:ئqʎJ͉p`9/u1*Eo7mM$ƜuNLH7]9 \xS]1RKl:^[U+`ׂ+.f$RXULrsY2,޾xIqE$)<DȎ"҉ݒ:th>ЅJ&tEJ/I:s: 9^zU=2\=pVoIMQǄU
; 򈜠ۦg&o3I&m0ȾnD
2؃A$:Dϒ	RJmjĸ
:kb*%|Mg=IE.q.
EkKnt֧H.a!Io6yda?>직_;9hmĶZ?8_vMk80Og'#as	æFasyb-ۋBݙd'H C"*66	ǩ+V=.=TL?ޯp[}n]6@" պةD^U!m/iI4BZk5J[LTJ^<b%m29w"j@_%caREN^FVmMS&J8!Ñ etQQ}ZCh-CSlPg~[brFtY@K.j`~h}|U,	_s7>A3~_%ĦS
!bE.]?n?yz;TNb.ir`)#Z<_N	ۻOl?c6]PL-mոniS^1umqüݢiNit*N:=?^}~j~mJbnUSb/Km!3!P|a~\h5|] /K9+0&l67oQpT݉5紪S7
`^+ĂBizĦ( (pÅ_}lG6
vԛ0;D=69MQt	W8D1y[b)|TFQF\G~~DUkT@Jh -ILܛ*b(TzvV>Uxȋ졢&
kP :{+O\;-.;<(9CPQ@u~U
d*6tǷ&焽,d*.t )Gw	OƁ(3čÆEߜPplU@6]jYb9t2bU	$*v@ȣ&Uq۟!,뽗sYv`:6!AhR$0/@[FE0b7%6QrNFy<NLZ~P&HAy6PׇJv<*@D_J6Kl;DZHYC>T&շ?!<LkyR#F-Q.u|\b	Q*j6Z/۟a@	71ҁ	ѷXfygeD\QзNCߣJGT޶!
&S`vހ"BȐ% UzDV|
]I~<_	Rݝ	׬sxJeLE1s)UL!vqm:#TS8R(>)p)18.0)ݜ։6&)5tJMTL61y9zq϶c߄U_bZqDyǔƘ
*4ۂqmSKL4^֙3a
HxT:X>
)ʧV)Nd~*)H9W&6v񥎏ۄdt&L1Ys8%:$	iSi>P1!l(Gב}}7e]%06^,φrtٷBϵSƾZ͌L	K)eOx
um@Ubu
CRdOD[2{+,:vw2% X6qnBXUHeJj:ec-t W.T-3BR WOeNlM;1^#BqEԤ>wp	ĶS-lWL##I<>nAEcnkJV\d(oRKl;syyvYk8+U0oDPĶǁΧNgzUțJjXaMt3h}7%QWT:{ JHY` *6}S&R\=pɶ_O_?<||_~yX0bprNF_M0NNl\:XF5F"zih;	Tytn{\q{<sjF*7I
es6L%6"OfU^y6{,`i
z
Kl;lbf7razXM\ wI'rm`OׇptKr=KsE$Z܏	QxK)sFջ=&V<GoKl<JMtfX&WH7)CWkܡ_Ow:xBVYr=z,|T!T!.qm,JV&*W<û*! MM:!;+14ܐևc̣Ƈ UM$;|y\b	ŉXl] ^==*TlGwݛmJtҩrh|q4-
~|\b	 Rwۍ;y`RN{ĶSS{)A	[<i4bʣ*T=>.U_n4[cdNba43)ep&5ݒ)uCQM QqƇivU(x]Ķ0GU1,ֱAqӏ[^	Q6*E¸e_zu#8[xkĶRDga WA
 U-CP9h;sV&(X3o
<BC d[@lMh|H tv:6kGp?{o
,"\auOԷP{^V78'WKl;J81aUp7>fM%NmpU	KYKyI"=
_~k6mgцtoRJ~a共/l73`
M[]bT9tPJẍw!6#( 6GN-&Ygb
abPyz|\b)03LA\*{vĎlnAu|Z^>İJ-T=>ncsV*q8vރ0TWX_Ķ R=V쭌0pÇP8p	PM%,%c_Q`l5ӛmDM!oA:7c
AmN#߄-XIÈ:@qG`DNTnׁǲKMZr{*$
	|i	.rSs>{8<km[TOQ%OYUŗgYڬ9CTVoO\5,l
qm'X-M`H;㘂/r57␸fJL|9I*g30tq5+Rm Ķ`*!ykL&a?/q5$eS9J|YY2y2SWX[rtncjاwYc ,T;6"9tԚ
= Wf0L7\>qL|
j`7o&}:q'
g`
SVF&DS>N]y%r*)
1ol5`]ONL}/FUS
],>Րb~*lmncyZω{뜣0#	7ۦ"b>b6S z4"Z5,ddvL!2'yΒf|6G@"#`v{OXyzV%U;1B(C,cx~Vxp=R&G%:RTp^"氆
m>t%}zN+[	 *F]m>L!+LPm
P9\"vCeo	F3/(|l0STzѡʋnJ9k}ɬw~_o?oPEkӡh=pp\[hu|\b۱2U.$qq/?~~=;<MRNg-Um[Z귻~e݂ H0IKVB0芮m,	5Emќ	b7˿ =/>P}k&1X19U^z1ƊiVcq=[X~YVogcK7L4+;HrJi3"83%@d*q>gZ'By[bI16ɽK-ތoDK6!Yl%6M v&@ȒXyY<ynּmy
p]be	e/ϋEȗi=|$_mM'uBEqϘf	c~GaBe$Jl:),Y
2ª}Gp@sx3>@I`\rP+ILC$l)/KLP;̐;=#$-جA3~FzFوXti:;ά:?@
VG556Kl;%ؔL6Vc:wew{<?4<
ue7l>5gf5ANMZ,u3n??c; #W82z-6Mgtƈ f_oH{1sL4ge|T'W`);ӎM(&sIb];vYAM^w<c|
3TAČFSbƣ#J<c3"bygRGgmۍ͐N}ĬDz3bo20eTLet,]<60݆ Z(
"̮2Gi $? `j
{$GR^k֒%6MI8(ޥ`'ʋ@Z0 \/=rbTEGHCa&xHDNKx$zBo.0'%(R5Fr#)Ca-_ykH@#cεz%%7C5FU`X
yiKJo
brcM틀Sd6bĶS:2!ǌb[J"=#eGbu2aMyX(vl#;(\zr+_{\דGI)eȤȃ~´IdoޖtۼI2,V_X79#vY,N	4m[SVf63ԗ~A07󏯐( '-zvH#:`:Q)t/M=G#HX6`۟F&%CS1I?ĶSv1%[2lʠ/6tMNCRvRtMCZ&+1QYlkdMۛ##K/eg6ԗd&=ꧬC~y[bӱSq#٩Z$"Dd,e7BB'$b۸v)S.WR:䋡({uO_|#D4.g.P_ĈSҢys2X_6i9UK1Kl;_#T6HS_AO/~Ab9PcjWhW7b%:4aƢLk)~Y\>Z~BK*܈B_Q aUnNG
lŔΞC N'wJ9e-+	]q%l47o 39![n({|ae2-bIӲlf8Wa翷pN*g5"|'hvR6>0
c)|Kux|ZbYP8*vO mJh,XHpH|']HSı>bث6HІVZ s|L+S
RR6L97Whҩz
ݩ<go9<l<rv8Miq46
ޡz2/c=|rW1ËZKul\'CnAtlKlVӀZ4`E7Xd-HYa`7^GF..VTh*@ێĐ%%8(r#,[Ѧh4g]
.[`Kl]#JJjiT4+ge}QIټ!w찺g7r~/+,vpۦ<I.a!GټbmLy𯕅4w\lJU!j6]$/ФE"fŔLןK8<}[jBߝ&G?4i5;.3HJω~O#	ZbuTN۪HueHs`U>[K>$b+.Xm
+6 Ķ~%ł̻z30\hɒsZMֳrsp@ePIurmzvZ/p
e/7gg6YtHyܑ_g>5Ό8<|+IB*!BLRhɗvRnc='3qK#ȇj`͡aS(r0g
Xx@%زD@퍺iu8c
̼mt\П)fO\[M7rf0"cr9gg>s?{*7gͿh/χy:lTu^eo]xbJ. QGjX	0	fݗJ|CZt!1]b)äNyXo؈4d\n.;w .o1ERa6f<9b !VLfz¾llE(p4S~qĴsks>]_ǐ"ח}6*T`;]X6oKl:]/QY_ѕIҴvlL#KV5'\{co
Л%6=f.LfoNSVr ӝ怕ApHd;N?oZC0Xx߼
bG\maCЕt)q.Fb6#l/yٛ[	ҬHJO6鞁R14A{{	/[CX&3Xvgv
zdJ'=/f*gpq=PYD@9	&fj[΁tT"Vd}aUF۾[3VpeuSBUU).mO!xZt9>cg{=B X!᮪
58omBJx8sF,*Tv|99nJ)*dIm.LmnV}v'ơRgl%,3%6M!$I"AcTi9I U~p
bhtSåν#9U-{.	ظN:iWzav
3;9H_	wn?I]lme
G>/JGRׂGs}jd{iC2X-ˡhc{ۋ?y݇g	pCg,[}Y~9 *!Ch8S
E3-`JsÛ꿜buݕ/\*bD2%M81IVZXF
z.J3H~9Ѳ*Iwr4QvTްM8ޞ-~|#MF
^(2]쨃i-'?rʽ]&8HǬ.޹͵fca\\}2 [w
 Kޘ;O]<ctWUBr} 6cP,6ĄTA
n&Gaۼ-P#4;mdqa~gfLaF4ׅR|Ķ)J8!WShHpF\zssx{D!
>u	bŰKlPp:H.>l'*&@UXuPCةtU(`ԗoRu+ӓ'ݤt7PTĦrLPYHqcce)^>QJp,pI}%H\nVL9yuM?]50IMApŉÁ
Nx,4տߴYuj䛆N?u!|'ǟOlg<LV
ɗ#g؀]gm8nf]U2~ZbY:&ޱ5%+ꢈs_R,^R0vOr"tIy\b䗔׌0?*Ռ8W#~mv,->,^$P<pH@=>.p3zq!ol/,ܿ:Y[<Bj]hvάS
y?=_   
`«.
 
----
cortex-xdr/config.json
{ "name": "Cortex XDR", "type": "inbound" }

----
cortex-xdr/README.md
# Custom Integration: Cortex XDR

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Cortex XDR requirements

- **API Key ID** and **API Key** required for authentication.
- **Cortex XDR API Base URL** (depends on your region).

## Steps

### Cortex XDR configuration

1. **Obtain your Cortex XDR API credentials**:
   - Log in to **Cortex XDR**.
   - Navigate to **Settings** > **Configurations** > **Integrations** > **API Keys**.
   - Select **+ New Key**.
   - Choose **Standard** as the type of API Key.
   - Note the **API Key** and **API Key ID**.
2. **Find your Cortex XDR API Base URL**:
   - Example: `https://api-{fqdn}.xdr.us.paloaltonetworks.com/public_api/v1/`.

### runZero configuration

1. **(OPTIONAL)** - Modify the script if needed:
    - Adjust API queries to filter endpoint data.
    - Customize attributes stored in runZero.
2. **Create a Credential for the Custom Integration**:
    - Go to [runZero Credentials](https://console.runzero.com/credentials).
    - Select `Custom Integration Script Secrets`.
    - Enter your **Cortex XDR API Key** as `access_secret`.
    - Enter your **Cortex XDR API Key ID** as `access_key`.
3. **Create the Custom Integration**:
    - Go to [runZero Custom Integrations](https://console.runzero.com/custom-integrations/new).
    - Add a **Name and Icon** for the integration (e.g., "cortex-xdr").
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` and then `Save`.
4. **Schedule the Integration Task**:
    - Go to [runZero Ingest](https://console.runzero.com/ingest/custom/).
    - Select the **Credential and Custom Integration** created earlier.
    - Set a schedule for recurring updates.
    - Select the **Explorer** where the script will run.
    - Click **Save** to start the task.

### What's next?

- The task will appear on the [tasks](https://console.runzero.com/tasks) page.
- Assets in runZero will be updated with **endpoint data from Cortex XDR**.
- The script captures details like **agent status, policies, OS version, compliance, and IPs**.
- Search for these assets in runZero using `custom_integration:cortex-xdr`.

### Notes

- The script **retrieves all endpoints** using pagination.
- All attributes from Cortex XDR are stored in `customAttributes`.
- The task **can be scheduled** to sync endpoint data regularly.

----
cortex-xdr/custom-integration-cortex-xdr.star
## Cortex XDR integration

load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_post='post', http_get='get', 'url_encode')
load('uuid', 'new_uuid')

CORTEX_API_URL = "<UPDATE_ME>/public_api/v1/"

def do_cortex_api_call(api_key, api_key_id, api_call, post_data={}):
    """Perform API request to Cortex XDR, handling authentication"""

    headers = {
        "x-xdr-auth-id": str(api_key_id),
        "Authorization": api_key,
        "Content-Type": "application/json"
    }

    response = http_post(CORTEX_API_URL + api_call, headers=headers, body=bytes(json_encode(post_data)))

    if response.status_code != 200:
        print("API call failed:", response.status_code)
        return None

    return json_decode(response.body)

def get_all_cortex_endpoints(api_key, api_key_id):
    """Retrieve all Cortex XDR endpoints using pagination"""
    cortex_filter = {"request_data": {"search_from": 0, "search_to": 100}}
    all_endpoints = []
    page_size = 100

    while True:
        result = do_cortex_api_call(api_key, api_key_id, "endpoints/get_endpoint", cortex_filter)

        if not result or "reply" not in result:
            print("Error retrieving endpoints")
            break

        fetched_endpoints = result["reply"].get("endpoints", [])
        all_endpoints.extend(fetched_endpoints)

        if len(fetched_endpoints) < page_size:
            break  # Stop when fewer than page_size results are returned

        cortex_filter["request_data"]["search_from"] += page_size
        cortex_filter["request_data"]["search_to"] += page_size

    print("Loaded", len(all_endpoints), "endpoints")
    return all_endpoints

def build_assets(api_key, api_key_id):
    """Convert Cortex XDR endpoint data into runZero asset format"""
    all_endpoints = get_all_cortex_endpoints(api_key, api_key_id)
    assets = []

    for endpoint in all_endpoints:
        custom_attrs = {
            "operational_status": endpoint.get("operational_status", ""),
            "agent_status": endpoint.get("endpoint_status", ""),
            "agent_type": endpoint.get("endpoint_type", ""),
            "last_seen": str(int(endpoint.get("last_seen", 0) / 1000)),
            "first_seen": str(int(endpoint.get("first_seen", 0) / 1000)),
            "groups": ";".join(endpoint.get("group_name", [])),
            "assigned_prevention_policy": endpoint.get("assigned_prevention_policy", ""),
            "assigned_extensions_policy": endpoint.get("assigned_extensions_policy", ""),
            "endpoint_version": endpoint.get("endpoint_version", "")
        }

        mac_address = endpoint.get("mac_address", [""])[0] if endpoint.get("mac_address") else ""

        assets.append(
            ImportAsset(
                id=str(endpoint.get("endpoint_id", new_uuid())),
                networkInterfaces=[build_network_interface(endpoint.get("ip", []) + endpoint.get("ipv6", []), mac_address)],
                hostnames=[endpoint.get("endpoint_name", "")],
                os_version=endpoint.get("os_version", ""),
                os=endpoint.get("operating_system", ""),
                customAttributes=custom_attrs
            )
        )
    return assets

def build_network_interface(ips, mac=None):
    """Convert IPs and MAC addresses into a NetworkInterface object"""
    ip4s = []
    ip6s = []

    for ip in ips[:99]:
        if ip:
            ip_addr = ip_address(ip)
            if ip_addr.version == 4:
                ip4s.append(ip_addr)
            elif ip_addr.version == 6:
                ip6s.append(ip_addr)
        else:
            continue

    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def main(**kwargs):
    """Main function to retrieve and return Cortex XDR asset data"""
    api_key = kwargs['access_secret']  # Use API token from runZero credentials
    api_key_id = kwargs['access_key']  # Use API key ID

    assets = build_assets(api_key, api_key_id)
    
    if not assets:
        print("No assets retrieved from Cortex XDR")
        return None

    return assets

----
drata/config.json
{ "name": "Drata", "type": "inbound" }

----
drata/README.md
# Custom Integration: Drata

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Drata requirements

- API Client Token with permissions to access the Drata public API.
- API URL: `https://public-api.drata.com`.

## Steps

### Drata configuration

1. Generate an API Client Token from your Drata account.
   - Refer to the [Drata API Documentation](https://developers.drata.com) for instructions.
   - Ensure the token has permissions to access the `public/assets` endpoint and related metadata.
2. Note down the API URL: `https://public-api.drata.com`.
3. Test your API token by querying the `/public/assets` endpoint using a tool like `curl` or Postman.

### runZero configuration

1. (OPTIONAL) - Make any necessary changes to the script to align with your environment.
    - Modify API calls as needed to filter assets (e.g., by `assetClassType` or `employmentStatus`).
    - Modify datapoints uploaded to runZero as needed.
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - Use the `access_secret` field for your Drata API Client Token.
    - For `access_key`, input a placeholder value like `foo` (unused in this integration).
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "drata").
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` to ensure it has valid syntax.
    - Click `Save` to create the Custom Integration.
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to recur at the desired timeframes.
    - Select the Explorer you'd like the Custom Integration to run from.
    - Click `Save` to kick off the first task.

### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration.
- The task will update the existing assets with the data pulled from the Custom Integration source.
- The task will create new assets for when there are no existing assets that meet merge criteria (hostname, MAC, etc).
- You can search for assets enriched by this custom integration with the runZero search `custom_integration:drata`.

----
drata/custom-integration-drata.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_post='post', http_get='get', 'url_encode')
load('uuid', 'new_uuid')
load('flatten_json', 'flatten')

DRATA_URL = 'https://public-api.drata.com'

def build_assets(assets_json):
    assets_import = []
    for item in assets_json:
        id = item.get('id', new_uuid) 
        hostname = item.get('name', '')
        description = item.get('description', '')
        asset_type = item.get('assetType', '')
        asset_provider = item.get('assetProvider', '')
        employment_status = item.get('employmentStatus', '')
        created_at = item.get('createdAt', '')
        updated_at = item.get('updatedAt', '')
        removed_at = item.get('removedAt', '')

        ips = ['127.0.0.1']
        macs = []
        if macs:
            #for m in macs:
            network = build_network_interface(ips=ips, mac=macs)
        else:
            network = build_network_interface(ips=ips, mac=None)

        device = []
        device = item.get('device', {})
        if device:
            os_version = device.get('osVersion', '')
            serial_number = device.get('serialNumber', '')
            model = device.get('model', '')
            agent_version = device.get('agentVersion', '')
            macs = device.get('macAddress', [])
            encryption_enabled = device.get('encryptionEnabled', '')
            firewall_enabled = device.get('firewallEnabled', '')
            gatekeeper_enabled = device.get('gateKeeperEnabled', '')
            last_checked_at = device.get('lastCheckedAt', '')
            source_type = device.get('sourceType', '')
            created_at = device.get('createdAt', '')
            updated_at = device.get('updatedAt', '')
            deleted_at = device.get('deletedAt', '')
            apps_count = device.get('appsCount', '')
            is_device_compliant = device.get('isDeviceCompliant', '')

            # parse Drata compliance checks; will likely need updated based on your configuration
            compliance_checks = []
            compliance_checks = device.get('complianceChecks', {})
            if compliance_checks:
                for check in compliance_checks:
                    check_type = check.get('type', '')
                    if check_type == 'AGENT_INSTALLED':
                        deviceComplianceCheckAgentInstalledCreatedAt = check.get('createdAt', '')
                        deviceComplianceCheckAgentInstalledExpiresAt = check.get('createdAt', '')
                        deviceComplianceCheckAgentInstalledId = check.get('id', '')
                        deviceComplianceCheckAgentInstalledLastCheckedAt = check.get('lastCheckedAt', '')
                        deviceComplianceCheckAgentInstalledStatus = check.get('status', '')
                        deviceComplianceCheckAgentInstalledType = check.get('type', '')
                        deviceComplianceCheckAgentInstalledUpdatedAt = check.get('updatedAt', '')  
                    elif check_type == 'PASSWORD_MANAGER':
                        deviceComplianceCheckPasswordManagerCreatedAt = check.get('createdAt', '')
                        deviceComplianceCheckPasswordManagerExpiresAt = check.get('createdAt', '')
                        deviceComplianceCheckPasswordManagerId = check.get('id', '')
                        deviceComplianceCheckPasswordManagerLastCheckedAt = check.get('lastCheckedAt', '')
                        deviceComplianceCheckPasswordManagerStatus = check.get('status', '')
                        deviceComplianceCheckPasswordManagerType = check.get('type', '')
                        deviceComplianceCheckPasswordManagerUpdatedAt = check.get('updatedAt', '')                      
                    elif check_type == 'HDD_ENCRYPTION':
                        deviceComplianceCheckDiskEncryptionCreatedAt = check.get('createdAt', '')
                        deviceComplianceCheckDiskEncryptionExpiresAt = check.get('createdAt', '')
                        deviceComplianceCheckDiskEncryptionId = check.get('id', '')
                        deviceComplianceCheckDiskEncryptionLastCheckedAt = check.get('lastCheckedAt', '')
                        deviceComplianceCheckDiskEncryptionStatus = check.get('status', '')
                        deviceComplianceCheckDiskEncryptionType = check.get('type', '')
                        deviceComplianceCheckDiskEncryptionUpdatedAt = check.get('updatedAt', '')  
                    elif check_type == 'ANTIVIRUS':
                        deviceComplianceCheckAntivirusCreatedAt = check.get('createdAt', '')
                        deviceComplianceCheckAntivirusExpiresAt = check.get('createdAt', '')
                        deviceComplianceCheckAntivirusId = check.get('id', '')
                        deviceComplianceCheckAntivirusLastCheckedAt = check.get('lastCheckedAt', '')
                        deviceComplianceCheckAntivirusStatus = check.get('status', '')
                        deviceComplianceCheckAntivirusType = check.get('type', '')
                        deviceComplianceCheckAntivirusUpdatedAt = check.get('updatedAt', '')  
                    elif check_type == 'AUTO_UPDATES':
                        deviceComplianceCheckAutoUpdatesCreatedAt = check.get('createdAt', '')
                        deviceComplianceCheckAutoUpdatesExpiresAt = check.get('createdAt', '')
                        deviceComplianceCheckAutoUpdatesId = check.get('id', '')
                        deviceComplianceCheckAutoUpdatesLastCheckedAt = check.get('lastCheckedAt', '')
                        deviceComplianceCheckAutoUpdatesStatus = check.get('status', '')
                        deviceComplianceCheckAutoUpdatesType = check.get('type', '')
                        deviceComplianceCheckAutoUpdatesUpdatedAt = check.get('updatedAt', '')  
                    elif check_type == 'LOCK_SCREEN':
                        deviceComplianceCheckLockScreenCreatedAt = check.get('createdAt', '')
                        deviceComplianceCheckLockScreenExpiresAt = check.get('createdAt', '')
                        deviceComplianceCheckLockScreenId = check.get('id', '')
                        deviceComplianceCheckLockScreenLastCheckedAt = check.get('lastCheckedAt', '')
                        deviceComplianceCheckLockScreenStatus = check.get('status', '')
                        deviceComplianceCheckLockScreenType = check.get('type', '')
                        deviceComplianceCheckLockScreenUpdatedAt = check.get('updatedAt', '')  
                    else:
                        print('unrecognized compliance check: ' + type)              

        owner = []
        owner = item.get('owner', {})
        if owner:
            owner_id = owner.get('id', '')
            owner_email = owner.get('email', '')
            owner_first_name = owner.get('firstName', '')
            owner_last_name = owner.get('lastName', '')
            owner_terms_agreed = owner.get('drataTermsAgreedAt', '')
            owner_created_at = owner.get('createdAt', '')
            owner_updated_at = owner.get('updatedAt', '')
            owner_roles = owner.get('roles', [])

        assets_import.append(
            ImportAsset(
                id=str(id),
                hostnames=[hostname],
                networkInterfaces=[network],
                os=os_version,    
                customAttributes={
                    "description":description,
                    "assetType":asset_type,
                    "asset_provider":asset_provider,
                    "employmentStatus":employment_status,
                    "createdAt":created_at,
                    "updatedAt":updated_at,
                    "removedAt":removed_at,
                    "device.os":os_version,
                    "device.serialNumber":serial_number,
                    "device.model":model,
                    "device.agentVersion":agent_version,
                    "device.macs":macs,
                    "device.encryptionEnabled":encryption_enabled,
                    "device.firewallEnabled":firewall_enabled,
                    "device.gatekeeperEnabled":gatekeeper_enabled,
                    "device.lastCheckedAat":last_checked_at,
                    "device.sourceType":source_type,
                    "device.createdAt":created_at,
                    "device.updatedAt":updated_at,
                    "device.deletedAt":deleted_at,
                    "device.appsCount":apps_count,
                    "device.isDeviceCompliant":is_device_compliant,
                    "device.complianceCheckAgentInstalledCreatedAt":deviceComplianceCheckAgentInstalledCreatedAt,
                    "device.complianceCheckAgentInstalledExpiresAt":deviceComplianceCheckAgentInstalledExpiresAt,
                    "device.complianceCheckAgentInstalledId":deviceComplianceCheckAgentInstalledId,
                    "device.complianceCheckAgentInstalledLastCheckedAt":deviceComplianceCheckAgentInstalledLastCheckedAt,
                    "device.complianceCheckAgentInstalledStatus":deviceComplianceCheckAgentInstalledStatus,
                    "device.complianceCheckAgentInstalledType":deviceComplianceCheckAgentInstalledType,
                    "device.complianceCheckAgentInstalledUpdatedAt":deviceComplianceCheckAgentInstalledUpdatedAt,
                    "device.complianceCheckPasswordManagerCreatedAt":deviceComplianceCheckPasswordManagerCreatedAt,
                    "device.complianceCheckPasswordManagerExpiresAt":deviceComplianceCheckPasswordManagerExpiresAt,
                    "device.complianceCheckPasswordManagerId":deviceComplianceCheckPasswordManagerId,
                    "device.complianceCheckPasswordManagerLastCheckedAt":deviceComplianceCheckPasswordManagerLastCheckedAt,
                    "device.complianceCheckPasswordManagerStatus":deviceComplianceCheckPasswordManagerStatus,
                    "device.complianceCheckPasswordManagerType":deviceComplianceCheckPasswordManagerType,
                    "device.complianceCheckPasswordManagerUpdatedAt":deviceComplianceCheckPasswordManagerUpdatedAt,
                    "device.complianceCheckDiskEncryptionCreatedAt":deviceComplianceCheckDiskEncryptionCreatedAt,
                    "device.complianceCheckDiskEncryptionExpiresAt":deviceComplianceCheckDiskEncryptionExpiresAt,
                    "device.complianceCheckDiskEncryptionId":deviceComplianceCheckDiskEncryptionId,
                    "device.complianceCheckDiskEncryptionLastCheckedAt":deviceComplianceCheckDiskEncryptionLastCheckedAt,
                    "device.complianceCheckDiskEncryptionStatus":deviceComplianceCheckDiskEncryptionStatus,
                    "device.complianceCheckDiskEncryptionType":deviceComplianceCheckDiskEncryptionType,
                    "device.complianceCheckDiskEncryptionUpdatedAt":deviceComplianceCheckDiskEncryptionUpdatedAt,
                    "device.complianceCheckAntivirusCreatedAt":deviceComplianceCheckAntivirusCreatedAt,
                    "device.complianceCheckAntivirusExpiresAt":deviceComplianceCheckAntivirusExpiresAt,
                    "device.complianceCheckAntivirusId":deviceComplianceCheckAntivirusId,
                    "device.complianceCheckAntivirusLastCheckedAt":deviceComplianceCheckAntivirusLastCheckedAt,
                    "device.complianceCheckAntivirusStatus":deviceComplianceCheckAntivirusStatus,
                    "device.complianceCheckAntivirusType":deviceComplianceCheckAntivirusType,
                    "device.complianceCheckAntivirusUpdatedAt":deviceComplianceCheckAntivirusUpdatedAt,
                    "device.complianceCheckAutoUpdatesCreatedAt":deviceComplianceCheckAutoUpdatesCreatedAt,
                    "device.complianceCheckAutoUpdatesExpiresAt":deviceComplianceCheckAutoUpdatesExpiresAt,
                    "device.complianceCheckAutoUpdatesId":deviceComplianceCheckAutoUpdatesId,
                    "device.complianceCheckAutoUpdatesLastCheckedAt":deviceComplianceCheckAutoUpdatesLastCheckedAt,
                    "device.complianceCheckAutoUpdatesStatus":deviceComplianceCheckAutoUpdatesStatus,
                    "device.complianceCheckAutoUpdatesType":deviceComplianceCheckAutoUpdatesType,
                    "device.complianceCheckAutoUpdatesUpdatedAt":deviceComplianceCheckAutoUpdatesUpdatedAt,
                    "device.complianceCheckLockScreenCreatedAt":deviceComplianceCheckLockScreenCreatedAt,
                    "device.complianceCheckLockScreenExpiresAt":deviceComplianceCheckLockScreenExpiresAt,
                    "device.complianceCheckLockScreenId":deviceComplianceCheckLockScreenId,
                    "device.complianceCheckLockScreenLastCheckedAt":deviceComplianceCheckLockScreenLastCheckedAt,
                    "device.complianceCheckLockScreenStatus":deviceComplianceCheckLockScreenStatus,
                    "device.complianceCheckLockScreenType":deviceComplianceCheckLockScreenType,
                    "device.complianceCheckLockScreenUpdatedAt":deviceComplianceCheckLockScreenUpdatedAt,
                    "owner.id":owner_id,
                    "owner.email":owner_email,
                    "owner.firstName":owner_first_name,
                    "owner.lastName":owner_last_name,
                    "owner.drataTermsAgreedAt":owner_terms_agreed,
                    "owner.createdAt":owner_created_at,
                    "owner.updatedAt":owner_updated_at,
                    "owner.roles":[owner_roles]
                }
            )
        )
    return assets_import

# Build runZero network interfaces; shouldn't need to touch this
def build_network_interface(ips, mac):
    ip4s = []
    ip6s = []
    for ip in ips[:99]:
        ip_addr = ip_address(ip)
        if ip_addr.version == 4:
            ip4s.append(ip_addr)
        elif ip_addr.version == 6:
            ip6s.append(ip_addr)
        else:
            continue
    if not mac:
        return NetworkInterface(ipv4Addresses=ip4s, ipv6Addresses=ip6s)
    
    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def main(**kwargs):
    token = kwargs['access_secret']
        
    # Get assets
    assets = []
    filter = 'assetClassType=HARDWARE&employmentStatus=CURRENT_EMPLOYEE'
    
    page = 1
    page_size = 50
    hasNextPage = True
    
    while hasNextPage:
        url = '{}/{}?{}&page={}&limit={}'.format(DRATA_URL, 'public/assets', filter, page, page_size)
        results = http_get(url, headers={"Content-Type": "application/json", "Authorization": "Bearer " + token})
        if results.status_code != 200:
            print('failed to retrieve assets')
            return None
        
        total = json_decode(results.body)['total']

        if total == 9999999:
            results_json = json_decode(results.body)['data']
            assets.extend(results_json)
            page += 1
        elif total == 0:
            hasNextPage = False
        else:
            print('unexpected value returned for total')
            hasNextPage = False

    assets_import = build_assets(assets)
    if not assets_import:
        print('no assets')

    return assets_import
----
extreme-cloud-iq/config.json
{ "name": "Extreme Networks CloudIQ", "type": "inbound" }
----
extreme-cloud-iq/README.md
# Custom Integration: ExtremeCloud IQ

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## ExtremeCloud IQ requirements

- An account with username and password that has API access enabled.
- The base API URL for ExtremeCloud IQ is: `https://api.extremecloudiq.com`.

## Steps

### ExtremeCloud IQ configuration

1. Ensure your account has permissions to access the `devices` endpoint via the ExtremeCloud IQ API.
   - The account must be able to retrieve devices via `GET /devices`.
2. Verify access by using your credentials in a POST request to `https://api.extremecloudiq.com/login` and receive a bearer token in return.
   - Refer to the [ExtremeCloud IQ API Documentation](https://extremecloudiq.com/api-docs/) if needed.

### runZero configuration

1. (OPTIONAL) - Make any necessary changes to the script to align with your environment.
    - You may modify the script to filter inventory by site, device type, or other parameters.
    - All discovered assets will be enriched with additional metadata using `customAttributes`.
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - Use the `access_key` field for your ExtremeCloud IQ username.
    - Use the `access_secret` field for your ExtremeCloud IQ password.
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "ExtremeCloudIQ").
    - Toggle `Enable custom integration script` and paste in the finalized script.
    - Click `Validate` to ensure the script syntax is correct.
    - Click `Save` to create the Custom Integration.
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to run on your desired frequency.
    - Select a hosted Explorer that can execute the integration.
    - Click `Save` to schedule and start the task.

### What's next?

- The integration task will appear on the [Tasks page](https://console.runzero.com/tasks) and begin execution.
- The task will update existing assets in your runZero inventory or create new assets based on the data retrieved from ExtremeCloud IQ.
- You can search for enriched assets using the query: `custom_integration:ExtremeCloudIQ`.

----
extreme-cloud-iq/custom-integrations-extreme-cloud-iq.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('requests', 'Session')
load('json', json_encode='encode', json_decode='decode')
load('uuid', 'new_uuid')
load('flatten_json', 'flatten')
load('net', 'ip_address')

SKIP_UNMANAGED = False

def asset_networks(ips, mac):
    ip4s = []
    ip6s = []
    for ip in ips[:99]:
        ip_obj = ip_address(ip)
        if ip_obj.version == 4:
            ip4s.append(ip_obj)
        elif ip_obj.version == 6:
            ip6s.append(ip_obj)
    if not mac:
        return NetworkInterface(ipv4Addresses=ip4s, ipv6Addresses=ip6s)
    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def main(*args, **kwargs):
    username = kwargs.get('access_key')
    password = kwargs.get('access_secret')

    session = Session()
    session.headers.set('Content-Type', 'application/json')
    session.headers.set('Accept', 'application/json')

    login_payload = {
        "username": username,
        "password": password
    }
    login_resp = session.post("https://api.extremecloudiq.com/login", body=bytes(json_encode(login_payload)))
    print("Login response code:", login_resp.status_code)
    login_body = json_decode(login_resp.body)
    print("Login response body:", login_body.keys())

    if not login_resp or login_resp.status_code != 200:
        return []

    token = login_body.get("access_token")
    if not token:
        print("Access token not found in response.")
        return []

    session.headers.set("Authorization", "Bearer {}".format(token))

    assets = []
    page = 1
    limit = 100

    while True:
        url = "https://api.extremecloudiq.com/devices?page={}&limit={}&view=full".format(page, limit)
        print("Fetching page:", page)
        resp = session.get(url)
        print("Page response code:", resp.status_code)
        devices_body = json_decode(resp.body)

        if not resp or resp.status_code != 200:
            break

        devices = devices_body.get("data", [])
        if not devices:
            print("No devices on page", page)
            break

        for device in devices:

            if device.get("device_admin_state", "") != "MANAGED" and SKIP_UNMANAGED:
                print("Skipping unmanaged device.")
                continue

            ips = []
            if "ip_address" in device and device["ip_address"]:
                ips.append(device["ip_address"])
            if "ipv6_address" in device and device["ipv6_address"]:
                ips.append(device["ipv6_address"])

            mac = device.get("mac_address", "")

            asset = ImportAsset(
                id=device.get("id") or new_uuid(),
                hostnames=[device.get("hostname", "")],
                networkInterfaces=[asset_networks(ips, mac)],
                device_type=device.get("device_function", ""),
                customAttributes={}
            )

            for key in device.keys():
                if key not in ["id", "hostname", "mac_address", "ip_address", "ipv6_address"]:
                    val = device[key]
                    if type(val) == "dict":
                        asset.customAttributes.update(flatten(val))
                    elif type(val) in ["string", "int", "bool"]:
                        asset.customAttributes[key] = str(val)

            assets.append(asset)

        if len(devices) < limit:
            break
        page += 1

    print("Total assets imported:", len(assets))
    return assets

----
vulnerability-workflow/config.json
{ "name": "runZero Vunerability Workflow", "type": "outbound" }

----
vulnerability-workflow/README.md
# Custom Integration: Vulnerability Ticketing Workflow

## Overview

This custom integration fetches high-risk vulnerabilities from runZero, opens a case for each new CVE-Asset pair by sending a POST to an external system (like a ticketing or workflow platform), and tags the asset in runZero to track ticket creation.

The workflow ensures each CVE on an asset is only ticketed once, using a tag like `CVE-2024-1234=OPENED`.

## Prerequisites

- **runZero**:
  - Superuser access to [Custom Integrations](https://console.runzero.com/custom-integrations).
  - API token (`access_secret`) to access vulnerability exports and update asset tags.
  
- **External Ticketing System**:
  - An HTTP endpoint to receive ticket payloads (e.g., a Sumo Logic HTTP collector or custom webhook server).

## Configuration

### Script Variables

| Variable | Description |
|:---------|:------------|
| `WORKFLOW_ENDPOINT` | URL where the POST request should send new CVE-asset tickets (e.g., Sumo Logic HTTP source URL). |
| `VULNERABILITY_SEARCH` | runZero search string for vulnerabilities to act on (e.g., `risk:critical`). |

**Update** the `WORKFLOW_ENDPOINT` value inside the script before deploying.

## How the Script Works

1. **Fetch Vulnerabilities**  
   Queries the runZero API for vulnerabilities matching the `VULNERABILITY_SEARCH` filter.

2. **Aggregate Vulnerabilities**  
   Deduplicates by `asset_id:cve` to ensure only one ticket per asset per CVE.

3. **Post Ticket Payload**  
   Sends a JSON payload describing the asset and vulnerability to the configured `WORKFLOW_ENDPOINT`.

4. **Tag Asset**  
   Updates the asset in runZero by tagging it with the CVE ID (e.g., `CVE-2024-1234=OPENED`).

5. **Skip if Already Ticketed**  
   Assets already tagged with the CVE are skipped to avoid duplicate tickets.

## Payload Example

When a new CVE-asset match is detected, the integration sends a POST with the following JSON payload:

```json
{
  "asset_id": "UUID of asset",
  "cve": "CVE-2024-1234",
  "tags": {"existing_tag": "value"},
  "vulnerability_name": "Description of the CVE",
  "vulnerability_exploitable": true,
  "os_vendor": "Vendor Name",
  "os_product": "OS Product Name",
  "addresses": ["192.168.1.10"],
  "names": ["hostname.local"],
  "macs": ["00:11:22:33:44:55"]
}
```

## Deployment Steps

1. **Create a Credential in runZero**:
   - Go to [Credentials](https://console.runzero.com/credentials).
   - Create a **Custom Integration Script Secrets** credential.
   - Store your runZero API token in the `access_secret` field.

2. **Create the Custom Integration**:
   - Go to [Custom Integrations](https://console.runzero.com/custom-integrations/new).
   - Name the integration (e.g., `vuln-ticketing-workflow`).
   - Paste this script.
   - Click **Validate** and **Save**.

3. **Schedule the Integration**:
   - Go to [Ingest](https://console.runzero.com/ingest/custom/).
   - Create a new task linked to this custom integration.
   - Select the credential you created.
   - Set a schedule (e.g., run hourly or daily).

## Notes

- Ensure your external workflow system can ingest JSON POST requests.
- This script expects that runZero asset tags are used consistently and that no other system overwrites them.
- If you want to handle closing/removing tickets when vulnerabilities are remediated, you will need additional logic.
----
vulnerability-workflow/custom-integration-vulnerability-workflow.star
load("http", http_get="get", http_post="post", http_patch="patch")
load("json", json_encode="encode", json_decode="decode")

WORKFLOW_ENDPOINT = "<UPDATE_ME>"
VULNERABILITY_SEARCH = "risk:critical"

def main(**kwargs):
    runzero_token = kwargs["access_secret"]

    # Step 1: Fetch vulnerabilities
    response = http_get(
        "https://console.runzero.com/api/v1.0/export/org/vulnerabilities.json?search={}".format(VULNERABILITY_SEARCH),
        headers={"Authorization": "Bearer {}".format(runzero_token)},
        timeout=3600
    )

    if response.status_code != 200:
        print("Failed to fetch vulnerabilities")
        return

    vulns = json_decode(response.body)

    # Step 2: Aggregate vulnerabilities
    seen = {}
    for v in vulns:
        cve = v.get("vulnerability_cve", None)
        asset_id = v.get("vulnerability_asset_id", None)
        if cve and asset_id:
            key = "{}:{}".format(asset_id, cve)
            if key not in seen:
                seen[key] = v

    # Step 3 and 4: POST and tag
    for key, vuln in seen.items():
        
        # Get attributes for the payload 
        asset_id = vuln.get("vulnerability_asset_id", None)
        cve = vuln.get("vulnerability_cve", None)
        tags = vuln.get("tags", {})
        vuln_name = vuln.get("vulnerability_name", "")
        vulnerability_exploitable = vuln.get("vulnerability_exploitable", "")
        os_vendor = vuln.get("os_vendor", "")
        os_product = vuln.get("os_product", "")
        addresses = vuln.get("addresses", [])
        names = vuln.get("names", [])
        macs = vuln.get("macs", [])

        # Verify the asset doesn't already have an open case for the CVE
        if cve and asset_id and cve not in tags.keys():
            payload = {
                "asset_id": asset_id,
                "cve": cve,
                "tags": tags,
                "vulnerability_name": vuln_name,
                "vulnerability_exploitable": vulnerability_exploitable,
                "os_vendor": os_vendor,
                "os_product": os_product,
                "addresses": addresses,
                "names": names,
                "macs": macs
            }

            http_post(
                WORKFLOW_ENDPOINT, 
                headers={"Content-Type": "application/json"}, 
                body=bytes(json_encode(payload))
            )

            tag_url = "https://console.runzero.com/api/v1.0/org/assets/{}/tags".format(asset_id)
            http_patch(
                tag_url,
                headers={"Content-Type": "application/json", "Authorization": "Bearer {}".format(runzero_token)},
                body=bytes(json_encode({"tags": "{}=OPENED".format(cve)})),
            )

        else:
            print("Already has an open case for {}".format(cve))
            continue
            
            

----
jamf/config.json
{ "name": "JAMF", "type": "inbound" }

----
jamf/README.md
# Custom Integration: JAMF

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## JAMF requirements

- API Client ID and API Client Secret with appropriate permissions.
- JAMF API URL: `https://<your-jamf-instance>.jamfcloud.com`.

## Steps

### JAMF configuration

1. Generate an API Client ID and API Client Secret in your JAMF instance.
   - Refer to the [JAMF API Documentation](https://developer.jamf.com/) for guidance.
   - Ensure the credentials have permissions to access the `computers-inventory` and `computers-inventory-detail` endpoints.
2. Note down your JAMF API URL (e.g., `https://<your-jamf-instance>.jamfcloud.com`).
3. Test your API credentials by retrieving a bearer token using the `oauth/token` endpoint.

### runZero configuration

1. (OPTIONAL) - Make any necessary changes to the script to align with your environment.
    - Modify API calls as needed to filter inventory data.
      - NOTE: `START_DATE` will limit the data fetch to assets seen since the date you input.
    - Modify datapoints uploaded to runZero as needed.
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - Use the `access_key` field for your JAMF API Client ID.
    - Use the `access_secret` field for your JAMF API Client Secret.
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "JAMF").
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` to ensure it has valid syntax.
    - Click `Save` to create the Custom Integration.
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to recur at the desired timeframes.
    - Select the Explorer you'd like the Custom Integration to run from.
    - Click `Save` to kick off the first task.

### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration.
- The task will update the existing assets with the data pulled from the Custom Integration source.
- The task will create new assets for when there are no existing assets that meet merge criteria (hostname, MAC, etc).
- You can search for assets enriched by this custom integration with the runZero search `custom_integration:JAMF`.

----
jamf/custom-integration-jamf.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_post='post', http_get='get', 'url_encode')
load('time', 'now', 'parse_duration')
load('flatten_json', 'flatten')

JAMF_URL = 'https://<UPDATE_ME>.jamfcloud.com'
DAYS_AGO = 60  # Adjust as needed
duration_str = "-{}h".format(DAYS_AGO * 24)  # Go duration format, e.g. "-720h" for 30 days
ago_duration = parse_duration(duration_str)
start_time = now() + ago_duration  # Subtracting the duration
START_DATE = str(start_time)[:10]  # "YYYY-MM-DD"
MAX_REQUESTS = 100
COMPUTER_ASSETS = True
MOBILE_ASSETS = True
DEV_MODE = False

def sanitize_string(s):
    if s:
        return s.replace(" ", "_").replace(".", "").replace("+", "").replace("(", "").replace(")", "").lower()
    else:
        return None

def get_bearer_token(client_id, client_secret):
    headers = {'Content-Type': 'application/x-www-form-urlencoded', 'accept': 'application/json'}
    params = {'client_id': client_id, 'client_secret': client_secret, 'grant_type': 'client_credentials'}
    url = "{}/api/oauth/token".format(JAMF_URL)
    resp = http_post(url, headers=headers, body=bytes(url_encode(params)))

    if resp.status_code != 200:
        print("Failed to retrieve bearer token. Status code:", resp.status_code)
        return None, 0

    body_json = json_decode(resp.body)
    if not body_json:
        print("Invalid JSON response for bearer token")
        return None, 0

    token = body_json['access_token']
    return token, 0

def get_valid_token(token, request_count, client_id, client_secret):
    if token and request_count < MAX_REQUESTS:
        return token, request_count + 1
    else:
        print("Fetching new token after", request_count, "requests")
        return get_bearer_token(client_id, client_secret)

def http_request(method, url, headers=None, params=None, body=None, token=None, request_count=None, client_id=None, client_secret=None):
    token, request_count = get_valid_token(token, request_count, client_id, client_secret)
    if not token:
        return None, token, request_count

    headers = headers or {}
    params = params or {}
    headers["Authorization"] = "Bearer {}".format(token)

    if method == "GET":
        response = http_get(url=url, headers=headers, params=params)
    elif method == "POST":
        response = http_post(url=url, headers=headers, body=body)
    else:
        print("Unsupported HTTP method:", method)
        return None, token, request_count

    print("API Response Status:", response.status_code)

    if response.status_code == 403:
        print("403 Forbidden. Fetching new token and retrying...")
        token, request_count = get_bearer_token(client_id, client_secret)
        if not token:
            return None, token, request_count
        headers["Authorization"] = "Bearer {}".format(token)
        if method == "GET":
            response = http_get(url=url, headers=headers, params=params, timeout=300)
        elif method == "POST":
            response = http_post(url=url, headers=headers, body=body)

    return response, token, request_count

def get_jamf_inventory(token, request_count, client_id, client_secret):
    hasNextPage = True
    page = 0
    page_size = 100
    endpoints = []
    # hardcoded filter for the time being until we support datetime
    url = JAMF_URL + '/api/v1/computers-inventory'

    while hasNextPage:
        params = {"page": page, "page-size": page_size, "filter": 'general.lastContactTime=ge="{}T00:00:00Z"'.format(START_DATE)}
        resp, token, request_count = http_request("GET", url, params=params, token=token, request_count=request_count, client_id=client_id, client_secret=client_secret)
        if not resp or resp.status_code != 200:
            print("Failed to retrieve inventory. Status code:", getattr(resp, 'status_code', 'None'))
            return endpoints, token, request_count

        inventory = json_decode(resp.body)
        if not inventory:
            print("Invalid or empty JSON response for inventory:", resp.body)
            return endpoints, token, request_count

        results = inventory.get('results', [])

        if not results:
            hasNextPage = False
            continue

        endpoints.extend(results)
        page += 1

    return endpoints, token, request_count

def get_jamf_details(token, request_count, client_id, client_secret, inventory):
    endpoints_final = []
    for item in inventory:
        uid = item.get('id')
        if not uid:
            print("ID not found in inventory item:", item)
            continue

        url = "{}/api/v1/computers-inventory-detail/{}".format(JAMF_URL, uid)
        resp, token, request_count = http_request("GET", url, token=token, request_count=request_count, client_id=client_id, client_secret=client_secret)
        if not resp or resp.status_code != 200:
            print("Failed to retrieve details for ID:", uid, "Status code:", getattr(resp, 'status_code', 'None'))
            continue

        extra = json_decode(resp.body)
        if DEV_MODE:
            build_asset(extra)
        if not extra:
            print("Invalid JSON for detail:", resp.body)
            continue

        item.update(extra)
        endpoints_final.append(item)

    return endpoints_final, token, request_count

def get_mobile_device_inventory(token, request_count, client_id, client_secret):
    hasNextPage = True
    page = 0
    page_size = 100
    mobile_devices = []
    # hardcoded filter for the time being until we support datetime
    url = JAMF_URL + "/api/v2/mobile-devices/detail"

    while hasNextPage:
        params = {"page": page, "page-size": page_size, "section": "GENERAL", "filter": 'lastInventoryUpdateDate=ge="{}T00:00:00Z"'.format(START_DATE)}
        resp, token, request_count = http_request("GET", url, params=params, token=token, request_count=request_count, client_id=client_id, client_secret=client_secret)
        if not resp or resp.status_code != 200:
            print("Failed to retrieve mobile device inventory. Status code:", getattr(resp, 'status_code', 'None'))
            return mobile_devices, token, request_count

        inventory = json_decode(resp.body)
        if not inventory:
            print("Invalid or empty JSON response for mobile inventory:", resp.body)
            return mobile_devices, token, request_count

        results = inventory.get('results', [])

        if not results:
            hasNextPage = False
            continue

        mobile_devices.extend(results)
        page += 1

    return mobile_devices, token, request_count

def get_mobile_device_details(token, request_count, client_id, client_secret, inventory):
    mobile_devices_final = []
    for item in inventory:
        uid = item.get('mobileDeviceId')
        if not uid:
            print("ID not found in mobile device item:", item)
            continue

        url = "{}/api/v2/mobile-devices/{}/detail".format(JAMF_URL, uid)
        resp, token, request_count = http_request("GET", url, token=token, request_count=request_count, client_id=client_id, client_secret=client_secret)
        if not resp or resp.status_code != 200:
            print("Failed to retrieve details for mobile device ID:", uid, "Status code:", getattr(resp, 'status_code', 'None'))
            continue

        extra = json_decode(resp.body)
        if DEV_MODE:
            build_mobile_asset(extra)
        if not extra:
            print("Invalid JSON for mobile detail:", resp.body)
            continue

        item.update(extra)
        mobile_devices_final.append(item)

    return mobile_devices_final, token, request_count

def is_private_ip(ip):
    return (
        ip.startswith("10.") or
        ip.startswith("192.168.") or
        ip.startswith("172.16.") or
        ip.startswith("172.17.") or
        ip.startswith("172.18.") or
        ip.startswith("172.19.") or
        ip.startswith("172.20.") or
        ip.startswith("172.21.") or
        ip.startswith("172.22.") or
        ip.startswith("172.23.") or
        ip.startswith("172.24.") or
        ip.startswith("172.25.") or
        ip.startswith("172.26.") or
        ip.startswith("172.27.") or
        ip.startswith("172.28.") or
        ip.startswith("172.29.") or
        ip.startswith("172.30.") or
        ip.startswith("172.31.")
    )

def asset_ips(item):
    general = item.get("general") or {}
    ips = []
    for key in ["lastIpAddress", "ipAddress", "lastReportedIp"]:
        ip = general.get(key)
        # only add Private IPs to the inventory 
        # remote assets put a lot of junk in the inventory with ISP public IP addresses
        if ip and is_private_ip(ip):
            ips.append(ip)
    return ips

def asset_networks(ips, mac):
    ip4s = []
    ip6s = []
    for ip in ips[:99]:
        ip_addr = ip_address(ip)
        if ip_addr.version == 4:
            ip4s.append(ip_addr)
        elif ip_addr.version == 6:
            ip6s.append(ip_addr)
    if not mac:
        return NetworkInterface(ipv4Addresses=ip4s, ipv6Addresses=ip6s)
    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def asset_os_hardware(item):
    operating_system = item.get("operatingSystem") or {}
    hardware = item.get("hardware") or {}
    general = item.get("general") or {}

    os_name = operating_system.get("name", "") if operating_system else "iOS"
    os_version = operating_system.get("version", "") or general.get("osVersion", "")
    model = hardware.get("model", "") or item.get("model", "")
    manufacturer = hardware.get("make", "") or "Apple"
    macs = [mac for mac in [hardware.get("macAddress", ""), hardware.get("altMacAddress", ""), item.get("wifiMacAddress", "")] if mac]
    serial_number = hardware.get("serialNumber", "")

    return {
        'os_name': os_name,
        'os_version': os_version,
        'model': model,
        'manufacturer': manufacturer,
        'macs': macs,
        'serial_number': serial_number
    }

def build_asset(item):
    if not item:
        return

    asset_id = item.get("udid") or item.get("mobileDeviceId")
    if not asset_id:
        print("Asset ID not found:", item)
        return

    general = item.get("general") or {}
    name = general.get("displayName", "")

    os_hardware = asset_os_hardware(item) or {}
    ips = asset_ips(item)
    networks = [asset_networks(ips, mac) for mac in os_hardware.get("macs", []) if mac]

    security = item.get("security") or {}
    disk = item.get("diskEncryption") or {}
    boot = disk.get("bootPartitionEncryptionDetails") or {}
    user = item.get("userAndLocation") or {}
    

    # add flattened version of certain attributes
    custom_attributes = {}
    # add extension attributes
    main_ext_attrs = item.get("extensionAttributes", [])
    if len(main_ext_attrs) > 0:
        for ext in main_ext_attrs:
            ext_name = sanitize_string(ext.get("name", None))
            ext_values = ext.get("values", None) or ext.get("value", None)
            if ext_name and ext_values:
                key_name = "ext_attr_" + ext_name
                custom_attributes[key_name] = ",".join(ext_values)
    # add user extension attributes
    user_ext_attrs = item.get("userAndLocation", {}).get("extensionAttributes", [])
    if len(user_ext_attrs) > 0:
        for ext in user_ext_attrs:
            user_ext_name = sanitize_string(ext.get("name", None))
            user_ext_values = ext.get("values", None) or ext.get("value", None)
            if user_ext_name and user_ext_values:
                key_name = "ext_attr_" + user_ext_name
                custom_attributes[key_name] = ",".join(user_ext_values)

    for key in item.keys():
        if key not in ["purchasing", "storage", "packageReceipts", "contentCaching", "extensionAttributes", "userAndLocation"]:
            if type(item[key]) == "dict":
                custom_attributes.update(flatten(item[key]))
            elif type(item[key]) == "string":
                custom_attributes[key] = item[key]
            elif type(item[key]) == "list":
                # skip lists unless we have more context on them like extensionAttributes
                continue

    return ImportAsset(
        id=asset_id,
        networkInterfaces=networks,
        os=os_hardware.get('os_name', ''),
        osVersion=os_hardware.get('os_version', ''),
        manufacturer=os_hardware.get('manufacturer', ''),
        model=os_hardware.get('model', ''),
        hostnames=[name],
        customAttributes=custom_attributes,
    )

def build_assets(inventory):
    assets = []
    print("Total inventory items:", len(inventory))
    for item in inventory:
        asset = build_asset(item)
        if asset:
            assets.append(asset)
    return assets

def build_mobile_asset(item):
    if not item:
        return None
    mobile_asset_id = item.get("udid") or item.get("mobileDeviceId")
    if not mobile_asset_id:
        print("Mobile asset ID not found:", item)
        return None

    general = item.get("general") or {}
    name = item.get("name", "")
    os_hardware = asset_os_hardware(item)
    ips = asset_ips(item)
    networks = [asset_networks(ips, mac) for mac in os_hardware.get("macs", []) if mac]

    # add flattened version of certain attributes
    custom_attributes = {}
    for key in item.keys():
        if key == "extensionAttributes":
            for ext in item["extensionAttributes"]:
                ext_name = ext.get("name", None).replace(" ", "_").lower()
                ext_values = ext.get("values", None) or ext.get("value", None)
                if ext_name and ext_values:
                    key_name = "ext_attr_" + ext_name
                    custom_attributes[key_name] = ",".join(ext_values)
        elif key not in ["applications", "certificates", "purchasing", "serviceSubscription", "ebooks", "fonts", ]:
            if type(item[key]) == "dict":
                custom_attributes.update(flatten(item[key]))
            elif type(item[key]) == "string" or type(item[key]) == "bool":
                custom_attributes[key] = str(item[key])
            elif type(item[key]) == "list":
                # skip lists unless we have more context on them like extensionAttributes
                continue
        else:
            continue

    return ImportAsset(
        id=mobile_asset_id,
        networkInterfaces=networks,
        hostnames=[name.replace(" ", "-")],
        os=os_hardware.get('os_name', ''),
        osVersion=os_hardware.get('os_version', ''),
        manufacturer=os_hardware.get('manufacturer', ''),
        model=os_hardware.get('model', ''),
        customAttributes=custom_attributes
    )

def build_mobile_assets(inventory):
    assets = []
    print("Total mobile device inventory:", len(inventory))
    for item in inventory:
        asset = build_mobile_asset(item)
        if asset:
            assets.append(asset)
    return assets

def main(*args, **kwargs):
    client_id = kwargs['access_key']
    client_secret = kwargs['access_secret']

    token, request_count = get_bearer_token(client_id, client_secret)
    if not token:
        print("Failed to get bearer token")
        return None

    # Build assets
    assets = []
    if COMPUTER_ASSETS:
        # Fetch and process computer inventory
        inventory, token, request_count = get_jamf_inventory(token, request_count, client_id, client_secret)
        if not inventory:
            print("No inventory data found for computers")
        
        details, token, request_count = get_jamf_details(token, request_count, client_id, client_secret, inventory)
        if not details:
            print("No details retrieved for computers")
        computer_assets = build_assets(details)
        assets.extend(computer_assets)
    if MOBILE_ASSETS:
        # Fetch and process mobile device inventory
        mobile_inventory, token, request_count = get_mobile_device_inventory(token, request_count, client_id, client_secret)
        if not mobile_inventory:
            print("No inventory data found for mobile devices")

        mobile_details, token, request_count = get_mobile_device_details(token, request_count, client_id, client_secret, mobile_inventory)
        if not mobile_details:
            print("No details retrieved for mobile devices")
        mobile_assets = build_mobile_assets(mobile_details)
        assets.extend(mobile_assets)
    return assets

----
stairwell/custom-integration-stairwell.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_post='post', http_get='get', 'url_encode')
load('uuid', 'new_uuid')

STAIRWELL_API_URL = 'https://app.stairwell.com'

def get_assets(env, token):
    hasNextPage = True
    page_size = 5
    assets_all = []

    url = STAIRWELL_API_URL + "/v1/environments/" + env + "/assets"
    headers = {'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token}
    params = {'limit': page_size}

    while hasNextPage:
        response = http_get(url, headers=headers, params=params)
        if response.status_code != 200:
            print('failed to retrieve assets', response.status_code)
            return None

        assets = json_decode(response.body)

        for a in assets.get('assets', ''):
            assets_all.append(a)

        next_token = assets.get('nextPageToken', '')
        if next_token:
            params = {'next_page_token': next_token, 'limit': page_size}
        else:
            hasNextPage = False

    return assets_all

def build_assets(assets_json):
    imported_assets = []
    for item in assets_json:

        # parse ip address
        ips = []
        ip = item.get('ipAddress', '')

        # check for no ip address
        if not ip:
            ip = '127.0.0.1'

        # strip interface from ipv6 address
        if '%' in ip:
            ip = ip.split('%')[0]

        ips.append(ip)

        # parse mac address
        macs = []
        mac = item.get('macAddress', '')

        if not mac or mac == '-':
            continue
        else:
            macs.append(mac)

        # create network interfaces
        networks = []
        if macs:
            for m in macs:
                network = build_network_interface(ips=ips, mac=m)
                networks.append(network)
        else:
            network = build_network_interface(ips=ips, mac=None)
            networks.append(network)

        # parse operating system
        os_raw = item.get('os', '')
        os_version_raw = item.get('osVersion', '')

        if 'macOS' in os_raw:
            os = 'macOS ' + os_version_raw
        elif 'Ubuntu' in os_raw:
            os = 'Ubuntu ' + os_version_raw
        elif 'Linux' in os_raw:
            os = 'Linux'
        else:
            os = os_raw

        # still need to sort out tag parsing and add logic to convert lastCheckinTime to epoch format

        imported_assets.append(
            ImportAsset(
                id=str(item.get('name', '').split('/')[1]),
                hostnames=[item.get('label', '')],
                networkInterfaces=networks,
                os=os,
                osVersion = item.get('osVersion', ''),
                customAttributes={
                    'createTime':item.get('createTime', ''),
                    'lastCheckinTime':item.get('lastCheckinTime', ''),
                    'environment':item.get('environment', ''),
                    'forwarderVersion':item.get('forwarderVersion', ''),
                    'uploadToken':item.get('uploadToken', ''),
                    'backscanState':item.get('backscanState', ''),
                    'os.raw':os_raw,
                    'state':item.get('state', '')
                }
            )
        )
    return imported_assets

# build runZero network interfaces; shouldn't need to touch this
def build_network_interface(ips, mac):
    ip4s = []
    ip6s = []
    for ip in ips[:99]:
        ip_addr = ip_address(ip)
        if ip_addr.version == 4:
            ip4s.append(ip_addr)
        elif ip_addr.version == 6:
            ip6s.append(ip_addr)
        else:
            continue
    if not mac:
        return NetworkInterface(ipv4Addresses=ip4s, ipv6Addresses=ip6s)
    
    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def main(**kwargs):
    # kwargs!!
    env = kwargs['access_key']
    token = kwargs['access_secret']
    
    # get assets
    assets = get_assets(env, token)
    if not assets:
        print('failed to retrieve assets')
        return None

    # build asset import
    imported_assets = build_assets(assets)
    
    return imported_assets
----
stairwell/config.json
{ "name": "Stairwell", "type": "inbound" }
----
stairwell/README.md
# Custom Integration: Stairwell

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Stairwell requirements

- API client ID and secret with appropriate permissions.
- Stairwell API URL (e.g. `https://app.stairwell.com`).

## Steps

### Stairwell configuration

1. Generate an API client ID and secret for Stairwell.
   - Refer to the [Stairwell API Documentation](https://docs.stairwell.com/reference/) for instructions.
2. Note down the API URL: `https://app.stairwell.com`.

### runZero configuration

1. (OPTIONAL) - Make any necessary changes to the script to align with your environment.
    - Modify API calls as needed to filter inventory data.
    - Modify datapoints uploaded to runZero as needed.
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - For the `access_key`, input your Stairwell client ID.
    - For the `access_secret`, input your Stairwell client secret.
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "Stairwell").
    - Upload an image file for the Stairwell icon.
        - Download [Stairwell logos and icons](https://www.Stairwell.com/wp-content/uploads/2024/10/Stairwell-Logos-and-Favicons.zip)
        - Resize selected icon to be 256px by 256px
        - Upload resized icon file
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` to ensure it has valid syntax.
    - Click `Save` to create the Custom Integration.
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to recur at the desired timeframes.
    - Select the Explorer you'd like the Custom Integration to run from.
    - Click `Save` to kick off the first task.

### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration.
- The task will update the existing assets with the data pulled from the Custom Integration source.
- The task will create new assets for when there are no existing assets that meet merge criteria (hostname, MAC, etc).
- You can search for assets enriched by this custom integration with the runZero search `custom_integration:Stairwell`.

----
manage-engine-endpoint-central/custom-integration-endpoint-central.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_get='get')
load('uuid', 'new_uuid')

EC_HOST         = '<UPDATE_ME>'
API_VERSION     = '1.4'
SCAN_ENDPOINT   = '/api/' + API_VERSION + '/inventory/scancomputers'
PAGE_LIMIT      = 1000

def build_network_interfaces(device):
    ip_field = device.get('ip_address') or ''
    mac       = device.get('mac_address')
    # support comma-separated IPs if ever present
    ips = [p.strip() for p in ip_field.split(',') if p.strip()]
    ipv4s = []
    ipv6s = []
    for ip in ips:
        addr = ip_address(ip)
        if addr:
            if addr.version == 4:
                ipv4s.append(addr)
            else:
                ipv6s.append(addr)
    return [ NetworkInterface(macAddress=mac,
                              ipv4Addresses=ipv4s,
                              ipv6Addresses=ipv6s) ]

def build_assets(devices):
    assets = []
    for d in devices:
        asset_id = str(d.get('resource_id', d.get('id', new_uuid())))
        hostname = d.get('resource_name') or d.get('resource_name', '') or ''
        # build networkInterfaces
        net_ifaces = build_network_interfaces(d)

        # everything else goes into customAttributes (truncate to 1023 chars)
        custom = {}
        for k, v in d.items():
            if k in ('resource_id','id','resource_name','ip_address','mac_address'):
                continue
            custom[k] = str(v)[:1023]

        assets.append(
            ImportAsset(
                id=asset_id,
                hostnames=[hostname] if hostname else [],
                networkInterfaces=net_ifaces,
                customAttributes=custom,
            )
        )
    return assets

def main(**kwargs):
    # access_secret is your auth_token
    token = kwargs['access_secret']
    headers = {
        'Authorization': token,
        'Accept':        'application/json',
    }

    page        = 1
    all_devices = []
    while True:
        url = 'https://' + EC_HOST + SCAN_ENDPOINT
        params = {"pagelimit": PAGE_LIMIT, "page": page}
        resp = http_get(url, headers=headers, params=params, timeout=3600)
        if resp.status_code != 200:
            print('Scan API error:', resp.status_code, resp.body)
            return None

        body    = json_decode(resp.body)
        msg     = body.get('message_response', {})
        devices = msg.get('scancomputers', [])
        if not devices:
            break

        all_devices.extend(devices)
        if len(devices) < PAGE_LIMIT:
            break
        page += 1

    if not all_devices:
        print('No devices returned')
        return None

    return build_assets(all_devices)
----
manage-engine-endpoint-central/config.json
{ "name": "Manage Engine Endpoint Central", "type": "inbound" }

----
manage-engine-endpoint-central/README.md
# Custom Integration: Endpoint Central

## runZero Requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Endpoint Central Requirements

- Valid Endpoint Central URL (`EC_HOST`) for your account.
- API Version (e.g., `1.4`, default is 1.4).
- Endpoint Central API token (`access_secret`) with permissions to access inventory data.

## Steps

### Endpoint Central Configuration

1. Set up your Endpoint Central API:
   - Obtain your API token from the Endpoint Central admin console.
   - Confirm your Endpoint Central URL (e.g., `https://your-endpoint-central.com`).
   - Ensure the API version is set correctly (default is `1.4`).

2. Test your credentials:
   - Use a tool like Postman or curl to confirm you can reach the Endpoint Central API.
   - Example request:
     ```bash
     curl -X GET "https://your-endpoint-central.com/api/1.4/inventory/scancomputers?format=json&pagelimit=1&page=1" \
     -H "Authorization: Bearer <your_auth_token>" \
     -H "Accept: application/json"
     ```
   - You should receive a 200 response with a list of devices if your credentials are correct.

### runZero Configuration

1. (OPTIONAL) - Make any necessary changes to the script to align with your environment.
    - Modify API calls as needed to filter device data.
    - Adjust the custom attributes as needed for your specific use case.

2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - Use the `access_key` field for your Endpoint Central URL.
    - Use the `access_secret` field for your API token.

3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "endpoint-central").
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` to ensure it has valid syntax.
    - Click `Save` to create the Custom Integration.

4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to recur at the desired timeframes.
    - Select the Explorer you'd like the Custom Integration to run from.
    - Click `Save` to kick off the first task.

### What's Next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration.
- The task will update existing assets with data pulled from the custom integration source.
- The task will create new assets for when there are no existing assets that meet merge criteria (hostname, MAC, etc).
- You can search for assets enriched by this custom integration with the runZero search `custom_integration:endpoint-central`.

----
lima-charlie/config.json
{ "name": "Lima Charlie", "type": "inbound" }

----
lima-charlie/README.md
# Custom Integration: Lima Charlie

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Lima Charlie requirements

- Organization ID (`oid`) for your Lima Charlie account.
- API Access Token with permissions to access sensor data.
- JWT Endpoint URL: `https://jwt.limacharlie.io`.
- API Base URL: `https://api.limacharlie.io/v1`.

## Steps

### Lima Charlie configuration

1. Obtain your Organization ID (`oid`) and API Access Token from your Lima Charlie account.
   - Refer to the [Lima Charlie Documentation](https://www.limacharlie.io/docs) for instructions.
2. Test your credentials:
   - Use the JWT endpoint (`https://jwt.limacharlie.io`) to generate a bearer token with your `oid` and API Access Token.
   - Use the generated token to query the `/sensors` endpoint (`https://api.limacharlie.io/v1/sensors/{oid}`) and verify access to your sensor data.

### runZero configuration

1. (OPTIONAL) - Make any necessary changes to the script to align with your environment.
    - Modify API calls as needed to filter sensor data.
    - Modify datapoints uploaded to runZero as needed.
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - Use the `access_key` field for your Lima Charlie Organization ID (`oid`).
    - Use the `access_secret` field for your API Access Token.
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "lima-charlie").
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` to ensure it has valid syntax.
    - Click `Save` to create the Custom Integration.
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to recur at the desired timeframes.
    - Select the Explorer you'd like the Custom Integration to run from.
    - Click `Save` to kick off the first task.

### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration.
- The task will update the existing assets with the data pulled from the Custom Integration source.
- The task will create new assets for when there are no existing assets that meet merge criteria (hostname, MAC, etc).
- You can search for assets enriched by this custom integration with the runZero search `custom_integration:lima-charlie`.

----
lima-charlie/custom-integration-lima-charlie.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_post='post', http_get='get', 'url_encode')
load('uuid', 'new_uuid')

LIMACHARLIE_JWT_URL = 'https://jwt.limacharlie.io'
LIMACHARLIE_BASE_URL = 'https://api.limacharlie.io/v1'

def get_token(oid, access_token):
    url = '{}/?oid={}&secret={}'.format(LIMACHARLIE_JWT_URL, oid, access_token)
    token = http_post(url, headers={"Content-Type": "application/json"})
    if token.status_code != 200:
        return None
    token_json = json_decode(token.body)
    return token_json['jwt']

def build_assets(sensors):
    assets = []
    for item in sensors:
        sid = item.get('sid', new_uuid)        
        hostname = item.get('hostname', '')

        ips = []
        int_ip = item.get('int_ip', '')
        if int_ip:
            ips.append(int_ip)
        ext_ip = item.get('ext_ip', '')
        if ext_ip:
            ips.append(ext_ip)

        mac = item.get('mac_addr', '')
        if mac:
            mac = mac.replace("-", ":")
            network = build_network_interface(ips=ips, mac=mac)
        else:
            network = build_network_interface(ips=ips, mac=None)

        # handle additional attributes collected for asset
        custom_attrs = {}

        custom_attribs_to_ignore = [
            "sid",
            "hostname",
            "mac_addr",
            "int_ip",
            "ext_ip"
        ]

        for key, value in item.items():
            if type(value) != 'dict':
                if key not in custom_attribs_to_ignore:
                    custom_attrs[key] = str(value)[:1023]

        assets.append(
            ImportAsset(
                id=sid,
                hostnames=[hostname],
                networkInterfaces=[network],
                customAttributes=custom_attrs
            )
        )
    return assets

def build_network_interface(ips, mac):
    ip4s = []
    ip6s = []
    for ip in ips[:99]:
        ip_addr = ip_address(ip)
        if ip_addr.version == 4:
            ip4s.append(ip_addr)
        elif ip_addr.version == 6:
            ip6s.append(ip_addr)
        else:
            continue
    if not mac:
        return NetworkInterface(ipv4Addresses=ip4s, ipv6Addresses=ip6s)
    
    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def main(**kwargs):
    oid = kwargs['access_key']
    access_token = kwargs['access_secret']
    token = get_token(oid, access_token)
    if not token:
        print('failed to get token')
        return None
        
    # Get sensors
    url = '{}/{}/{}'.format(LIMACHARLIE_BASE_URL, 'sensors', oid)
    sensors = http_get(url, headers={"Content-Type": "application/json", "Authorization": "Bearer " + token})
    if sensors.status_code != 200:
        print('failed to retrieve sensors')
        return None

    sensors_json = json_decode(sensors.body)['sensors']

    assets = build_assets(sensors_json)
    if not assets:
        print('no assets')
    
    return assets
----
automox/config.json
{ "name": "Automox", "type": "inbound" }

----
automox/custom-integration-automox.star
## Automox!

load('runzero.types', 'ImportAsset', 'NetworkInterface', 'Software')
load('json', json_decode='decode')
load('net', 'ip_address')
load('http', http_get='get')
load('uuid', 'new_uuid')

AUTOMOX_API_URL = "https://console.automox.com/api/servers"

def get_automox_devices(headers):
    """Retrieve all devices from Automox using pagination"""

    query = {
        "limit": "500",
        "page": "0"
    }

    devices = []

    while True:
        response = http_get(AUTOMOX_API_URL, headers=headers, params=query)

        if response.status_code != 200:
            print("Failed to fetch devices from Automox. Status:", response.status_code)
            return devices

        batch = json_decode(response.body)

        if not batch:
            break  # Stop fetching if no more results are returned

        devices.extend(batch)
        query["page"] = str(int(query["page"]) + 1)

    print("Loaded", len(devices), "devices")
    return devices

def build_assets(api_token, org_id=None):
    """Convert Automox device data into runZero asset format"""
    headers = {
        "Authorization": "Bearer " + api_token,
        "Content-Type": "application/json"
    }
    all_devices = get_automox_devices(headers)
    assets = []

    for device in all_devices:
        device_id = device.get("id", new_uuid())
        custom_attrs = {
            "os_version": device.get("os_version", ""),
            "os_name": device.get("os_name", ""),
            "os_family": device.get("os_family", ""),
            "agent_version": device.get("agent_version", ""),
            "compliant": str(device.get("compliant", "")),
            "last_logged_in_user": device.get("last_logged_in_user", ""),
            "serial_number": device.get("serial_number", ""),
            "agent_status": device.get("status", {}).get("agent_status", "")
        }

        mac_address = ""
        if device.get("detail", {}).get("NICS"):
            mac_address = device["detail"]["NICS"][0].get("MAC", "")

        # Collect IPs
        ips = device.get("ip_addrs", []) + device.get("ip_addrs_private", [])

        # Append software if org_id is passed
        if org_id:
            software_list = build_software_list(org_id, device_id, headers)

        assets.append(
            ImportAsset(
                id=str(device_id),
                networkInterfaces=[build_network_interface(ips, mac_address)],
                hostnames=[device.get("name", "")],
                os_version=device.get("os_version", ""),
                os=device.get("os_name", ""),
                customAttributes=custom_attrs
            )
        )
    return assets

def build_software_list(org_id, device_id, headers):
    # Fetch software inventory from Automox API
    automox_software_url = "https://console.automox.com/api/servers/" + str(device_id) + "/packages?o=" + str(org_id)
    
    software_response = http_get(automox_software_url, headers=headers)
    
    if software_response.status_code != 200:
        fail("Failed to fetch software inventory: " + str(software_response.status_code))
        
    software_inventory = json_decode(software_response.body)
    
    software_list = []
    for soft in software_inventory:
        transformed_software = Software (
            id = str(soft.get("id", "")),
            installedFrom = str(soft.get("repo", "")),
            product = str(soft.get("display_name", "")),
            version = str(soft.get("version", "")),
            customAttributes = {
                "server_id": str(soft.get("server_id", "")),
                "package_id": str(soft.get("package_id", "")),
                "software_id": str(soft.get("software_id", "")),
                "installed": soft.get("installed", ""),
                "ignored": soft.get("ignored", ""),
                "group_ignored": soft.get("group_ignored", ""),
                "deferred_until": soft.get("deferred_until", ""),
                "group_deferred_until": soft.get("group_deferred_until", ""),
                "name": str(soft.get("name", "")),
                "cves": str(soft.get("cves", "")),
                "cve_score": soft.get("cve_score", ""),
                "agent_severity": str(soft.get("agent_severity", "")),
                "severity": str(soft.get("severity", "")),
                "package_version_id": str(soft.get("package_version_id", "")),
                "os_name": str(soft.get("os_name", "")),
                "os_version": str(soft.get("os_version", "")),
                "os_version_id": str(soft.get("os_version_id", "")),
                "create_time": str(soft.get("create_time", "")),
                "requires_reboot": soft.get("requires_reboot", ""),
                "patch_classification_category_id": str(soft.get("patch_classification_category_id", "")),
                "patch_scope": str(soft.get("patch_scope", "")),
                "is_uninstallable": soft.get("is_uninstallable", ""),
                "secondary_id": str(soft.get("secondary_id", "")),
                "is_managed": soft.get("is_managed", ""),
                "impact": str(soft.get("impact", "")),
                "organization_id": str(soft.get("organization_id", ""))
            },                  
        )        
        # Only append if not empty
        if transformed_software:
            software_list.append(transformed_software)
    
    return software_list

def build_network_interface(ips, mac=None):
    """Convert IPs and MAC addresses into a NetworkInterface object"""
    ip4s = []
    ip6s = []

    for ip in ips[:99]:
        if ip:
            ip_addr = ip_address(ip)
            if ip_addr.version == 4:
                ip4s.append(ip_addr)
            elif ip_addr.version == 6:
                ip6s.append(ip_addr)
        else:
            continue

    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def main(**kwargs):
    """Main function to retrieve and return Automox asset data"""
    org_id = kwargs.get("access_key", None)
    api_token = kwargs['access_secret']  # Use API token from runZero credentials

    assets = build_assets(api_token, org_id)
    
    if not assets:
        print("No assets retrieved from Automox")
        return None

    return assets

----
automox/README.md
# Custom Integration: Automox

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Automox requirements

- **API Key** with permissions to retrieve device inventory.
- **Automox API URL**: `https://console.automox.com/api/servers`.

## Steps

### Automox configuration

1. **Obtain your Automox API Key**:
   - Log in to your Automox console.
   - Navigate to the kebab menu (3 vertical dots in the upper right) and then click on **Keys**
   - Generate a **new API Key** with read permissions.
2. **Note your API Key** for use in the integration.

### runZero configuration

1. **(OPTIONAL)** - Modify the script if needed:
    - Adjust API queries to filter device data.
    - Customize data attributes stored in runZero.
2. **Create a Credential for the Custom Integration**:
    - Go to [runZero Credentials](https://console.runzero.com/credentials).
    - Select `Custom Integration Script Secrets`.
    - Enter your **Automox API Key** as `access_secret`.
    - Use a placeholder value like `foo` for `access_key` (unused in this integration).
3. **Create the Custom Integration**:
    - Go to [runZero Custom Integrations](https://console.runzero.com/custom-integrations/new).
    - Add a **Name and Icon** for the integration (e.g., "automox").
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` and then `Save`.
4. **Schedule the Integration Task**:
    - Go to [runZero Ingest](https://console.runzero.com/ingest/custom/).
    - Select the **Credential and Custom Integration** created earlier.
    - Set a schedule for recurring updates.
    - Select the **Explorer** where the script will run.
    - Click **Save** to start the task.

### What's next?

- The task will kick off on the [tasks](https://console.runzero.com/tasks) page.
- Assets in runZero will be updated based on **Automox device inventory**.
- The script captures details like **OS version, agent status, compliance, and IPs**.
- Search for these assets in runZero using `custom_integration:automox`.

### Notes

- The script **automatically retrieves all devices**, including paginated results.
- All attributes from Automox are stored in `customAttributes`.
- The task **can be scheduled** to sync device inventory at regular intervals.

----
device42/custom-integration-device42.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_get='get')
load('uuid', 'new_uuid')

DEVICE42_HOST     = 'swaggerdemo.device42.com'
DEVICE42_ENDPOINT = '/api/1.0/devices/all/'
PAGE_SIZE         = 1000

def build_network_interface(ips, mac):
    ip4s, ip6s = [], []
    for ip in ips:
        addr = ip_address(ip)
        if addr.version == 4:
            ip4s.append(addr)
        elif addr.version == 6:
            ip6s.append(addr)
    return NetworkInterface(
        macAddress=mac,
        ipv4Addresses=ip4s,
        ipv6Addresses=ip6s,
    )

def build_network_interfaces(mac_entries, ip_entries):
    interfaces = []
    seen_macs = {}
    for ip_obj in ip_entries:
        ip_str = ip_obj.get('ip')
        if not ip_str:
            continue
        macaddr = ip_obj.get('macaddress') or ip_obj.get('mac_address')
        seen_macs[macaddr] = seen_macs.get(macaddr, [])
        seen_macs[macaddr].append(ip_str)
        interfaces.append(build_network_interface([ip_str], macaddr))

    for m in mac_entries:
        mac_addr = m.get('mac') or m.get('mac_address')
        if mac_addr not in seen_macs:
            interfaces.append(build_network_interface([], mac_addr))

    return interfaces

def build_assets(devices):
    assets = []
    for d in devices:
        asset_id = str(d.get('id') or d.get('uuid') or new_uuid())

        hostnames = []
        for key in ('name', 'preferred_alias', 'virtual_host_name'):
            val = d.get(key)
            if val and val not in hostnames:
                hostnames.append(val)

        mac_entries = d.get('macAddresses', []) + d.get('mac_addresses', [])
        ip_entries  = d.get('ipAddresses', [])  + d.get('ip_addresses', [])
        network_ifaces = build_network_interfaces(mac_entries, ip_entries)

        asset_os = d.get('os')
        asset_os_version = d.get('osver') or d.get('osverno')
        asset_model = d.get('hw_model')
        asset_manufacturer = d.get('manufacturer')
        asset_device_type = d.get('type') or d.get('device_sub_type') or d.get('virtual_subtype')

        asset_tags = []
        raw_tags = d.get('tags') or []
        if type(raw_tags) == list:
            for t in raw_tags:
                asset_tags.append(str(t))

        exclude_keys = [
            'id', 'uuid', 'device_id', 'macAddresses', 'mac_addresses',
            'ipAddresses', 'ip_addresses', 'name', 'preferred_alias',
            'virtual_host_name', 'os', 'osver', 'osverno', 'hw_model',
            'manufacturer', 'type', 'device_sub_type', 'virtual_subtype',
            'tags',
        ]

        custom = {}
        for k, v in d.items():
            if k in exclude_keys:
                continue
            custom[k] = str(v)[:1023]

        assets.append(
            ImportAsset(
                id=asset_id,
                hostnames=hostnames,
                os=asset_os,
                osVersion=asset_os_version,
                model=asset_model,
                manufacturer=asset_manufacturer,
                deviceType=asset_device_type,
                tags=asset_tags,
                networkInterfaces=network_ifaces,
                customAttributes=custom,
            )
        )
    return assets

def main(**kwargs):
    auth_type = kwargs['access_key'].lower()
    secret = kwargs['access_secret']
    
    if auth_type == 'basic':
        headers = {
            'Authorization': 'Basic ' + secret,
            'Accept': 'application/json',
        }
    elif auth_type == 'bearer':
        headers = {
            'Authorization': 'Bearer ' + secret,
            'Accept': 'application/json',
        }
    else:
        print('Unsupported access_key (must be "basic" or "bearer")')
        return None

    offset = 0
    all_devices = []
    while True:
        url = 'https://{}{}?format=json&limit={}&offset={}'.format(
            DEVICE42_HOST, DEVICE42_ENDPOINT, PAGE_SIZE, offset
        )
        resp = http_get(url, headers=headers)

        if resp.status_code != 200:
            print('Device42 API error:', resp.status_code, resp.body)
            return None

        body = json_decode(resp.body)
        if body.get('code', 0) != 0:
            print('Device42 API logical error:', body.get('msg'))
            return None

        page = body.get('Devices', [])
        if not page:
            break

        all_devices.extend(page)
        if len(page) < PAGE_SIZE:
            break
        offset += PAGE_SIZE

    if not all_devices:
        print('No devices returned')
        return None

    return build_assets(all_devices)


----
device42/config.json
{ "name": "Device42", "type": "inbound" }

----
device42/README.md
# Custom Integration: Device42

## runZero requirements

- A runZero **superuser** account to access [Custom Integrations](https://console.runzero.com/custom-integrations).

## Device42 requirements

- Access to the Device42 REST API at the `/api/1.0/devices/all/` endpoint.
- Either:
  - A valid Device42 **username and password**, or
  - A valid **Bearer token**.

## Preparing the API credentials

Device42 supports **Basic** or **Bearer** authentication.

You must configure both fields in your runZero credential:

- `access_key`: must be either `basic` or `bearer`.
- `access_secret`:  
  - For `basic`: a base64-encoded string of `username:password`.
  - For `bearer`: your raw API token.

### Example for Basic Authentication

```bash
echo -n 'myuser:mypassword' | base64
```

Use the output as your `access_secret`. Set `access_key` to `basic`.

### Example for Bearer Authentication

Set `access_key` to `bearer`, and `access_secret` to your API token string.

## Steps

### 1. Create a Credential in runZero

- Go to [runZero Credentials](https://console.runzero.com/credentials).
- Select the type: **Custom Integration Script Secrets**.
- Set:
  - `access_key`: `basic` or `bearer`
  - `access_secret`: base64-encoded `username:password` or API token

### 2. Create the Custom Integration

- Navigate to [Custom Integrations](https://console.runzero.com/custom-integrations/new).
- Name your integration (e.g. `device42`).
- Paste the finalized script into the code editor.
- Click **Validate**, then **Save**.

### 3. Create and Run the Integration Task

- Go to [Ingest Task](https://console.runzero.com/ingest/custom/).
- Select the Credential and Custom Integration you created.
- Choose the runZero Explorer where it will run.
- Set your schedule and click **Save**.

### Notes

- Your Device42 instance must be reachable from the runZero Explorer.
- API pagination is handled automatically using `limit` and `offset`.
- Assets will be enriched with all available fields (except IP/MAC/name) in `customAttributes`.

## Search Syntax in runZero

To find assets imported by this integration:

```
custom_integration:device42
```

----
docs/integrations.json
{
  "lastUpdated": "2025-06-02T21:09:20.457960Z",
  "totalIntegrations": 20,
  "integrationDetails": [
    {
      "name": "Carbon Black",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/carbon-black/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/carbon-black/custom-integration-carbon-black.star"
    },
    {
      "name": "Device42",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/device42/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/device42/custom-integration-device42.star"
    },
    {
      "name": "Kandji",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/kandji/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/kandji/custom-integration-kandji.star"
    },
    {
      "name": "Sumo Logic",
      "type": "outbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/sumo-logic/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/sumo-logic/custom-integration-sumo.star"
    },
    {
      "name": "Lima Charlie",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/lima-charlie/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/lima-charlie/custom-integration-lima-charlie.star"
    },
    {
      "name": "Stairwell",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/stairwell/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/stairwell/custom-integration-stairwell.star"
    },
    {
      "name": "Digital Ocean",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/digital-ocean/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/digital-ocean/custom-integration-digital-ocean.star"
    },
    {
      "name": "Snipe-IT",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/snipe-it/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/snipe-it/snipeit.star"
    },
    {
      "name": "Cortex XDR",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/cortex-xdr/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/cortex-xdr/custom-integration-cortex-xdr.star"
    },
    {
      "name": "runZero Task Sync",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/task-sync/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/task-sync/custom-integration-task-sync.star"
    },
    {
      "name": "NinjaOne",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/ninjaone/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/ninjaone/custom-integration-ninjaone.star"
    },
    {
      "name": "runZero Vulnerability Workflow",
      "type": "outbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/vulnerability-workflow/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/vulnerability-workflow/custom-integration-vulnerability-workflow.star"
    },
    {
      "name": "Netskope",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/netskope/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/netskope/custom-integration-netskope.star"
    },
    {
      "name": "JAMF",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/jamf/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/jamf/custom-integration-jamf.star"
    },
    {
      "name": "Manage Engine Endpoint Central",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/manage-engine-endpoint-central/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/manage-engine-endpoint-central/custom-integration-endpoint-central.star"
    },
    {
      "name": "Cisco-ISE",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/cisco-ise/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/cisco-ise/custom_integration_cisco-ise.star"
    },
    {
      "name": "Automox",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/automox/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/automox/custom-integration-automox.star"
    },
    {
      "name": "Extreme Networks CloudIQ",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/extreme-cloud-iq/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/extreme-cloud-iq/custom-integrations-extreme-cloud-iq.star"
    },
    {
      "name": "Tanium",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/tanium/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/tanium/custom-integration-tanium.star"
    },
    {
      "name": "Drata",
      "type": "inbound",
      "readme": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/drata/README.md",
      "integration": "https://github.com/runZeroInc/runzero-custom-integrations/blob/main/drata/custom-integration-drata.star"
    }
  ]
}

----
carbon-black/custom-integration-carbon-black.star
load('runzero.types', 'ImportAsset', 'NetworkInterface', 'Vulnerability')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_post='post', http_get='get', 'url_encode')

CARBON_BLACK_HOST = "<UPDATE_ME>"  # Example: https://defense.conferdeploy.net
SCROLL_API_URL = "{}/appservices/v6/orgs/{}/devices/_scroll"
VULNERABILITY_API_URL = "{}/vulnerability/assessment/api/v1/orgs/{}/devices/{}/vulnerabilities/_search?dataForExport=true"
PAGE_SIZE = 1000  # Max devices per request
VULN_PAGE_SIZE = 100  # Max vulnerabilities per API call
MAX_VULNS = None  # Set to None for all, or an integer for a limit (e.g., 50)

def get_devices(org_key, api_key):
    """Retrieve all devices from Carbon Black Cloud API using _scroll for large datasets"""
    headers = {
        "X-Auth-Token": "{}/{}".format(api_key, org_key),
        "Content-Type": "application/json",
    }

    devices = []
    
    # Step 1: Start the scroll session
    payload = {
        "criteria": {},
        "rows": PAGE_SIZE
    }
    url = SCROLL_API_URL.format(CARBON_BLACK_HOST, org_key)
    response = http_post(url, headers=headers, body=bytes(json_encode(payload)))

    if response.status_code != 200:
        print("Failed to start scroll session. Status: {}".format(response.status_code))
        return devices

    response_json = json_decode(response.body)
    batch = response_json.get("results", [])
    scroll_id = response_json.get("scroll_id", None)

    if not batch:
        print("No devices returned or missing scroll_id.")
        return devices

    devices.extend(batch)

    if not scroll_id:
        return devices

    # Step 2: Continue fetching batches using scroll_id
    while scroll_id:
        payload = {"scroll_id": scroll_id}
        response = http_post(url, headers=headers, body=bytes(json_encode(payload)))

        if response.status_code != 200:
            print("Failed to retrieve next batch. Status: {}".format(response.status_code))
            break

        response_json = json_decode(response.body)
        batch = response_json.get("results", [])
        scroll_id = response_json.get("scroll_id", None)

        if not batch:
            break  # No more data to retrieve

        devices.extend(batch)

    return devices

def get_device_vulnerabilities(org_key, api_key, device_id, MAX_VULNS):
    """Retrieve vulnerabilities for a specific device, with optional max limit"""
    headers = {
        "X-Auth-Token": "{}/{}".format(api_key, org_key),
        "Content-Type": "application/json",
    }
    
    vulnerabilities = []
    start = 0

    while MAX_VULNS == None or len(vulnerabilities) < MAX_VULNS:
        remaining = VULN_PAGE_SIZE
        if MAX_VULNS != None:
            remaining = min(MAX_VULNS - len(vulnerabilities), VULN_PAGE_SIZE)

        payload = {
            "query": "",
            "rows": remaining,
            "start": start,
            "criteria": {},
            "sort": [{"field": "risk_meter_score", "order": "DESC"}]
        }
        
        url = VULNERABILITY_API_URL.format(CARBON_BLACK_HOST, org_key, device_id)
        response = http_post(url, headers=headers, body=bytes(json_encode(payload)))

        if response.status_code != 200:
            print("Failed to retrieve vulnerabilities for device:", device_id)
            return vulnerabilities

        response_json = json_decode(response.body)
        batch = response_json.get("results", [])
        
        if not batch:
            break  # No more vulnerabilities left

        vulnerabilities.extend(batch)
        start += VULN_PAGE_SIZE

    if MAX_VULNS != None:
        return vulnerabilities[:MAX_VULNS]
    return vulnerabilities

def build_vulnerabilities(vuln_data):
    """Convert Carbon Black vulnerabilities into runZero vulnerability format"""
    vulnerabilities = []

    for vuln in vuln_data:
        vuln_info = vuln.get("vuln_info", {})
        cve_id = vuln_info.get("cve_id", "")
        description = vuln_info.get("cve_description", "")
        severity = vuln_info.get("severity", "LOW").upper()
        risk_meter_score = vuln_info.get("risk_meter_score", 0)

        # Map severity to numeric risk rank
        severity_map = {"CRITICAL": 4, "HIGH": 3, "MODERATE": 2, "LOW": 1}
        risk_rank = severity_map.get(severity, 0)

        vulnerabilities.append(
            Vulnerability(
                id=cve_id,
                name=cve_id,
                description=description,
                cve=cve_id,
                riskScore=float(risk_meter_score),
                riskRank=risk_rank,
                severityScore=float(risk_meter_score),
                severityRank=risk_rank,
                solution=vuln_info.get("solution", ""),
                customAttributes={
                    "fixed_by": vuln_info.get("fixed_by", ""),
                    "created_at": vuln_info.get("created_at", ""),
                    "nvd_link": vuln_info.get("nvd_link", ""),
                    "cvss_score": vuln_info.get("cvss_score", ""),
                    "cvss_v3_score": vuln_info.get("cvss_v3_score", ""),
                }
            )
        )

    return vulnerabilities

def build_assets(org_key, api_key, devices):
    """Convert Carbon Black devices into runZero assets with vulnerability data"""
    assets = []
    
    for device in devices:
        device_id = str(device.get("id", ""))
        hostname = device.get("name", "")
        os = device.get("os", "")
        os_version = device.get("os_version", "")
        ip = device.get("last_internal_ip_address", "")
        mac = device.get("mac_address", "")

        # Fetch vulnerabilities for the device
        vuln_data = get_device_vulnerabilities(org_key, api_key, device_id, MAX_VULNS)
        vulnerabilities = build_vulnerabilities(vuln_data)

        # Build network interfaces
        network = build_network_interface(ips=[ip], mac=mac if mac else None)

        # Manually build customAttributes for compatibility
        custom_attrs = {
            "activation_code": device.get("activation_code", ""),
            "ad_domain": device.get("ad_domain", ""),
            "av_engine": device.get("av_engine", ""),
            "compliance_status": device.get("compliance_status", ""),
            "deployment_type": device.get("deployment_type", ""),
            "device_owner_id": str(device.get("device_owner_id", "")),
            "organization_name": device.get("organization_name", ""),
            "os_version": device.get("os_version", ""),
            "sensor_version": device.get("sensor_version", ""),
            "status": device.get("status", ""),
            "target_priority": device.get("target_priority", ""),
            "virtual_machine": str(device.get("virtual_machine", "")),
            "vulnerability_score": str(device.get("vulnerability_score", "")),
            "vulnerability_severity": device.get("vulnerability_severity", ""),
        }

        assets.append(
            ImportAsset(
                id=device_id,
                hostnames=[hostname],
                os=os,
                osVersion=os_version,
                networkInterfaces=[network],
                vulnerabilities=vulnerabilities,
                customAttributes=custom_attrs
            )
        )

    return assets

def build_network_interface(ips, mac):
    """Build runZero network interfaces"""
    ip4s = []
    ip6s = []

    for ip in ips[:99]:
        if ip:
            ip_addr = ip_address(ip)
            if ip_addr.version == 4:
                ip4s.append(ip_addr)
            elif ip_addr.version == 6:
                ip6s.append(ip_addr)

    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def main(**kwargs):
    """Main function for Carbon Black integration"""
    org_key = kwargs['access_key']
    api_key = kwargs['access_secret']

    devices = get_devices(org_key, api_key)
    
    if not devices:
        print("No devices found.")
        return None

    assets = build_assets(org_key, api_key, devices)
    
    if not assets:
        print("No assets created.")
    
    return assets

----
carbon-black/config.json
{ "name": "Carbon Black", "type": "inbound" }

----
carbon-black/README.md
# Custom Integration: Carbon Black

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Carbon Black requirements

- API Key with permissions to access the **Devices API**.
- Organization Key (`org_key`), required for API requests.
- Carbon Black API URL (e.g., `https://defense.conferdeploy.net`).

## Steps

### Carbon Black configuration

1. Obtain your **API Key** from Carbon Black Cloud:
   - Navigate to **Settings** > **API Access** > **API Keys** tab in the Carbon Black Cloud console.
   - Generate an API Key with access to the **Devices API** and **Vulnerability API**.
   - Note down the **API Key** and **Org Key** (`org_key`).
2. Find your Carbon Black API URL:
   - This depends on your region (e.g., `https://defense.conferdeploy.net`).
   - Refer to the [Carbon Black API Documentation](https://developer.carbonblack.com/reference/carbon-black-cloud/authentication/#hostname) for a list of hostnames it could be.

### runZero configuration

1. (OPTIONAL) - Make any necessary changes to the script to align with your environment.
    - Modify API queries as needed to filter asset data.
    - Adjust which attributes are included in runZero.
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - Use the `access_key` field for your **Carbon Black Org Key**.
    - Use the `access_secret` field for your **Carbon Black API Key**.
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "carbonblack").
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` to ensure it has valid syntax.
    - Click `Save` to create the Custom Integration.
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to recur at the desired timeframes.
    - Select the Explorer you'd like the Custom Integration to run from.
    - Click `Save` to kick off the first task.

### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration.
- The task will update the existing assets with the data pulled from Carbon Black.
- The task will create new assets for when there are no existing assets that meet merge criteria (hostname, MAC, etc).
- You can search for assets enriched by this custom integration with the runZero search `custom_integration:carbonblack`.

### Notes

- The integration automatically retrieves **all device attributes** available in Carbon Black Cloud.
- Data such as **sensor version, status, policy, network details, and security attributes** are included in `customAttributes`.
- Use the **runZero search queries** to filter assets by key attributes.

----
boilerplate/config.json
{ "name": "Product Name", "type": "inbound or outbound" }

----
boilerplate/README.md
# Custom Integration: <INSERT_INTEGRATION_NAME_HERE>

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero

## <INSERT_PRODUCT> requirements

- <INSERT_REQUIREMENT_1> - example API Client Credentials
- <INSERT_REQUIREMENT_2> - example API URL

## Steps

### <INSERT_PRODUCT> configuration

1. <INSERT_STEP_1> - example get API URL
2. <INSERT_STEP_2> - create API credentials
3. <INSERT_STEP_3> - example update `API_URL` in the code

### runZero configuration

1. (OPTIONAL) - make any neccessary changes to the script to align with your environment. 
    - Modify API calls as needed to filter assets
    - Modify datapoints uploaded to runZero as needed 
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials)
    - Select the type `Custom Integration Script Secrets`
    - Both `access_key` and `access_secret` are required, but not all scripts will use both
    - Input a placeholde value like `foo` if the value is unused 
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new)
    - Add a Name and Icon 
    - Toggle `Enable custom integration script` to input your finalized script
    - Click `Validate` to ensure it has valide syntax
    - Click `Save` to create the Custom Integration 
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/)
    - Select the Credential and Custom Integration created in steps 2 and 3
    - Update the task schedule to recur at the desired timeframes
    - Select the Explorer you'd like the Custom Integration to run from
    - Click `Save` to kick off the first task 


### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration 
- The task will update the existing assets with the data pulled from the Custom Integration source 
- The task will create new assets for when there are no existing assets that meet merge criteria (hostname, MAC, etc)
- You can search for assets enriched by this custom integration with the runZero search `custom_integration:<INSERT_NAME_HERE>`

----
boilerplate/custom-integration-boilerplate.star
# This script demonstrates how to import and use all of the runZero custom Starlark libraries.
# 
# The libraries are:
#
#   1. runzero.types (ImportAsset, NetworkInterface, Software, Vulnerability)
#   2. json (json_encode="encode", json_decode="decode")
#   3. net (ip_address)
#   4. http (http_post="post", http_get="get", url_encode)
#   5. uuid (new_uuid)
#
# The main() function also shows how to use the Credentials stored in runZero with the **kwargs input. 

load("runzero.types", "ImportAsset", "NetworkInterface", "Software", "Vulnerability")
load("json", json_encode="encode", json_decode="decode")
load("net", "ip_address")
load("http", http_post="post", http_get="get", "url_encode")
load("uuid", "new_uuid")


# -------------------------
# runzero.types (3 examples)
# -------------------------

def create_asset_example():
    """
    Demonstrates how to create an ImportAsset object, which is used
    to represent a device or endpoint for ingestion into runZero.

    Returns:
        ImportAsset: a populated ImportAsset object
    """
    # Minimal example: single network interface, hostnames, OS, etc.
    # Normally, you'll populate these from real data.
    netif = NetworkInterface(
        ipv4Addresses=["192.168.1.10"],
        macAddress="AA:BB:CC:DD:EE:FF"
    )
    return ImportAsset(
        id="asset-12345",
        networkInterfaces=[netif],
        hostnames=["sample-device"],
        os="ExampleOS",
        osVersion="1.0"
    )

def create_software_example():
    """
    Demonstrates how to create a Software object, which can be attached
    to an ImportAsset for software inventory tracking.

    Returns:
        Software: a populated Software object
    """
    return Software(
        id="software-456",
        vendor="ExampleVendor",
        product="ExampleProduct",
        version="v2.1.3",
        serviceAddress="127.0.0.1"
    )

def create_vulnerability_example():
    """
    Demonstrates how to create a Vulnerability object, which can be attached
    to an ImportAsset for vulnerability information tracking.

    Returns:
        Vulnerability: a populated Vulnerability object
    """
    return Vulnerability(
        id="vuln-789",
        name="CVE-1234-5678",
        description="Example vulnerability",
        cve="CVE-1234-5678",
        solution="Update to the latest patch",
        severityRank=4,          # 0=Info, 1=Low, 2=Med, 3=High, 4=Critical
        severityScore=10.0,
        riskRank=4,
        riskScore=10.0
    )


# ---------------
# json library
# ---------------
def example_json_usage():
    """
    Demonstrates how to use the json library for encoding and decoding.
    """
    sample_data = {"key": "value", "numbers": [1, 2, 3]}
    # Encode Python/Starlark dict to JSON string
    encoded = json_encode(sample_data)
    print("JSON-encoded data:", encoded)

    # Decode back to a Starlark/Python object
    decoded = json_decode(encoded)
    print("JSON-decoded data:", decoded)
    return decoded


# --------------
# net library
# --------------
def example_ip_usage():
    """
    Demonstrates how to parse an IP address using the net library.
    Returns a net.ip_address object (either IPv4 or IPv6).
    """
    addr_string = "192.168.10.55"
    ip_obj = ip_address(addr_string)
    print("IP version:", ip_obj.version)
    print("Compressed representation:", ip_obj.compressed)
    return ip_obj


# ---------------
# http library
# ---------------
def example_http_usage():
    """
    Demonstrates usage of the http library to construct a URL-encoded
    parameter set, then perform a GET request.
    """
    params = {"search": "alive:t", "limit": 10}
    encoded_params = url_encode(params)
    print("Encoded GET parameters:", encoded_params)

    # This is just a sample. If you hit a real URL, you'd typically do:
    #   response = get(url="https://example.com/api", params=params)
    #   or
    #   response = post(url="https://example.com/api", body=...)
    # For this demo, we'll just return the encoded_params
    return encoded_params


# ---------------
# uuid library
# ---------------
def example_uuid_usage():
    """
    Demonstrates how to use the uuid library to generate a unique ID.
    """
    unique_id = new_uuid()
    print("Generated UUID:", unique_id)
    return unique_id


# -------------
# main function
# -------------
def main(*args, **kwargs):
    """
    Main function that demonstrates capturing parameters from kwargs
    and printing a simple welcome message.

    Example usage in runZero:
        def main(*args, **kwargs):
            client_id = kwargs['access_key']
            client_secret = kwargs['access_secret']
            # Do something with client_id, client_secret
    """
    # For demonstration:
    if "access_key" in kwargs:
        client_id = kwargs["access_key"]
    if "access_secret" in kwargs:
        client_secret = kwargs["access_secret"]

    print("welcome to runZero custom integrations")

    # If needed, you can call any of the example functions here:
    # decoded = example_json_usage()
    # ip_obj = example_ip_usage()
    # new_id = example_uuid_usage()
    # params = example_http_usage()
    # asset = create_asset_example()
    # software = create_software_example()
    # vuln = create_vulnerability_example()
    # ...

----
scripts/generate_integration_json.py
import os
import json
from datetime import datetime

# --- Config ---
BLOCK_LIST = {".github", "boilerplate", "LICENSE", "README.md"}
BASE_REPO_URL = "https://github.com/runZeroInc/runzero-custom-integrations/blob/main"

integration_details = []

for entry in os.listdir("."):
    if entry in BLOCK_LIST or not os.path.isdir(entry):
        continue

    folder_path = os.path.join(".", entry)
    readme_path = os.path.join(folder_path, "README.md")
    config_path = os.path.join(folder_path, "config.json")
    integration_file = None

    # Look for the first .star file
    for f in os.listdir(folder_path):
        if f.endswith(".star"):
            integration_file = f
            break

    # Skip if required files are missing
    if not (os.path.isfile(readme_path) and integration_file):
        continue

    # Defaults
    friendly_name = entry
    integration_type = "inbound"

    # Override with config.json if available
    if os.path.isfile(config_path):
        try:
            with open(config_path) as cf:
                config = json.load(cf)
                friendly_name = config.get("name", entry)
                integration_type = config.get("type", "inbound")
        except Exception as e:
            print(f"⚠️  Failed to read config.json in {entry}: {e}")

    integration_details.append(
        {
            "name": friendly_name,
            "type": integration_type,
            "readme": f"{BASE_REPO_URL}/{entry}/README.md",
            "integration": f"{BASE_REPO_URL}/{entry}/{integration_file}",
        }
    )

# --- Save JSON ---
output = {
    "lastUpdated": datetime.utcnow().isoformat() + "Z",
    "totalIntegrations": len(integration_details),
    "integrationDetails": integration_details,
}

with open("docs/integrations.json", "w") as f:
    json.dump(output, f, indent=2)

print("✅ integrations.json created.")

# --- Update README.md ---
readme_path = "README.md"

try:
    with open(readme_path, "r") as f:
        lines = f.readlines()
except FileNotFoundError:
    print("❌ README.md not found.")
    exit(1)

new_lines = []
in_inbound_section = False
in_outbound_section = False
in_section = None

# Prepare the new sections
inbound_links = []
outbound_links = []

for integration in sorted(integration_details, key=lambda x: x["name"].lower()):
    link = (
        f"- [{integration['name']}]({integration['readme'].replace('/README.md', '/')})"
    )
    if integration["type"] == "outbound":
        outbound_links.append(link)
    else:
        inbound_links.append(link)

# Rewrite README content
for line in lines:
    stripped = line.strip()
    if stripped == "## Import to runZero":
        new_lines.append(line)
        new_lines.extend([f"{link}\n" for link in inbound_links])
        in_inbound_section = True
        continue
    elif stripped == "## Export from runZero":
        new_lines.append(line)
        new_lines.extend([f"{link}\n" for link in outbound_links])
        in_outbound_section = True
        continue
    elif stripped.startswith("## ") and (in_inbound_section or in_outbound_section):
        in_inbound_section = in_outbound_section = False

    if not in_inbound_section and not in_outbound_section:
        new_lines.append(line)

with open(readme_path, "w") as f:
    f.writelines(new_lines)

print("✅ README.md updated.")

----
.github/pull_request_template.md
# 🛠️ Pull Request Template

Please choose the relevant section below based on the type of change you're making.

---

## 🔁 Integration Update

_Use this section if you're updating an existing integration._

### Description

Please describe the changes made to the existing integration and why they were necessary. Include any relevant context, such as bug fixes, feature updates, or improvements to configuration.

### Checklist

- [ ] **Validated in Customer Environment:** Changes have been tested in a customer environment and verified to work as expected.  
- [ ] **Updated README:** The README has been updated to reflect any changes to configuration, setup, or usage.

---

## 🆕 New Integration

_Use this section if you're submitting a new integration._

### Description

Please provide a brief description of your changes and the context for this integration. Include any background details or links to related issues.

### Checklist

- [ ] **New Integration Folder:** A new folder has been created for the integration.  
- [ ] **Updated README:** The README has been updated based on the boilerplate to reflect the new integration details.  
- [ ] **custom-integration.star File:** The `custom-integration-<name>.star` file has been created/updated as required.  
- [ ] **config.json File:** The `config.json` is updated with the `name` (product name) and `type` (inbound or outbound) of integration.

---

> 📝 _Feel free to delete the section that doesn't apply._

----
.github/workflows/generate-json.yml
name: Update integrations JSON when relevant files change

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.json'
      - '**/*.star'
      - '!docs/**'

jobs:
  update-integration-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run integration update script
        run: python scripts/generate_integration_json.py

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git diff --cached --quiet || git commit -m "Auto: update integrations JSON and README"
          git push

----
kandji/config.json
{ "name": "Kandji", "type": "inbound" }

----
kandji/custom-integration-kandji.star
## Kandji

load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('http', http_get='get')
load('net', 'ip_address')

KANDJI_API_URL = "https://{sub_domain}.kandji.io/api/v1"
PAGE_LIMIT = 300  # Number of devices to fetch per request

def get_device_list(api_token):
    """Fetch all devices from Kandji with pagination."""
    headers = {
        "Authorization": "Bearer " + api_token,
        "Accept": "application/json",
        "Content-Type": "application/json"
    }
    
    devices = []
    offset = 0

    while True:
        params = {
            "limit": str(PAGE_LIMIT),
            "offset": str(offset)
        }
        response = http_get(KANDJI_API_URL + "/devices", headers=headers, params=params)
        
        if response.status_code != 200:
            print("Error fetching device list from Kandji", response.status_code)
            break
        
        data = json_decode(response.body)

        if not data:
            break
        
        devices.extend(data)
        offset += PAGE_LIMIT

    return devices

def get_device_details(api_token, device_id):
    """Fetch detailed information for a single device."""
    headers = {
        "Authorization": "Bearer " + api_token,
        "Accept": "application/json",
        "Content-Type": "application/json"
    }
    
    url = "{}/devices/{}/details".format(KANDJI_API_URL, device_id)
    response = http_get(url, headers=headers)
    
    if response.status_code != 200:
        print("Error fetching details for device:", device_id)
        return None
    
    return json_decode(response.body)

def build_assets(api_token):
    """Retrieve Kandji devices and transform them into runZero assets."""
    devices = get_device_list(api_token)
    assets = []

    for device in devices:
        device_id = device.get("device_id", "")
        details = get_device_details(api_token, device_id)
        if not details:
            continue

        general = details.get("general", "")
        agent_details = details.get("kandji_agent", "")
        network = details.get("network", "")
        hardware_overview = details.get("hardware_overview", "")
        
        hostname = network.get("local_hostname", "")
        mac_address = network.get("mac_address", "")

        ips = [network.get("ip_address", []) + network.get("public_ip", [])]
        
        serial_number = hardware_overview.get("serial_number", "")
        os_version = general.get("os_version", "")
        model = general.get("model", "")

        custom_attrs = {
            "model": model,
            "serial_number": serial_number
        }
        
        assets.append(
            ImportAsset(
                id=device_id,
                hostnames=[hostname],
                networkInterfaces=[build_network_interface(ips,mac_address)],
                os=model,
                os_version=os_version,
                customAttributes=custom_attrs
            )
        )

    return assets

def build_network_interface(ips, mac=None):
    """Convert IPs and MAC addresses into a NetworkInterface object"""
    ip4s = []
    ip6s = []

    for ip in ips[:99]:
        if ip:
            ip_addr = ip_address(ip)
            if ip_addr == None:
                continue
            elif ip_addr.version == 4:
                ip4s.append(ip_addr)
            elif ip_addr.version == 6:
                ip6s.append(ip_addr)
            else:
                continue

    if not mac:
        return NetworkInterface(ipv4Addresses=ip4s, ipv6Addresses=ip6s)

    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def main(**kwargs):
    api_token = kwargs['access_secret']

    assets = build_assets(api_token)

    if not assets:
        print("No assets found in Kandji")
        return None

    return assets

----
kandji/README.md
# Custom Integration: Kandji

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Kandji requirements

- Kandji API Bearer Token.
- Kandji subdomain.

## Steps

### Kandji configuration

1. Obtain your **API Key** from Kandji:
   - Navigate to **Settings** > **Access** > **Add API Token** to create a new API key in the Kandji console.
   - Note down the **API Token** and tenant-specific **API URL**.
2. Find your Kandji API URL:
   - This depends on your region (e.g., `https://SubDomain.api.eu.kandji.io`).
   - Refer to the [Kandji API Documentation](https://support.kandji.io/kb/kandji-api) for the steps to get your tenet-specific **API URL** when creating an API token.

### runZero configuration

1. Make any necessary changes to the script to align with your environment.
    - Update the **Kandji_API_URL** variable in the script and set to your tenant-specific **API URL** from Kandji
    - (OPTIONAL) Modify API queries as needed to filter asset data.
    - (OPTIONAL) Adjust which attributes are included in runZero.
3. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - Use the `access_secret` field for your **Kandji API Key**.
    - Use a placeholder value like `foo` for `access_key` (unused in this integration).
4. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "kandji").
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` to ensure it has valid syntax.
    - Click `Save` to create the Custom Integration.
5. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to recur at the desired timeframes.
    - Select the Explorer you'd like the Custom Integration to run from.
    - Click `Save` to kick off the first task.

### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration.
- The task will update the existing assets with the data pulled from Kandji.
- The task will create new assets for when there are no existing assets that meet merge criteria (hostname, MAC, etc).
- You can search for assets enriched by this custom integration with the runZero search `custom_integration:kandji`.

### Notes

- The integration automatically retrieves **all devices** available in Kandji.
- Data such as **serial number and OS model** are included in `customAttributes`.
- Use the **runZero search queries** to filter assets by key attributes.

----
.git/REBASE_HEAD
6b411c497cdcc8575aab3eadda290ea68c30909c

----
.git/ORIG_HEAD
bce547623e335f1612289f6efbc85fb20fab3cc0

----
.git/config
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = git@github.com:runZeroInc/runzero-custom-integrations.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
	vscode-merge-base = origin/main
	vscode-merge-base = origin/main
[branch "jamf/hostnames-bug"]
	github-pr-base-branch = "runZeroInc#runzero-custom-integrations#main"
	vscode-merge-base = origin/main
	vscode-merge-base = origin/main
	remote = origin
	merge = refs/heads/jamf/hostnames-bug
[branch "dev"]
	github-pr-base-branch = "runZeroInc#runzero-custom-integrations#main"
	vscode-merge-base = origin/main
	vscode-merge-base = origin/main
[branch "local/dev"]
	github-pr-base-branch = "runZeroInc#runzero-custom-integrations#main"
	vscode-merge-base = origin/main
	vscode-merge-base = origin/main
[branch "new/extremecloudiq"]
	github-pr-base-branch = "runZeroInc#runzero-custom-integrations#main"
	vscode-merge-base = origin/main
	vscode-merge-base = origin/main
	github-pr-base-branch = "runZeroInc#runzero-custom-integrations#main"
	remote = origin
	merge = refs/heads/new/extremecloudiq
	github-pr-owner-number = "runZeroInc#runzero-custom-integrations#4"
[branch "update/jamf/extension-attributes"]
	github-pr-base-branch = "runZeroInc#runzero-custom-integrations#main"
	vscode-merge-base = origin/main
	vscode-merge-base = origin/main
	remote = origin
	merge = refs/heads/update/jamf/extension-attributes
	github-pr-owner-number = "runZeroInc#runzero-custom-integrations#3"
[branch "stairwell/new"]
	remote = origin
	merge = refs/heads/stairwell/new
	vscode-merge-base = origin/stairwell/new
	github-pr-owner-number = "runZeroInc#runzero-custom-integrations#2"
[pull]
	rebase = true

----
.git/HEAD
ref: refs/heads/main

----
.git/description
Unnamed repository; edit this file 'description' to name the repository.

----
.git/index
DIRC      Hh+h+  

         Zۧ30Yl>J0|6 	.DS_Store h> SFh> SF  
>>         Шb:W?`d  .github/pull_request_template.md  h+h+  

         %9P+\ $ٽ2}H #.github/workflows/generate-json.yml       h?48h?48  
Kq          pc\2:YɽcEV 
.gitignore        h+"h+"  

         >ty/$VzQu1 LICENSE   h?4Lhh?4Lh  
K˭         UҨc앻,r8 	README.md h+Kth+Kt  

         	@Bfnv?# automox/README.md h+h+  

          )%3V?;xVqD automox/config.json       h+&/h+&/  

         veu"/։a3ng- 'automox/custom-integration-automox.star   h+uh+u  

         hJb9Z}hvg boilerplate/README.md     h+h+  

          :CU;^F.\N boilerplate/config.json   h+Ch+C  

         'k'LiD"~zc /boilerplate/custom-integration-boilerplate.star   h+|h+|  

         F;8fW}1r'@ carbon-black/README.md    h+Yh+Y  

          .eCaWWo carbon-black/config.json  h+h+  

         |"o-vHBRE 1carbon-black/custom-integration-carbon-black.star h+rh+r  

         
ʾsD|('spGo cisco-ise/README.md       h+h+  

           +dCERf3Ӳn cisco-ise/config.json     h+Ġih+Ġi  

!         
YpJInEl +cisco-ise/custom_integration_cisco-ise.star       h+h+  

#         	:@6Ҁdƹ#IIb cortex-xdr/README.md      h+3h+3  

$          ,luwHל 95D'F cortex-xdr/config.json    h+	h+	  

%         8CX{>IE<F -cortex-xdr/custom-integration-cortex-xdr.star     h+Gh+G  

'         aMzJl$t device42/README.md        h+h+  

(          *֯pY!U+Y device42/config.json      h+א-h+א-  

)         EJ)S80,fK# )device42/custom-integration-device42.star h+h+  

+         	ǔWf5ʋiӨ digital-ocean/README.md   h+۔h+۔  

,          /6"r9GC $y digital-ocean/config.json h+Ih+I  

-         jJ ]60[ė. 3digital-ocean/custom-integration-digital-ocean.star       h8-%\h8-%\  

         #aqhv docs/integrations.json    h+p^h+p^  

1         	=7t|ju`Lͤ drata/README.md   h+h+  

2          '5
}KR\b&g drata/config.json h+^h+^  

3         ;xe6Y(5X #drata/custom-integration-drata.star       h?4Rah?4Ra  
K˰         	x26NF\\/o]eQ extreme-cloud-iq/README.md        h?4T,h?4T,  
K˱          9E
0dݾ extreme-cloud-iq/config.json      h?4V!Dh?4V!D  
K˲         
"_XԻ竭Oc :extreme-cloud-iq/custom-integrations-extreme-cloud-iq.star        h+h+  

5         
 
^.X}P6"1.ey jamf/README.md    h+?*h+?*  

6          &̓w0vtMl<vX jamf/config.json  h?4\:h?4\:  
K˳         @l;\;wQbq8Nn !jamf/custom-integration-jamf.star h+2h+2  

9         }1kRe#T3	C kandji/README.md  h+h+  

:          (a`$µG/(S kandji/config.json        h+Qh+Q  

;         %&8,q5*	 %kandji/custom-integration-kandji.star     h+!h+!  

=          ,t-1uY[z4*,t kubernetes/config.json    h+h+  

?         
a 6ȗH6+VT}: lima-charlie/README.md    h+ykh+yk  

@          ./ylOP= lima-charlie/config.json  h+}h+}  

A         Б;,Q/j+܆K 1lima-charlie/custom-integration-lima-charlie.star h+h+  

C         8G+cK[-7nk (manage-engine-endpoint-central/README.md  h++h++  

D          @+d|g *manage-engine-endpoint-central/config.json        h+3h+3  

E         
q  u Evj> Gmanage-engine-endpoint-central/custom-integration-endpoint-central.star   h+h+  

G         `20ExĊ$ netskope/README.md        h+gh+g  

H          )JXڙK*5| netskope/config.json      h+@h+@  

I         $Ed(rX@#9$&% )netskope/custom-integration-netskope.star h+.h+.  

K         
[g)7hJ33c ninjaone/README.md        h+h+  

L          )d<6"<84&~ ninjaone/config.json      h+rh+r  

M         |yDVa
^6o )ninjaone/custom-integration-ninjaone.star h+]h+]  

O         
	(lD
\(Ⱦc1jMQ $scripts/generate_integration_json.py      h+ )h+ )  

Q         /GeEl\Vf"~J snipe-it/README.md        h+!Hh+!H  

R          )o.]eTʈ> snipe-it/config.json      h+%/ch+%/c  

S         B;u	ihg;e6يf snipe-it/snipeit.star     h?48yh?48y  
Ku         	zhךw{] stairwell/README.md       h?48h?48  
Kv          *Iݣr3U҂*
Byj stairwell/config.json     h?48h?48  
Kw         Q }3@STy +stairwell/custom-integration-stairwell.star       h+(h+(  

U         
.(P%uS-MU2_ sumo-logic/README.md      h+)h+)  

V          -ty-wD%_\@ sumo-logic/config.json    h++74h++74  

W         zv١<!I.. 'sumo-logic/custom-integration-sumo.star   h+-.h+-.  

Y         
fXmp3".rH~ tanium/README.md  h+.h+.  

Z          (4BEEq(^7ُX tanium/config.json        h+2H*h+2H*  

[         1^GB-::In %tanium/custom-integration-tanium.star     h+4h+4  

]         
c(Y:<R5[jE){c; task-sync/README.md       h+6h+6  

^          3zIO8L<Ψi task-sync/config.json     h+9h+9  

_         @\JHt\i +task-sync/custom-integration-task-sync.star       h+=Xh+=X  

a         

'ʥM VM*  vulnerability-workflow/README.md  h+?,h+?,  

b          @B<<SGtGne "vulnerability-workflow/config.json        h+@4h+@4  

c         Bj б:V>P Evulnerability-workflow/custom-integration-vulnerability-workflow.star     TREE   72 25
}dcobqx֍SXdocs 1 0
n<p3Xjamf 3 0
! &{h0>.drata 3 0
;΀9He?YO,eFkandji 3 0
CZdCV0k#"tanium 3 0
Xv|y.github 2 1
&8{V$j#1 7bworkflows 1 0
#쐝W^aGY{automox 3 0
{mBif_[v"scripts 1 0
ҩ fCAn:{8device42 3 0
KK|XgqA1kGnetskope 3 0
mjȰAe=:
ninjaone 3 0
*AǨo=Csnipe-it 3 0
ByG	j#Scisco-ise 3 0
X!Dhx)s}+stairwell 3 0
"ǝ'S[atask-sync 3 0
`yrUiZ˛-)cortex-xdr 3 0
5	O~vZ'GUkubernetes 1 0
5aWƓVmC=sumo-logic 3 0
16lSivpboilerplate 3 0
2t&Ă:Y07carbon-black 3 0
JClO3%yĐKmSlima-charlie 3 0
f

9vVZdigital-ocean 3 0
 {i4>iMextreme-cloud-iq 3 0
5oZr:Z@ 8,vulnerability-workflow 3 0
`Ɍ]DoxDmanage-engine-endpoint-central 3 0
;"Ql,Mr]s9<5G
Ӂ1i
----
.git/packed-refs
# pack-refs with: peeled fully-peeled sorted 
9659bb41bc0ad5accba3408c4549c479cd981e0f refs/remotes/origin/auto/readme-json
e8ccf7dc5469a62fd568c8c7d554458e32edc110 refs/remotes/origin/automox/validation
d60ec56bd4011ac3a72be1d1fb9b4d3f7ea25d0b refs/remotes/origin/jamf/timestamp-filter
f3f6c9414f78fa9099b0f61902ae729411196eaa refs/remotes/origin/kubernetes
02cb166f5a2c98afc9f526192630b9cd42256673 refs/remotes/origin/main
4aff50b3d836103a9d44bf37be218ec88d707a7e refs/remotes/origin/stairwell/new

----
.git/COMMIT_EDITMSG
resolve issues

----
.git/FETCH_HEAD
b27b10dd5ece68f14873ce0cf49215b1669d32c3		branch 'main' of github.com:runZeroInc/runzero-custom-integrations
9659bb41bc0ad5accba3408c4549c479cd981e0f	not-for-merge	branch 'auto/readme-json' of github.com:runZeroInc/runzero-custom-integrations
e8ccf7dc5469a62fd568c8c7d554458e32edc110	not-for-merge	branch 'automox/validation' of github.com:runZeroInc/runzero-custom-integrations
bce547623e335f1612289f6efbc85fb20fab3cc0	not-for-merge	branch 'burp-suite' of github.com:runZeroInc/runzero-custom-integrations
d60ec56bd4011ac3a72be1d1fb9b4d3f7ea25d0b	not-for-merge	branch 'jamf/timestamp-filter' of github.com:runZeroInc/runzero-custom-integrations
f3f6c9414f78fa9099b0f61902ae729411196eaa	not-for-merge	branch 'kubernetes' of github.com:runZeroInc/runzero-custom-integrations

----
.git/objects/0d/b5750a68ae205b4bb54abed4a67f10e67faf6d
xQj0DS[l+vXJ?֒7)ׅ30o^:t1
gr*-C:Q#f5ܴv@
֓LًPSd^X$2,ܒ}=||oVD[I+\oعlY=\Ʒ5}0,+WJ}@>s k=Q{oWd
----
.git/objects/95/8851872174235a5f25f14e8cb5a1e6316b9f16
x+)JMU01e040031Q+IM/J,+*cpYlʡ^}kզ R
----
.git/objects/92/92e28e21002689a68f7b10e38168e7303e2eed
x+)JMU046b040031QrutuMa^O8veYl'PEyizYyg&wo.?nPVQ7ņ,b5LYiqI~nf^IjzQbIf~nVbn^qIbuĝNQ>10S< 3$
----
.git/objects/92/637e49d73b4021f40994aea51aa871a341488a
x5mLSW#:lfĭa 8eTJiNYfrR-`"_n&fdb̦3dT@ dA]%RVmlr<?O! gLP$!Ӱ<]VJ-k	Vf*d'!͌2&o{ՊA]5ILCR"fiOn࿹Cy? ;qG;o3t>Oz_#|(?65uW_)ؕkvY'Λ&{>FQXL!FA7JeÙ"!g`@A
v(M._mad	#PYeXY׈sfQ)rrN#^XYƹi{ȈD-0\G%/Κ~wU)/"XA_+fqWKC]o7pQı$ohR,e?1<sPqOVB;K5[bhDk7 B0|E2$jh&`O)Ow%FUs%G
2U͂J'&"Gl
cxpefF;Q}ZZ?GD!AA^~glgEu8tq5>ѐfD ƌhc1#$bR`bRb[ͺԢqN>oemн@ȹ-|2X  Yڡ|x5ܤ
Ƌ'9lxhjY[dVtgWLnv<_jKNNM.iX3&<mNcOrS 4(i^5Utm}tf;x+8;_'.'6aA"Yjrp\c۠jzy[
----
.git/objects/57/aee62de82abc42cf425166e9af9c3ee4552627
x5mPTUR4)Cl\څE$EJ$v`rvze7(S)0-X@Gss]haSffy"i+{9_·w3G)I@!(fF`9t?9%;
e)
J%Plg/jօ*cTᥚEO-[]!;{vv~]
sϭsU[*$Fv:/;62_uu?7?KKvP:6|{;؆nԊBb
q

|(8k\~쭨LPpb>UT$,C)Hx**?ic?'rGCad	#P|Q˲&>Uk~	N
Hn[/tG+"a);w>rLY)+_e)9	)%dZ:zw][ycIxv^j<cj@sPy@y濢~[(0?>..pFIV_:.J,-(~Z&Hk\I܍a:<Z(st\͐10R.TZ96?b$`#AÛÞk3N2DDad1(TEF^;v6J6"22Ј1x3XXRz{	thaN<87S*$ϸ<MI3&2ٞ5r5fFVRF'9lxhX(RUbBnI?gX mqÜWx"MGb5cCcK%\	(sΙkմW67AV%(ֈIOԆGΕcrKoN	V/Wj9m5x3;s,pkq[MMY)qP),83Ql	\Bm惷l6:?
----
.git/objects/3b/5ae16db35ff2515870e915b444ff0b3135968b
x-{PLq<"#=yllI^aGiovvｿuAFL"fhEC#cLD1'Sʲ!ssf#$1ryB!Vkwh#{H,wd+%6aa]:ZR:ԙgzf:fVׂ)"tn~u/HdFިf
`r'K
11`=%hK /6M"D'A
\׵nwcBU}`h	GH[@{*&yQW;?JrRNbKxzU10{"2 b!I
$ݮ6˴N2~Dp CA<2Of{yxmjnSUu+lX6/Gy(@P!;gɷC>E+ҒwbnD[
ԗcfZuk}e3/]!0E'TS
E`R.3!_';$ܑ9hBLV9';]#{gmPy}qB'P}0'	!mOuznI7@3U$6V~6}ܠ̷ 3Àu+G
\]-?TK!&L@GF6şڰ}" ,Vܚ]M^}Q" ȐsROroWSWm} Ml
----
.git/objects/3b/5c91b9f2ad963b19f877915162f271384ecd6e
x[SH+l'`ɱc+.ۣR*a
`K:˦=yL^<z{CTlnxi^5U1oJz7++%kz<uQ]嵬Β
VtǏрbOTz)M.߶c	gei%5u]3}eQ7%޼Am:Iʋk*J8WIцiR2
=ވwǻ߆dZᤘVv?ޢO88WHȥLeBhhxVTO֋M
9<7["MnJr^X@;С+N:&%g" яuL,?Ǥ#78yx~gmmg'Z3~GG賹ǻ.Ws7ݟ;4dJ*τJ~$xO**Yϫ\a%)hUDq4p%C*킁)ײx`	>(r/5>I%..eޟL3q
S	5r\$Пz^;O^^Rl@;\JL&?3ðd
cN3**hB6\H`rD>'e^$b`5JA a@kddWiތNojk0{ rCXi=W1E pU~:ɦ2uAfSeJ
=c(
D,MW3Ќf IL*uwo^,^r/JY*~<z{,|faeE)m;=ܘ #CfJ{.U
ښm
)5IBV2y&6;|VYO.(ًgQPU[}uxb53Y_qhk6hcYMY{&85=ƵTyy Oŷ٧Vd2!՘'1_9F QGWаQ9sq@OǑϲ*ًĹr(aL3`÷Gw's l."\KfX?>>4SX|]'wXGE~u֮%=xl@x]TY,1;cB]iá]c^.lak@K㋌Oh0=R}RǱ6*z|cفck
bBt:M! gBQߛH.u s"IR?o0[+`E I
d>히J),"CpV%XTRAv˦Z
ߵz&
1\Z]_ v`l+2E$DC5x(|\Vt8MTMP\@IO49$1 DMp :mCXH ,>;G~cŰ
؃) =z1^a-[(rS-,jx{0B+rV7h`K?D>30YC
b=Su|0)	n$s@)zH}X@Z[m@Etpx;-+^RC6U]n
HgYP11Y-g:9̱q,EPq1v34 (u]ԳxҮ;έi5{ȬY vyk
/n8퐮fq`UI}ZN43-7[4ԘT%Sr7xrd'#Kʲ[^3Ķy6[vSk0nYq*
LQJQֺKu=_rچPl8}7~-@/vgFa8oQ
Cl;hѹ<L܄>ᄝoTWMl}+ cyABƷZCO2H*|뱰a$rawEL>WqV,c%Z]gE?fVֿnnFP%|Dezy?[KZ%ڼX_hzZBϗs3[6(N^hHasdDtCo5~)oh|1D-wRod2:lvhCݚ(Mq=L*l!3ºl̊Zj1&H 8%qK{/9;:DS#c FIebqNxgT6Z;pσn`JSdbFVt$:z2P$_)WG("p6^3	7$֎o>6nfY]=p~XT#b;0ն_mnL~rhz~RqSn2]Ս
)o)G\8PC,-qI['|yl]*!An#<
(jYXh	zC}BK3NhTRG6(D^s\B,PI.J4eE[C+|SjqaDf5ɴ_hxβv>J& E
?|>;`_pll?g<jԙYk:E%n{ZMNWH#kQM<v@{,&W<R)n4bk=&
7*.6~W8z47x$͔+ĹEM/0lͩWC :Κn	Ȝ%Q7[`8˄752!)"dZQn>nJ"rZ %S!.[N;z3P8OXX	Cs?LdF.+;řN\V,f+ňf41>H,ڰfR rfj`Zk@Mxw
űn2Aޘaf M^3Ɲ&\`.܃2jjXb>1/aj0Q;kԸPt+0#Niȣ@6#TɼkYl*cuj5!'8l},[7Ֆo[	smO3o*9YoM<hZobmSΫ	\`BEL&NNdV>#:>	_n5?hyP@I9U#,M4U-jIGhΈL88Ow
/3sg&PXiQ)at"YQI>tJ0u-/%E.XGWu~o&:cҩFMum
5jUp7٣sN>:[8}]^>9Ǵ63тf}X6WXրƉmS.hM0-hEw1ez|hDem΍\Z'5htm͎!W!4E(ҁp92#~g\Cn˨wsKA_&@`YEB=+7L4;"X+zЏT{٥EȚAUܫeE"|#"pHIk!F-+' 
xtv ܂
3g<&"b璛!'яִA1]9	w-U(6Y16Z
wb>Es*	܃ Z%eD+\t-xIt-nd Cw;<Y
Z&9ß>y󮟽#5&8y)/P*F[ve[ax & H[f``\6"Aj̫eΜNakn'=>)w[Hw@*-FlKc'ڣA׶,use~An̿fRcb5lx0&-!<[jhzf`1x1e*+	 ˙i&|J;v'Qvdی!ɖct)٦|wKm-P/9I?1ڸ,(훧{L.ӵ7@
----
.git/objects/3c/5c40bfc4cea8cdb071028149e3984241a3faee
x}SˮF̚)KtMt`~cIn,zӥJݕu]@V/#%@M2ʈ(4ITVXQ$9[a,kL(iF UU"41VDU%%5$Z@ϾDdEJ"MC|RS^H$
V҄0ho-"l
LhwAVQ^b?i)G^)Hwv/<FvǷU)~/-?0-\=_8Z}ߵǵ4ѭu=L_2Xsɏ^oOojfMh-{4vֆ:K:Ue؈#Osuv"d#PVG#kEAdk7I4S]0D0B޹2 ~|[OUi<|!C k96EVp	-u>g/Q;bdֵOqc|5+]6pyQrj1"Σw]kSιY.TJt4BN-	U\yx?y).am}}srIO1݅5%jt6w
Ukˤ來\{0HK=
Nx'?.36f
!w`VfS(	.^;E;18(fDōoKnqQp1ae~b{-4,|)_a2<pp'x.5LZnX};TyN	%zJ~HVĝ"Yg=
Gݳ_z"w&Lw߉`Bs %D*5SM
#*Bk0? Fv
----
.git/objects/51/7b5901b0a5134bd2aefb31bda6b79c4d71a803
xu[ϪF{ͯ{m96DQN_߯mz׾O򮬬Hb^~c(g%T,XHCUP\SZtPdR!IJ)@A5E2M)ȗ)ґ	-]qO)u_ݧGF?*"ʢʃ/^y~We6fE̿*#\\ێ7saa#0A*V8*ѽ1c"|`A3SԞ2xZeӌ̓קWzjF6y5
Mƙo]^@u|ݙr rmlwt֢Fv8ԻX(%{gz%ѵvW$N29a?.N<V%W.]WPR9#4[;okr%h[Atʶ.^>/!f}:誄sUGߟ=&NxtX9F}ԭOD9]~Ĩ
o%{U쏺/
:v5ޞVZKy
u[+lsSW3XLQ6=߶o;̱y/[<Ҁuq<Yz@PؤX5xXtvHjfRpf-Xn{mȫ{cEnz4s_R@aU$
l,f]w޽u5q:+$&^n:*{ko#SV ܱ)ä~<ҁ׷o=%~	Y
----
.git/objects/3d/a1ec9be1f7e9606bee40ddca302fb29e35352e
x5{PTUãidK\څ!.)c;nٻg{wݠBT`
L
bAI`1LXQfA	$!m:Q̙#p)@!+qɹ	KS*wӛlBM<3{̣^nJPe,,lb|f%N*\
'YjIS~C9kCclUHMuNn:6 o+o6麟x}Kg6Y(wLcv:QYL!JASWm++YN2DEBN2LF_ݥ
S78Gs<>I<Eu?Jӛw][dXN@a@څkOwѮ6'G+"c)S;?yphՌor<े2` Z6gw{*cITRԯ/bRA5[nŅIѫbhDk3 8ۢ㲮]te$͊i#%&wB`ѝ&YpiQ[?Y#~F6=$ |=VCxkdcZœ"0
	rF`	cğQ<%ݮE4!1&<V3A"F ǷMu.6^{$`.-<9o\<Y/E^uu-=OcE
<xmU5ksYelEa+G4cbQ?4iܪM/#4U-{a4FŚ0	)M,jlWXewHѠaŽ
}a1S7˝=cˀ!zg_ۃЍj NlF1zLaIHfOGrنSs$
----
.git/objects/67/73d4ca731030284b72d0f2dcc3321b9d1ddd4a
xN0#^	Dd.ŎucAK˔ߌF3c^Ys%q3{ǈtdQcV*(3G^s2CiEUιisnh9c	]ݸl]ʅWƼ<m@t1T}|uH$|*__oA}Gk2
----
.git/objects/93/2d992bffb449a65a534c2bce5ac149075fd248
x[SF+vq`yg*{Us .GTb5̮h~_<ؾ[Zͣ<lRo_lmeR$iWeURފMˢGJɚ^d}STW{y-d,{K{Uh@X"Þ~TRtsM8+$M+=oK.$
Y51u6T7(J8UIQ$kǆyGOWۣb(zĂ^[d7}2=OY:x4ZgL౪+V?|E5MTl>_?ъ:\P<[ir	MiꤪcZB=ehǳJu_R:VOFG'1iA-no#ޣ_Y_ىGvv}6ח~xd(rI5Ko{*9CýJ&J.-\`3TJ$yg0_W^^\$
Xo^{ۢ$azssJ^QiNɀXu9G:Oz `iFQQ%\1!D
n3#1}Z5V&kDG}[isE춖k\f<Zu(6׵MYeyݏ^%D.У2y-1aiAU8(r"5#--$㠣JJEͲq9.d7B+ɾ2FSl/Ji3bpc2s`VיT5<kgwY7,$y
!;k8
fX|;_RXـg0yED5W;ۮ!ן7X֡~a_YLSЏ)s^|מe&tk3fѺ*ްѵ;f!;|hE&|i{C*`]AE=
b?D!˪d/21Meؘ/v̔8c?|s|}Bf#BQլ$C3:%o#Lևx6QQGf)kIןy-P&^Y"KīPWp`8cG8'Eg0=TR+|1@`0M{6Vc#lrEV*f9H]P|aY7)Qa!q_,m2Q0 pȠ):E/~樁Ӳ@'sqT)%TgdΪ&{IJ"nDHapTd1@ТC5`rjIӑc;A=6DEo$)bPF!`#	^!	;YDä'y$1F4݇];lF0C\m
L84+/ƪ9GY0́>!V`6  V$cnuj[>nlhM5Xt=Po FhEN9zCX10	> 3P;B@֔$p(EaYS /4_DO
otEųW
c&ꑡkOi<
!&&ђ9=|'CnUJ1
E߁YBx=mgzi`OY<sZMk2"K16XT
痽5ԀZ`>>O̿J#ݷhZ,qBi}g6;YdZn'Af2,5lke7h;vndZ!#ǩ(
&(%(esM
%՚rPl8=PFoyw`_EaY,L8'˨!Rp=
+ OA\8Xp0!UGac 8AD4Fm"]k}?4@C|(r
 RȰhRW"Cbdkd8+Yi1nUnmc3;_n6@h6/hX/`ysc:y@v6ys=o.l=?#=as)T镁f{,\=GME+yKӈ!j9W fIAWF<hц(5Q[P{;THCmgs'ؘb*MF	@Tq.+0}_rFw|g8G 4 ]\`) &@w4
D|8+7(It:~HASbP,jmxz$T4[{
en44i2drRscMR
-[aٖٿ2͇IbM_t"V6mUs]Á,F[hK܂< n`ETI	ꘀvAi7Ǒc&h
M,;B
.]D8Em<+å
omP
=gwBQIx`%2Ԣ`w
OU-.hVpL2sM<7y֮Gƨ E
?|6=`_pllg<jҨ3KЂuJ~n:xm+!G]3ޏoc1,՞gA#61	ϐDf`Dxb/_i,4S^f$5 5A9tck$)5m	Ȝz[L(-0@B8e؛UIg2^5ZQn>nK"k9+Z2j;%vc1u/5k=?aan@ceg8I4Lea{]MQ5]J#G=hAZqNvv	<ذZ&ө0GJ-&ō>kB.dtt	29fqAȒ9Lym	]YIHxVyRzϩ÷_V{h0fHjC5s&e|-ɱʚ#=yl-[G&4׭nK
x#5ntL9m&PW Tp)`L.2L<)Z^Ia7ݣf}yLb2gp9XC<SLtwІNߦPvt	ݽ尩@=lnu
|8wt!n{V$<<|ًnkABƞLV-&ݞ5r]c6<EtyC:js38"7}R4kvoz<c4>-f/+"s.136o0EeԻtZ@f|$d-N"ue@+\x t.R{#ȊN35 
@^qs-҂n#\| ǀB?=hEbD܂r?@Ђ,B?`a/4BdFӤNӧWrPQ۟Ȫ@kM(ڲnYS1 !Pmt(np1J{beA34?}w˪偾k$Y}g4y7`\O=(<t:]I$@l	㨛ܘf
E?ZK!+3v B>h˰7>Zu3YgTN` ܊^m/ι<xjwLͨ!$ْqZ!ܧT[?Ma?$ǌ6Fi߼=`r>J?:U/
----
.git/objects/94/fe69a0f9a706b1870573a69c7d097a14d6ac8a
x]j0ڗ]F7(dMH@ҌcE^@(%Rrc[DLa|$1XH1'-ҥ1>Ѣ`aD Ej$LZ&ӅseD3RidB;#
{R2sn4/&,8-W>m;乄<77itFx};U/
----
.git/objects/34/50a8cc94789f17535b31e7e766b3810905ff9a
x+)JMU01e040031Q+IM/J,+*c8ykBG;p6y`f F
----
.git/objects/5a/a04d67b15792173ec84cab4f9dcd6486986ae5
x[o0wͯڤCDiAۤF׃VAI\,vZ}v!m<xm/0!vzW@FBHuEzՃV[]
AAy}tF{6uNu\>.b\YF\	"<FgRBd\+mvLT;DN/^NRjm@Pp!!\eƘ/[)y
2Jb;J73fb#sG(JTl|3%7Cokk%Zi#rI
HV/<X5}Cz"	+0
Ρly55/@V0(xh@GbƢ*'fİ|g&0vRW$K:{៱Dqd@!ʹ-Mpw'֒mykCِGtQŖ{t{4Cᄳ)=Y'LyL%1<h3 =%cQmSm'P4%r&w?_(MRmywC	wOnS a:е^irN3;]dDVٗ~jɓmvU#=tP%B)W` C:uxp\5I/4("󹇞cɌ1n[
h@3pZiQ~Ȗ"!~d$x2_QAflyEi/bz(3X#42[EFKє",Lh<wGm!82|~I`6%~:pUrUaxhzn)6T IpTeEzW/d:
----
.git/objects/5f/05c3e97df35958580793664f6c069b6efbd2df
xIj0 s+hB hiyX ǧ *(j-Zw"2zU-L2
ʒ:<}:~NƄ] %"bryG?:|cOo%js:ͥc[t_ǥcl3RE!L;y&b_sP6{.m~_i
----
.git/objects/a4/2c8427f1160f2d4ef73d3a8a58ad686c142a53
x}ɮFE3+j5MAl0`cEcLgc_
֖6  i,
"yq0bI.\`Id^ ǢC13L<fry1:ശ:/ƚ\OVDN@=؟_0v:g_d.%IFF`~ןzZuu~}a9{X8:^9EN
&QE%TT4h*UV_,.gǷ>n
P)EUnAꟍp&V89cM.u^E&Z?f{mSyy}{=vwͧgv.!O=_nbR+W.0.CH1(?5'#o红6ĬZ&(+r3*fsJ?vObpw
MY,ӉI4^o
9'[y}pUç;s^femŴzn7GE{EJ{Fվu</Q`ji eGzqtgZ\s
7bp;8}n4J><iUIGW%cvs-HQ͐J$«Hv!\mi^ĳz=N$ٗ6?I]&[,i	(-ymbgrZPw%uGw
Z瑓˵fN13!Z/9Wך>J,סq{sRgGa^S@M{AEO8_]Ru
----
.git/objects/a3/f457a2229fad877d56892fe94f17b88df4fc20
x1K@+C2;=D<A-b;lL
A[[_x/iE:LHBvB4"d-v誅
15FqƦDS㼱ÁI*Gl
GY?xRzEϯQ<AێSt?i>$VqV9Yo/sT}k
----
.git/objects/b2/7b10dd5ece68f14873ce0cf49215b1669d32c3
xuIFsS_hvI476ܺYjӇi:zR/n
$NEX@ȉN!"J2ĉ(''TzҌ D%	)!J*ǲbIAxhr`$bIDHf8
McW||C[(	,#Ze`W	MۓdŘObY
EV?KwGp2vz/x
XSUMWUOy4	A^SĮҀ4Cɗ$S"'<5WFMk#=GLG?7]C,{cP 7cT
I>]Z6t_|ƛoԞVa8f`S@Bp5eOJf$^~^mPZimˮyF,-.99>]9An77]61y]ۇ_y.ۜB=<c+*;:nީ6j]lw{4K՗v^T%ϕ/l]&
EB\:zݐ's3:QKO@?ZM=|㳈7yjhW1!X$V?MU*fA4po]8x4U( fgÃȻAT=Ӛ)i@ܾ˘zjke2 BL̨ZoagtZZ0>^9)P;}^-UgDPgtSU<&2O}[h!hbOYZWE3Gc6d5]KQAuomka%'炻
----
.git/objects/ac/a6d6df524154f75eccd2da2faebb67200c487c
x[o w_r=4=Lփdu*iJ!2M7ӸX5~<ؐ
ޛ_{u2#e{#;ƽlx;uOONO7ziؼ +mw>3}r(H3"U.}j>2U̚`$:ԃ$ss_](
+DRiڨ*Ijx.8uz|6wߑvI]mH^؀{C@m([g>=ppYRU$BӴ:WsNUԖcj\a
I!8viLX8H+d@[;7v']QF$c@_3_]p*ܞ`nmpM*[okp9ԣ*+Aդ)4#z22f,kK6aK.ȕHV	YHRJVnWU,z~fw	XT//eWXբ-`[YgU=HGz.$srΥ;dKehȤ) r0CUU9@JQD@FrML's
ix&PvV F*.[ì"T͈enx,T%Fv[HR
8A[ݢ9g<
----
.git/objects/ad/f3266f70c07f0feb0991b332f8cdcfe2608874
x]o0w_aq=L&C+CI\,v
>	$-qI9<r8.?| 'J^fDӬ3@^Y|8^Iwymk	ML
e{.bՄq}77!dQ$3$E"zIp_Rt),E%YuK59weMeԞ28-9nU('LD£|[mܭK*M3dzKQR` m[G&잁Z8,U%e.љtW,^Ieؘ[6̦XN]g{
$ң蛚.Q(_lE<ֶa3ptR"eKKRl@©`K'3p{ʁŹe}]IHOTM~E3h(<sϽ@2V$ym uLܓK=KAmq_,@f})-H8ӏ,\v}=:jfQZf*j0-#opz\=o49G2h,LCf
]9r̡*U9@JQGBJ%L3udLëݴnal50Rqf߆fuj)2v@\;ZS'M_
:#9E@jخ1\%Ff#[,HR8rA[-q+A
----
.git/objects/df/da9a0042a670412872d289142a7ee8fc8dcb6e
x]o0w_aq=`mrNS$.uql;->	$m<p(sxpb\a=:(yMu`>
nmڎR>.r?v&컹	! c);NbǕKe!:)Io^a--n"(/T$9Ip"Ga"J]NNgn֠5nwd:,4;ؓ7,i<6YDw\aTU02	4+2N%mU;}&acn@@3;eA[sFv7
'%H3G[373]"3%H\Xۆt>EB זt,-HsG߳
g()fHNP3km|	.'qhNs =
gRi
͉Z٣mX2q
ԝ3qG.|,y|m ]4'1L?2_p~fwv_P/p` T4rf׿0KTQTnqy,@ׇHvɡ< =gDE`ҕ4[
hD	;pԕce98)R"<_ ~T"t6#3fj^iu
fM4644 UiFi*4HѲX>f?$m
uN+2paU1\&f#[J-HR8rAS-lA
----
.git/objects/da/52c06410dbd099225b5bc2a290e45db707d649
x+)JMU01e040031Q+IM/J,+*cX ǐqg._;]ǣ u2
----
.git/objects/d6/ed319a97bf9f996adafd53242ab662ccf0a619
x5mPTU#Z$5kD^Օ7tEJ"6W؆ѳw.g{{.AI
S8:+NS9*2
6M3`JJ[DVT8r<?G(9;[
TJeZՋGae9ݥlhkmS+OrNZsCuCLӁEÞuo{Kg1]{UzUm |zaB;ӥ~oJ&oht*>V͞A1k03>)Au?6
[{o"oR$a"A"o}?x9ߖ+ܙ˔
y(i;LK˔lyh(ePX@̷V`eψ{jwdCx)[ϯ,Y{\ѹ
_wߔ0ԛA_\їWה==c}5*BŏEh9 ?Wց{~o^ԙp- u˖Ь
jPttg1Enm#G_FK6F;YpUףFe?b;6˴=u'Rfd4!C"S[aԍ=ccؓs%`Rt%G,1\>dvTːh
I"
qV=fHшyȀmS:2]Ņ56;q ۮvOkrb2
:5!гGIh;D5a?hFVk9YQXIσ'VlS'K(X1
Ts0&ExR9dAYKھYWd!'k<% )`q9~nq|:Q2.'!0EUEx!U`_||SP
i9q>[
----
.git/objects/d6/c14f2cf86139575bec2a2d39413ae42226f631
x+)JMU01e040031Q+IM/J,+*cN^n=d·T 
----
.git/objects/bc/e547623e335f1612289f6efbc85fb20fab3cc0
x}MϢHgͯdm"4 ~ @(B_Ln2w䞓{Or0mA@o'Ȳ(HSfZe
%H,\HP%=iyY*d|iH¹g2$dIWe,D%	
L)PR4UE)JU("J{pj҃EW]P**P1']=}+Jvo6s+<}]qtJSʊ|56`alcXsp9u_5=G%ֺuw=$}:fJȾ?:9k	Ju]_(|F~zcʊY#.lG(6.BB:SwŅm($hgXҨ8`Rx);<by;tMͦ+SXtylNa(Ub^gT 9%[*ohz}ԹAީP$6fwfrgdJWjq2q`cZ1.xF#{n/Ip~s8"Z9OLt	Lt^VoRnғ[<==!Oh94x+/uIQ܃ZDbMWtIxSt4ʇwsנےB+yeQ^"˹fZa-ҰAU'z^G+ƻ{FԘ_xW_O.ovԩ5v0HwkE2wSࡹ[YWIUfVhRn-s[ls@՚Ƃ(	;JŁ?z?6n瓾 >%^HOW-]02&#P+a/ӑ~}y
----
.git/objects/c9/869a3400313e02e80c80e5ad3fed4a5dc4086c
x+)JMU01e040031Q+IM/J,+*c(=CRoׯLL϶;T3 Q
----
.git/objects/c9/daa8cf6571414ae8fba69bd560cd63911165b3
x]O0wͯz=7*zNƇ݇&$:v;P6g;ib=Isȉc\w0x{'J^DӴ3D~{ן{`;ۿԄOh&2]c	6n:!dQ$3"y,zIt7v~ZX"xJ
h]wEy!i.")N
e(6<Q8jr2>tߑp$8cVGߘ>! uiҶym ]H`QeiVdKڪdwL*ܲ|5g6
0v2Fw$猶5
'%HG[37f5N8H(Ғ	|| @L9=L	jF2t$i:
V}N9QK4{`/6mX2q
ԝ3qO.T ,X

$ld6#K!hNbƙ~B_euH_ϩVKiVX.`[<6Y'gUݓHCyzΈ &b=+ihD	r0uCYNrׅ1H<M'4SJs7m0Ar
.\ѷyYuN3dag@F\-cHb۶F^D"]keilv	R$,#4{ Z
----
.git/objects/fe/c4b0f3982aab625528e342ec0adf639be204ae
x[o0w_aq=;LbA*NS$.86NHi7y>9!2F'_u8Q&%!zc;4<<ޯ&|&4]D3)i"\PM! 1c)N{KƥLĲi䔤eÕ5%ӫ"&2B\\DbO)N
e[(6<Q8j:OYjfkp$8c/VG߄޳
C@
ym ]H`Qei^d%KvUBTej=l`eW$:g8NJ8WHvonFr|bK2V&̌|˄--XZ:LW7(x i q5Ν0f,sMġci=IU3P jO3~y,І!kxwu;r)GOaRP a5k9g	}ˇwv߳7u {}AZK(-avDHef>?#-&(AMŒ	{H7l51:'s̕+rpRExdYh1Sĳs&0Js7:P6*|FJ.P<ݬT-`EnJ;,
T&&fØ[J-HR8rA[y6%
----
.git/objects/fe/b197f8ae3ea2c95edfe1c04825e2583d7b3c7f
x-kPLaW.rĊO6$BhQZwϾw=!k$uDf|.˸d܆iL5$a	!dy<yfGHBn
G@[w<IqJޒŚm׃~5W.Q;Gl|Zؿ.$YBY 5|JFk%3qYQWkbY_ndۆ6rC_Ca6e~ƖmFGóh(32P@\[Oʒw/*zQzy{I}8JrRN/J{b%kV"2 b.IJsކa*qEh9wKk?)}j&ܤ
K+Z4+4 < 8.p?EgebnĴu̗\[US{+DQ]h.2N;;$`#C`ȋW`O&$,l3ka_Ǆ9 9hBLV9'\󫣻mTye:qB͏SAExw?I
k̐p̌P~ztZ$U"<
6*ON}(	b>1s,jKuH&Te<@d,b4Jh=cjuUD䰝JBk`e?sD33XpQ99f5)9~rVAk
----
.git/objects/c6/4cb3aa3f7fca8a8b5ee4fd446cdc942c33fd86
x+)JMU01e040031Q+IM/J,+*cxyϜYkLh 8
----
.git/objects/ec/8cbb265970467c764100b1a2c7f32e13af6110
x+)JMU01e040031Q+IM/J,+*cXY-@=kΉ~=( 
----
.git/objects/4e/564ba58a99ac8680f78c01bea393e6d6cbee2e
xAK0=W}4t.".A=I2-lN{^bQ HakӵN3
H1oE;np)u}jZ,Stz^Q#ۄ!4!iQTGpKQ<!'em\x~5&[vAX%.aυ~Мt||>ol
----
.git/objects/20/c9bdb1d0d8da8983cf1fd4e7e76446cad34394
x}Fs)*GjЦYR`xAw/fOOfrKE7}%pSU x^:JBJEHD(R%T@PbaG,1X418
]* >\?!TȒD(+0R$$b9&7.)#YH@~cOktQ_lH+n /	r8Џhdv_m-y$}/?b;؆
;R=`JUWkUuVξmБijGt®*J0T^HEgN
gw[
.XʾFG%zEKǀ9y{p({wJ
Ox5O;Ƴ-:m.r|ul3A]EGRd]pbo~46(I^+YO8DĀ,~'~vt,mΧeNs*ϺWvdKv2;Ⱥ4lRLyEFjM٩nwuY|SܯLUs.*L=vL}d=yϡoܞ[tNG4?c6':9{}g ^ZDDh[cLMOkKo0B=d*e"ۃY\Szݨcldq\K	s2M6.2TImLoYPأSAڤA<}o㰥ɮF: ̝%\/CkMfQuW>6Ag;;|ݶP-y(L3{y2?1O Mh/1iPti?wMӮxQׂNSQ\6#Z@	? 9՝~
----
.git/objects/pack/pack-1ed1b7f80d364e27eaa7ccca33a7611ca34dcb54.idx
tOc                     	   	   
                              !   $   %   &   )   ,   2   4   6   6   9   :   <   =   =   ?   B   E   F   J   O   Q   S   T   U   W   Y   [   [   ]   a   b   d   e   h   i   k   n   r   r   t   u   x   |   }   ~   ~                                                                                                                                                                                                           	                                    "  %  &  )  +  ,  -  .  1  3  6  8  9  ;  <  <  >  @  B  F  F  F  F  H  L  M  O  P  T  W  [  [  ]  `  a  b  e  f  f  g  i  i  i  k  m  o  p  r  v  x  {  }  ~                                                                                                             4Z%E72)i`_H8$TcA㒱d:AԭN
{/ͽk*N1I{Wa9^boZ,&&0B%fs>k׽-:
푱؃JXڙK*5|K?ɣuf0ZMOYA׳d؈
l
3]`
 ~>mVޟZ*!XU!_cX3|@E	AlE˞'Rp	yGZ5J̀)Yi\p	C(
 F~owfj7G
'ʥM VM*
G|ZW➇=
 $z$h'{lk;kF;8fW}1r'@
_nP,~	ZBfnv?#C,	Rbqv\h@|2
~x~(W
^.X}P6"1.eyJ)S80,fK#@<A!y/h~=^9S4*hk)0ˆjJ ]60[ė.D,fX$,-­}[{Mb:9j̛`/5k`FSCZdCV0k#"4QD(cAq|ȫ|W&ܒ
e͜#,HJw ŽK@+Un@ 6ȗH6+VT}:Ge2J/bG^5t(dCERf3Ӳn
d4nUK6	K7X<+j(Le1X%db
:PE+Д^Ip-TX=|yn]ItMJplXdlGe8,FH@Mܰ]2Ă-?
Z_~?DPcG^PԐ_}1kRe#T3	CZHjjD!q 57Di_I*b"|qA6J/1oK= n*Elm)XNzUb݉+A﨨@gn Wn
z;hWr"f:}Nr
#,z\RCv}a*:ޮ
r {a>ʋ_8Lc% "Xܬsx7!+n		 E!µ-ZaH@fIL<+!a?]x_2k"=KoK逇l>*"fV<cR6\"tX!t\B
Hq#dY;ÑU$:*
Um/n+
,O$vp1#vsGV?_t$doM$4#$}KZʕGgD!&G%mL넳|[#a%3V?;xVqD%o Wejr%s?oN@W%66'!UYnIcA&CKpQ&֩ܽH~ ̳'k'LiD"~zc'k.sc&=u3
(ѕҋu쨪JJ;JI)-M}~?"%Q*AǨo=C*.F
[B9w3ɦ+^zJVYj킊*+oq|&,Sy7@~@v 5,tJB|L).D(.(P%uS-MU2_.b/ę9Hj/Pe^ZՇ22Tf/ylOP=/3Og5+ CKA恙/ZXlru*0>ds:n_9 16lSivp1t!>nC2I	2`e6"ڑ X3jG Ж\O]243.q`2S<t/XU@3|{Ƙa=Y`4Ԭj8"S'Cƞ75	O~vZ'GU5
}KR\b&g6!lJ5Ÿ.qq2q6`VcZˉxmqx6w+uKʰ}]^e$f73sw#?7ZwGÀeud=	37lj5sBUΫ^_]7(h5
3L$ĦuO9P+\ $ٽ2}H9^_2s>TjqbC:~"q1q'_p9Q;"Ql,Mr;{[HzL s#;҄N|g<5SS)`Aֵ<s\{(o{J <, @)zc>,,<ɦmj]yøo7oo=$@mv6IJy>
<p`Kl
<Mޛ@\JHt\iA@dLSmޔ;vMp?BB<<SGtGneBM/HTBj б:V>PDKddH e2QbxD&dT.auElAOY/CEd(rX@#9$&%Fc|ʨ2ZŲKqHF,8{i姿vvbG*yK#۹9:2G`0ĮJUH99}9w
h`Hofs#-5<Iڜ-<	PI݅Mxr%n8CIJP6:D7!ȍpz~KUJva0s^vO|
Kc?27fwkKZh׻/a1%fQ L{C"!͚ؑt\qT L맢Jx_صW@MzJl$tM?|D:hNMMK+A Bj;v+l<M^d;
m`:v4ysfM&bOCӟ$'@zKOMvLn/1YG'WgrQk_GXy35ѐCZzQ<7ctɫK2RsV8~RԁhPI6ۻt|[SoDߑ(m#TԨ=zYu'DV(UR_uאdrs<]#Ua螦W<CLg}WI^7XBQ$NWc ,B0-dXv|yX!Dhx)s}+YV}bi]=HYQ~Wl6yZgYБ Uw=Mmf7Z4@}zkz(Z6T3<
PZۧ30Yl>J0|6[g)7hJ33c[<H8?ټ)<[d$WnzI0K[xvo갦T{U[̪gʵM)cmm\B gexaDu
}\hK}j7rm\kq l*vXE}N\;(htT )fHE+]'j⾗Q&Vxk]Id:w{"}:b]TS2KL/}%^xGlX	5^@ݛ$}zz_X)9:?nhRhM_oja$Yδ6VZ_Z(gmuKQ]`Ɍ]DoxD`h욮憛
Si6[`y7"(Է%E:)R`yrUiZ˛-)`?:ܯI͘Ap["?aJ\K  
+u-aĆQu򿺻!bw9+Q"9!8\bhnS!Hd<6"<84&~eu"/։a3ng-e~bwh^a:F&1eRҴѽHX~zz#e]m7~EJ(e~$1v8ŧ^eciXiqiFfXmp3".rH~g]їfƘJTSa|ڞhJb9Z}hvgk5qR	Yo0y]kY3fIkak:I@TC.01lQpEe)^=6lGzYmGhȱ+zjWm]ַUA&vӱm`^޺U~%}mjȰAe=:
m4yl-z9e\n[alG{'!13n.".N-]:x0o\gV.c!o;"x䵮% kջoEԋ~٘|p|acݳNpنzD{+XjEhpuY{	f'qlI ̭\dqqCo7IrѿzkqO$߳WHUyq/{ιo+n=rX>s7~ZB&ss0Aj&2t8Kpzm5ty/$VzQu1tLS9`)%,zOt-1uY[z4*,tto׬>߽\w놉tO-V(z'
<vs@{NbowR
L	ͧ3_Awb7;~xOΘQx7XE4&f{t8kxTOpO;v6vyGN&aT{zP|%*]{mBif_[v"|u+gD&|"o-vHBRE|R9[Xiu@b[}}L< AʜЅb~QTf`'[35Y8&KXF~l+o%Һ YaHc	?20#1ǲ@']q  u Evj>[L F<iIPzu&jRÕ2Ǥwv
[8"+'ck[!|gYLCj֪8+1NVZ[-63*/
;ĝhlͿ=Q^GB-::In6%0}l[ ز`6탪Wά oEA_mBFmH5R-}n$,N(B8#~QbWޝ?C,?-Wy^/]+]q#u88~m$Zצ]w4CX?=RPTŏTO!zz6;4=W[pSG,L7؆il1%kC36;in,odE[]Uے$GeEl\Vf"~J|h+߶d.fg=6::=(<JtG8y`,f|fmu|5֟K"q\jܙHqW-iV.TtM9_PrxБ;,Q/j+܆KRS<ZìÏY,`{BFG:`^yrYa]Wt8>]rӓluwHל 95D'Fo.]eTʈ>ӕ@F.PMFpMkE;ο~.s%I[&>Љ;a?f%YA
լˣ@EIy͘iSxe?g%>i@NNN-.O m;
XvyMJ
jۦ?栫hzӘ٘2|1[fG=G/sM@
ndљhARͽWdOݚ`20ExĊ$5C+nc2yb-'_SP
FH%rev\vWH~l$_L6]R&##Ul27F]~T"/Xwkp&}| Y	ȟ4y*r/럗ؑ"{%CEIswdܗA,$
vֽo}hWӠCX{>IE<F5)TI@Y̐G}_HvjlעV R)ƛV9K/n ta=Qۥ7_@3LwF:ޤmeM#<
Vr");΀9He?YO,eFzIO8L<Ψitt1aW
pL՘1w2Hx=4!5^$cb:W?`dxBwe=ɔZsm8ܟD}v΁Y x91onuh&+b|aҵpYWANj37*ZbVh0&4 eAĭ|ev#6k"YTˬ0tҡNozv١<!I..F#mBA
;k `lyDH\7l̄s&!Li蛳G+cK[-7nk}v"DNuq3d +5UEKLG@4WBx۴<aLXωvV~Fn+JgX7da`$µG/(S
c>KT's~uaZ+⏡F3@{
wqp^~e5aWƓVmC=	c:1EH3Wyv<ݗОc0IWKg#쐝W^aGY{Ѷs%#o,z}.ܷͅDu	s4G;u06&ha}@-t$W~
3Ɣ5ΓyK9!E48ڠ
Vxڿ~;Ӭ1T]l_KA
gl8wFdn-{r-|.4s.F:EE+(=6R|8J968 I T
<Nva{W0e۰.QގF,[*w5 }HSPRʎKK|XgqA1kG~"Qpzst&YTl6QS=7t|ju`LͤĶ:+qu#*DqEl@JI+i/c*vZ5wá"`ť+g<'e:ŻќݏNΞ {i4>iMqCXU__k1wtǖ[m ܖLmt{׆U1ot_MKx&?b*1;+uFȸ5jT|aȭm3k#źb4GwaJ&8{V$j#1 7bʝ&[/	-<θ_۶=ZəS
?Q(#Z9w{#-`fR*n=wA}C~	Ç~̄պJn].|1̓w0vtMl<vXǔWf5ʋiӨ(Y:<R5[jE){c;GFF-ƥ	2z78C+KAc3krStq,GdB1W[T_O]	60ɩ)XTݴf|0
9|yDVa
^6o2t&Ă:Y07МaX*Z:raЬ0wsOz{d-rq;Suqtz/15nbYI㴏dvvх~ăۄ7ne3ݝ\ns'+ң׺Fv
E$b  9:%,[UfĜ<9ӟ;٭	O	U0i3K||RM4;UeXxg,[̀c]2OoDkç+M?~]֯pY!U+Y׈X^\O_ܡUלlXr	OChC
*h0=^4;N:@6Ҁdƹ#IIb;;^ժgψ]bUJ&)
g@FݩYN;Z? Z۪P+MTV۴4uh>PuT(sģQ: KY{v(S,lg/X6E4 8<Ԛ1Ebv0Ur+[\-jzf@7S8Tv*e&&JKѯZCkjS(-f3Ǯ2g4T!%mHpIX}JH\>aͥpw8{BďEp"52_[_ByG	j#SpJInElJClO3%yĐKmS
"YCw{"Ľ2ފQ_<wvf)>$.#tT!d|cFD[#4AI
hY%Ԙ3Ti/hTE2^#kcduxm.|eCaWWo ׷ͫvtHql#犍-붝ĉhz1#ff	i#W=t6"r9GC $y+d|g쉶@Dx[˿xuF	M
TFsNQcʾsD|('spGo=;M㶏ޑ3Oncnf

9vVZWy%sB9
0H!4"و<ty-wD%_\@%~olxKcQ[bZ4BEEq(^7ُXN#OO%Ap`AY 2eGGJ،ڠ?zI_(lD
\(Ⱦc1jMQVmC1!nhKb+dnj$^2IKfQ<( A	d9VoQAOxrn50sԼ&F{aH2.R²VϕJ+\Gh:黟;	ߊB;u	ihg;e6يfgdy4!}q|`͆br8<ws~14>OcYפK&8,q5*	QC+
vC,]nOFcFmQ7dW9.uaėc)q>&!:FRҩ fCAn:{8{`c	Q;'>fl;y_2 CU;^F.\NFv;{&\b؋o_$!&>DX핅&h^8G$zHX)#qG`eL
$`shSA^7däp5`1#kr6b&ݡ3'W	!xe6Y(5X^!A9_qJO
U{|4בP>_0B=gI˪6JKv@h#ԭ>V1'UJ/υ]ve<.F
Nƚt~){TJ7eh`'?y0.޹(7;rÇw5-	/Ljf)P|%$D> !_ƛZf:runǴd}aIGuX{gJU;16uB\H尳ƣ
%;M[l"_%*L vI
L
*"q,,Q;	[F9m̗b%f:>8uȸߡDncOLO6x	šHB }xIה>ą0W@e'Ts0'N99t:{K@r]%?8#W<6̽Mb_o{LC8zʾ޹!"}kºPߦΞYg1oLF[ 2mPh<V)mTܾ,)Ch&k/ ,8[JR~H`5g~8jIw%9Y'3B;x'8!hRʡe&VBsXn(/mr`sw;s\ZqEE38s4oeB=jdNF
\O?h1cB0Sc7?7(<7Z/}B,Eة 3Wݪ0i3)ώ$>Y"{
ݎ.M#vNma3᦬
u8udECx#}=8/~c4]cv3%S6R TA v
KF	lh phGw&|Le[ٴ1h@c}[~=ʆQҜAwNIUwV<lܔnYA7	
"J :f?ڌ,wg+%
A58[8@3IqgYzq۔ E ᩵aw
YW$/r!Z&\2,UuÚQB|){<3}{^w=?|O
N1IdGi6㎬%h2XH$K.ZΦ%,Y)<%stTfm^½eg/]AƈI#Tmp"tdbZ(v+dD&g'=UmM\*rҪ?dL'Z_<%n=*NcR<FW(I!wW
cn-Smd])b޿njDԸHŶN·\J r6@vhg'_v.#n?S:Yu`)=<Sbq-=`{ vp4YRvӥ̖)Ƃ[VfvHi7Ķ$.n{[C?fMz`_|\6WIZ-u4?o"e;x,qXY7$}ϙ^V5ʐn+'m\6&DװCª/3e#V%[96C>N!.44ڋSp 5v\?s:[g
$Uͺg h]
xUe~g`ƥ.8YTSlVՁZs7.e(#dkz]FuY)؅iCXS,u8C	byKN$#\Vd>:2T
>2*'GesDFgpM-_h:3"]ht#B
i3Qtc=6Ɨ3wE3<4zx'L?
[OV@bgml<jV_R
Ŵdu!X.of&ƀ	Tp3jߝ2c9,0-榊N	aThi$ϊS      M    &   ( #    C  y7 %7  OM    ZM   Q=  j ^   Zy 9  %" $G F     E? l Q  @| h y3 B )  G   K Y? b  & <m  n 8# 5Y  $ <! T  y   SM  2  eZ   [ R        78  m?   Z   "  S 2  87   k   Q1 K H~ D    & {I 0   X  p $ C k  F . K  ; = ' CO  S y  ~ UY  >      I  2  { n  \   ͒ ظ  <\    6( %   @g   5 Y F m[  ~   Y 4      5 ' O(  a/  -x      9  , p L  F [ V Gm  $  g `   '      r T= 5E    \3 [ H    B     =b + Ko  Ȱ 4k  Y "   Q     9J  j m  
    J   B  U     5  o   $  ' 8   . I U 4?  B  9"   : u  T    I,  R  S  Q C  \ G  I   P = 8_ A  -  * 9  \   i   G H = Q  , ~  V8 N :/ V <  ^   # 8K  W 2   h {~     1 / / "Q  m  [*  U   5{ #6    d  6 t   } E [  x  Y 7 J
  @ P /  9 Pn  "  : 8 I  T  z ;   K  >& <@     t 7 UD 8s vY B [  5  M 3s pK +M   ' ue W Z    @  96    :  {H E 	 5{ o  q{  j  h 5] VN n Kd   )v Y n ? =4 3  I YW C)   'H I   `{ R  Z @  @    t   B  	  2X +  20 3; T    ' :[ 
h 8  D 9 >  D%  / /f 8  U  T  P Sz < Z    
  "y  ,9 
   . *$  V    u #  7     8@    E @F f  + %G   u PA 6    ;   &  $s 2   ;  0  i R _  b  ?  S   pz  !e   ;U Tj     G  
c ;   Rb WC  z  1 K Q  y Riѷ
6N'3aMT-`k! OwdX!
----
.git/objects/pack/pack-1ed1b7f80d364e27eaa7ccca33a7611ca34dcb54.pack
PACK     PxTɒFmc@,XrP@4PھOc^ddxU&8(2\"Hk`2*uԊ-8.%Q7:

WTL&< ǊG/#$<U=E(upUWËbʿc_1KYO՜dw@(`IE<S=MOGs
^˾ʱ.dU7l.
ݖp~	@e$Id74yê$	TORt]6,	V~gQLر؃(ڛ6h5Jʹ}Hs]O[uϼk"+~ԭU{`;9֧M8|JTlؾήC 4q~,FV*{dමlU)X
G.TADLs5%)d#o<LQ椝xĎIzQG,L
-<\yçb)@ b:klϋ+#(5":hA57=xwvNzُ="j$NԻxgH';\'{Zwk$ʻE/1˃xTr%ږk$8Rs]䚏mR=|\HP4!尕M5 3\QY񙲑FAM >Ƈk37mŇ]!m̜t92ߝѸ+c3<

L%u͈B. msvryWsn$M8?.^Rtwrm)uDvu&>3ʏA}	l4:'4
vy[w%' ~I׺PTL߱	X*A,.ϣez>#7i?	^ \IxuSɮH%63jxb
_?4Ed(@N5KZ*',gidRZe^͘. BMaLf|ʩI9OyWī"kJ"dC\TPB$9bq(	FeK3)0>B/d mT7D ȋ/N860`
jX)zQTC9#+
v`ozt_<Wu\B~i&8Jǲuz}
\Oh3!Цq~wTnZ
pE(:\É̀U=DFw 	BvޒCg$E_샷?֢EY,8ܓ@vI\6Ԃ]}LoW#'r*lZ]ξhXZj{-gX?0m\(,=[뱊sf.TUZ[
hw2S-~)Twnqg8BAXL=_l霆=w6ײ~.[YptO>ij7;
Ұ=,V0$aXC%gIJsx=˝tN6?],ů$)bd妟⑳o&^,!g8^18Q{VNp
vd@wۛ]**zڊOܩgbsݕ8ܧ&c%\եmH.☲gS*	kD0L?)ƺ?Fб1%W5|UiFϲ-&WߋpxxJ1@KdI`/
zvn[w|<UUhȪ}C<cI|p@RLq(<{0F&%$fR8٩kl*}Zn.Uϯr
[G\p{n߬-¦0ͦ?+x|{y^dixM @=5@1n]Z=M{G+l68%`.,sQqQwPjJP! FQI<?_ڞgW:>u{V7_KlۍK-vVAh!QB]أ*~Zv
R	za?JSDKx}IH^}zFY,(6\Y~}}M8d'$RdBΩB")cRCe9&Caj!urY1UF2^9f!$e!' HS^sA&Ud1+b3ybX! '.iw^XAQ~CInnۭ!?$g#3Iec6eRwn+oKkssqs.)@ZֺkQ?,a4-_.pZWup<X
{FQ-42LJ붟mDl-)U^Cײ

wXY1ێMC1cz}o,~drd$,U7bbYre76Ӹ7cvㅤOZ
iMX)l !OF
ckuc<񳑦l9qDrb_gFB(fK)YQN$9bu1K쉸޵z#V֜Cv'k˺ڏ%iUC*u~W罩YBX3AAveM޸\;m=cB6n|g{O7-
е,atOC%v?]m!ܲ(²C{O^+2n28ʓnhOzyuGuKh&08dhZvdS`NjD#P;{~n WsEIHНn!{ 0hb):6|]
u
v*@k]X	P'4F=G5uT	~	~^~}x%Ʊ
@ @2c))R~D("dLW9ò4YE4[T(Bwi1޺k7eQRxIYҸFV$x_/Z#Cx}ɮHE|Ez$d&T*
Î!l6vwײձ<	)tuc(IƱR
SD,˔(FY(I*%.h3,\sD<rLHL	$&@Tt zҡL
#_Mok0~5@j˩㯤EIH d>.('sگ.{Եugx5\%87(([N[q/3	JQ-}E:(4,+Ψf8H^KT|{Z8rxmJMr!]3@(*(˵*zU`ڝG`JY)E	%}odnޗU4,G>MР
2rqܼƀ19̎=pb``xiN殺ƞ!VfH6?R%N:N+|
fwvvu.M\{f>`k̂VA&;t<VA-\3{=KlzCte6>NRשߖgV%A@wd8[7o7W!dDV|uίm7+4-8V>-)6N},ڋ?rIIqOXCQol}ºxfs:ƗHxodkӚcU\v]k|km[
}2YzL/)%V+~)CxxatD9{
VW3vb&h|6_PE2x%ƽ
0P28SPS8(DL
Ws:u"fZ^ a3Sɝ=-^<ֳp\6N )xfc}\%-(~! xI
1E9E]@I3 .݈HRUvCOxw=>f2I0fK1ʛ"j
;FgȷAMNKҒZgEKs@\þ~~zOqyc]5NkP+Sw9C	q~bLNx-ƽ
@P2?7-M;sPE"6Ws8e[ѵ̘GXV5*> Q9{ۧxo	DgHHf/+~/R@$ʘHx}TKϣF+ me'|6`/I6(},uZUT
&*Ă$QEdT	2$by3e*1,(F
L!1eb @T 	FPhDDER!T86*LBV%d2gM֬E=NG|O^@B$_@W42i6_Z\u_n-W{<ry7knhbV>?-	u5#z;^iͫ;+_+j<{Rg\3l<3t&mU9ZVCV6=K]_.Xe9،jhyAf_Ho_@]U:$u<n\"-)5[l썟&OyRPZ{gXl.Q`2OG'["^`A*8dC<x_[i#
sd{:[wFJ7TA/9>l[R-=w5t;⺧iz,=<Z
tMAwoCbU.T׼wǞlpqgHV#Mlriwۏ
<XЮzuF0pqc}m(xѬkz0';,'?{(svKu-Ϡ}'55ݨCz0fDWfu]ET7H54WD
"rmWU}.p|67q\WγV9] LX{XOO"o/$o
sՐ:__kexTَF}W$2D``E#\x2
|}IJfL=t=}uȀHJ!$A@3B
K$B$3BɀZDʈI僒HRYIe"-B9JFRtX%z	,ˊ<?݀5F%gSZi6%!h vIc
>W&ey2ף@خ
 ^5UtU5-VU:8
QQni_DuNxkAyns^i
[E"{nwf{*0vz3FCCv9}l8FG7375J٥_M)vrmP%;"9[8AVoN^b<	ka-HdMz2&EنG	fX%nVt鳩oܳsV
^"3kk0=V8)  $ûaE#C$Э+zm5{r*mzMjmN3UP7sZIL*o!/}vG
F&usyin掶.>dץY0DqgTōTDft(<RXaě3GǗwqoR-V{tjݬp;1WU:Q̏cPět̬L:+lk<5:je_gPI{y0%CC,0kq7I-Nm&ܞ9ϖ6
C~Ma
",ooƷfY@/1 á	'~ |%|)1z$>4S5VC}$w*ܵhڤ #&]l	ʇ]4NgTG}{p키;NJ3YQ]B.?@}(Jizsl7iG \{`es$e  S2Kx}KӢFʒ4TMR-** ^qi"
_'Rys޳9 @Ld麪0Ͱ&Y0)CӴ	 zT
EWDРaX	i(W,PSY
jijDGZ"C>ZlF)xUeU-
0SkZF(OemXHKdYu9E9,y
~/V<,ϳbBw[(p W?l˲e]yQN=\neY[w0eC=H #!*Bq3/k&z~͈_4˻%Qg۝g;Cp$z}0KP!c\Tk$󪪺N>'86`mBQ縑nYQz[=׿P罨J;Cf2d=8DO(և?
w㌏3ډ3@TaJ.Ohq9sj̮w 2Kqg.&[ZHWGZ.~zs}FyJiYH:;lD,@^BtHKQv"6'knU)S*LFjr_PX>fk}wA:n]Ҵ=
FĚdFdΙ=ez^x^SQ銢v|bKy+{n-v07q|J7_=[>Gn1xtU&6d׾|p.7oZ84ig}(H_׼U~
pN Jh9]zٴm9{-A_g?EeO^Uю~ !\Y[ƛm2N_)ʆJ'?RKCj2ֲ/{,[x-ƻ0 ##d},ٚ&X%HM!wN3q2@ZУ6pnwkYV*ԪX6Mk9ɚr,+Rs_b!xKj1:E_ 5!d#f,#r7Ȳޢ7U$\1%`Csc#>e[X'-|bKsTdIjJLHUΝE{|2g}}cK0 c8OaP8~RSxKFIbh
/cqGEhl~}ӓ&rU{n-7PBDDU%$@$ȘK!c<23@&	ɐ#!YRU!	f,JYb30hݽ"eJhen1ߵcOhi)Jw eANd!xbEej]#.ﶯi˻/s^e;>9^7UknhZϭ-Vր(Q|-*Md!5Zo3=)|o:2 
HS>kW:9.|Egqg)`>9JXA8#yɒ~ٸaq\wBsU=v4n"8i_y2rVٵ)fvxVymFyZ{oQi0bCi:nJ.Wx/M|D~\a̝UpaN\)Vl;Tx&{*!uq5VM:6JjV˒i\Sa"%7Eˬ{,f'Y>gkj{(#S*u~k|m.>M5y:ϕo]Ku8<ft_&	WY9r>{.ζH$%Q撰2`0|\Ȝ;
[;ׇù-˸)V;!N:	bU)$eӛ['x]FuQ]3Ѩ!9hތsZBݍ,%IGo~[Пˀbl0;a7f 9EC6`5yټ_iז,6PT_WYʦ8إh <GPіM"3b}I3JY'ߙI]xŔIϣFr3DfcE94,66ƿ>&(rK>U5tJB
K[2ɒb#<Vi-P= 2E"KR$hR1SR%J_F\xț
vE99fIΒW'ܣ_7j}V9M۫FY#I0'Y$^jU^ǯO?N"ksȚn:]3uG
B_ ceIIdjt#_'`̅y)I^<õ\EzqRߤ,Ԕ
̰w#wkɇA3E]1hHnvq2VE-H ϜamբBe5kQuŢIOT2aݼzey j(>P62W|jv뜪ie}x4غyyrO' Îqҟ? XŞ{֧XݸJϞ<:zAIbUAI#\^o=tm63zX{ĘϏT$eم ܳE}j.\(2xu;AiVֹu)6[,o+ޔ,	%eM$sk:;Z/NZ Myb"̩[*JQggHJhgxi)0=HNM:W|\ٺoKP9I:=k*T\6Vt6햴c8&,xzwfGֺΜ
:hҝ.rS#?JH}z.r$d~WFLh 4צEF#O3A$yi_aQ(P4X`Rr&p@㾯[-1$<4 ~끵: 	5Ih1+Bio+%h 6_G{O@d=Zx[HK@	HDQQ<@Q ׏Ow=Je'{c B	Y,(qbDN!ıŁ0":hpI B#)" 3,
bqbE<tR5yZ&EǋMoK})%Iɥ_PuXq&0J&0ԓ^SBFJ]>}}O[R'm(؃ʰd=_9(зȲʲfLT6ŮK!˲Wl鮝kۼ`Ptd9qsnebv	ǅ
ӹ:wſK߽"%nЏyW.QNvO(A|dCFqKnkH_i:I.f]Wi*9FYM7Q	׏}b	*!8I[UYϕjvoV37rՖwQ׶ӑLy5X%(P {GVɩq7/êWNѨY.hf8DS)~㴴QXWhq9zdu Ca&&τ(,捕9T[>TLEB12-3Qa-G⎵ð֮cWG?+7zV3IUv'OTIncȌ^(k+9&Fc߳(yxdFįGԖ>/+?*G^fn*x*S `ar4aVJ-_CÄnڻzޢr
Cׯr*6pZ4>Fz	~~{'M@Ҫ@>	S N2%o@HtuqgA&_d}E  IuI~g5୹@UI1f}(J&
Iiֿ
>{yDx}ΣH<EIsտيE5؀(`piq4yCHJH$$d	r1b!g6R11e$`P]L 4R
K#>織s'EVG(q([.KiFpRjHk?>#ף%YW/_}%m`D#,FC>jha7"ڊq;fMQ.ISS'E9G|wܜ6L|e(
b	R]͛Hf
j֒ե[֛$ϝGdɔϢ2@VMC[2qx_xx֚#NR="<QʆI4{tZ
&7*/m']zmy
?{E{lxkFt!f}̢}PyN~\#!1	7II@~qȪzV\u/:) !ꀄuvXۗ+Jb݇V~b\i0sˆHH="|2^/zgOj|oE)r}U񻾳SȶTF8C->`Tɑ}r:],HC=K]di^np334s!q+Qi|SzŪ	lB{ٿu~^XF"KF1a7xC/C[vy/3dN/rDw9ħM2hٽۜy{@7mJͿל7:MWg5֏xXԒ{^EQ?Wx
0 {O@~oB~bYO	P\qWvIj3
e%(2CBE./9Gt%W;Cd"dRE2ϥ6K׉OiOu4R@#zΙIUyE.Kx
0 ƉF`$vH-){ܵ
ZII;-f&?hX`whIP}
8T8X7٦5k[%Opn_^%v?wp@hve$"*#J%Ix}ΣF<EGY;Hh clckn~>QRH%i h!SH4jsDF
LLh4BJQJxEF+*eʢJ%* <%@b'L8H9I!'x`cv j*?ُy$iUoy9s-k '?!u9Md v9m|Geyee|8l_?G3qn~4Nkk&<KQQZK5
\뽪/W*Z?/ɭd7Dm7ǜk)tb3YB;m'hcA+	Z1}*DwD1]d/+ҮV;1V&g[Aw
6fti֍arY]D5!k73fB]\<A59)}j͚t{)uˬ#*~6ݛ_J|o])eBWI6azm|M&"CaXBNdꙫ6xA	r^QX"1/쇙B̀޵v$:=Yhi#4gdY\8C\L^\+ w)oAKzĔ}Odka}I%O+?B	.k f{}ʑihP=mO.*N5Exrr>>	~;KWkYWUğSvwHfg|.͙h<zOo\F-?Iyc۷!'
8yС07W2&[PMWSY1Mg8ooxA @=c\x/0%ij|{K&J>&@$ PBRΑ2RDβW֦oYQZ͓>ǝu>u9k>Pߺ忇GKP[mRFox5ƻ
@ P&#0y(2l,U^cϜ`0S.B]4J7U{ߺ84X eU&J7轢{;ǽR]J3=$Gx}ɮHD|Ej1C"U
l`x; 33ٌջVeF(ҙ,TbB*r.`NS[:n"bIVxI+DD,I.bG?VI"%SrfWT"B)g,B"!T:Oe?l+*/N2/)<=y5Ϗ9O)$H";+,Vjމf5Ys~_[q+ƪ :0mBt(>:r]z:ɛӆKel4M>ж+|/>Z6O?\$Y`	WEä$qwaG$3hg5jwNu
|zZ?p93g>F,Qǎё<;!6"|׎5WwV0D1e/Pikv^.ä4é͓lu|ZBd rFbI7vE;b,$ >/Xu-oc./a]j>(@1II|QM,ls[GWHJ,tܚsQɮ.pSYn(]1pH7E\)4$ڗ
TrZt0p@ak+On)|cF-eat,|z;hj:yH3K-Kx_v!sM}%ޠ:ӌmAe(/۵aH=iXX>oW礭
}-oͧHJ;TZy+IBo3b܌ۻD+%jS#n0a :?Z<"&wDPG<dCڽ֦U
TԃkfZc$Qx5ɱ
@P&#0>p^"m*]EEP6a&KtOzWwu:*,67B`NઓYV_X5.Ē-J7:ӱ>9q>L$|x	1 "
(I6Fa	6xϓ>ctXXC	 '0,~M-ICjC\&j1e׈kBjz{}eK2:_?==z	%V*<L%Xk_L>xKjA } !olq*xU]PWˉ"&dKѫdDNIv=H,S%Ѳ(A&Xj&u_ñ'8?Wlˎrs-	}W=&gq?h7N#xƻ
  Pذ,@8.P"tNzx
K\0H{kY Y!`DtC>"{(m)kN*z;"xK @h
Mqܛ)3$[okUDP$$"0f Bکt%ĘсRG!>sYѫM[Տ,UK-iҗum\-W
}2uԥ&<1뭎r`oe[HcLNx}YF+ZK^$ox`Qyio
ްaN"MR_שt! 43$B.<Is K|5`\RH.+tTF"sIα,&X<eہrAPuUZ$Y
r>dٗG]޴]1yOHSC0D1˾}U%aWsA`h7<u*$'yf+'/2{8}yEqbO\ϒF_X+LӖt\U2|+)ȥYoc=85
\MXa ^u]0;ѬxK:弾c+J靿<^$y;cJMPaT"&z,<LWýhGݪOO3Cܛ}<F1o黓M[K^Y	UN|u#NdF#:Q0kËJJ{~9cZQ&Y_6	+IsV+m6([8w{n &2]jH.j~:D;3|aهWx\#G۬[+'ԝ,khQm
Kӱ8+jmG"cn}rr[i'N,G	he%iFA!FDb.ǥ8t8S,@oJLsN"WK(euz`wzJ<&瞴x._a\;k;{Wx^cPmǎj6C 8@	 EaǯToY< P5*xڦf n2ૢbOaܾ}ޒ[~ßXej:x-ƻ0 #E$[k
Z4,"9&aLFë5]v+kųU4W:VJK%1le0lQN@>,V"YGx}FF~O%u.lccUx7I:(wyt+]}cP2EO3Kp	8Ô1LeXUuERu9%pϚd*dHF?
2F`F
:Q*j%:SQ#)Sa6O)R)X#j*D	h{p|Uf!**)44~jڞu+/b"_&PdIEqlљ;cye5^ރޡcXsp1,-:'#0DkӤE
G%P~o#uV>Nh9`~cw횷IN^U;"Ql[(dOj쭞ɥsosN|/Фk@+pk]p
;fDwך⥟G$>
ʷDdPM+܍^g}N#͛?qs!RV$}JXIf2	%Z/!8uW/[t?
Na䀲o+`̶z#56S6r(
ץSz80	DQYS4vpJcFLxUeI-0no_lkD%xFUZYz;$vw~-{Zv@*4C)k*nlZTوw'ʢ%a{?f=
H$L%_!Л%odv:hG-t77S9W1t<zs9yNt
A⯝t3>_Mlm#{ډ~GF&%6_v͸:ane} q)7P6ca}F6dxA
0 yE>l4IAăOvlHVg`U-( r2a	>gꬄ;Q=ʣi!&d"R쬑>L)|Zka%}x,1Y`AP]JkCLokyMUx}[V*/I,;LMRETP<
F؈sfN2ÙZuK/!8NE#B4RWg$g ǂ j5汔ry*I,I&2|	ʨx gݥDcNp9eQ׿4CR<$/)
gRoj]:*9$ؗbogQE[e_K[,V;X+G7ey6V=z:{0UUU4z!8K氠aC/(Ȁ[{{fx(2E쯝ǂ.YR27) vd#Zd^8Z% ّII%K{UqDSm
̆{O~hȪiY?y'VS%w83CuP}fZtI>ZlsBғXC7$ߪ{7D

 Y?Lq%U.WN4hc)3Q4_Py++ƞ与s
;<YEd[ָu솧gۙ{(
B
-1' kNM0򻘶NkĻ=L%}^2>WF~TgmD}u>Sm
+wR.<}:tSigվbk\Tj/VH<&iՅnTÈfJj)7'<z]f,e-52)Hzǹ&IeoGȤlz+uGݚ;1`kU/%ޙEA1>)*vҡ'eCPŤ
'~jirh:g5"M^/U7{ G.(jOQay3d?L?X,*{x5ƽ
@P2?o	ZgD("dL
+9Ӳ3[iz@j#n\
nkDyX!&5*q!_ӕ"xM
0}N(D\x/d@k%o_oH@h*4(h`i
>!1Et$^gq)=S=a@lbXH[&4yJ/o|uJk	vDR{/|[|K!xQ(5U2$0,1%"5%19-429hn*vWf^f	 6x-ȱ0 ##dY,y
Z%"96
?sZ}vuJQa:fgQ1[Wm3 !؈sp`ޗ5`?}9"KGx}SKӪF+fu/0Tݤ.?;<_R9ˮ]}NW@V5
b9)0ʐ,,=(@3KZePR+j&AŐDURfZ9D%Ѵ|H^ (9-l[vvl
5?$u ?cO;u޾WPwr$MQ$,oGf>v38c~_Zue_ Cu/}880+2NRi&uM"aߞkW}\{ڞHp3;ÞܬD7U>W^J^\|e=9+TdDXIG9]TQ!nz!tCSQ9:8RBզ|.p&9TƓngD{m}
L_&1wG_NTU%՗vzOC5t萎!L:ۜ0ۆIEFr#kyKgs&ËUMZp=o}'JaҶ#ɨV,ϖzjiuoI-F%:+-\A%mJ2J%ݰT+[3;b0в;Ip^xfGK(&y҆a0Wc^^3s|	ա5Г8yv_HՌi*v/,vLCLm1D!fVɯ!:Is{p</p9۸ucn1B<9?Wv,Xtˁ:a}nCا]6ei@?eJx}KHJfIyIϤAAqǣ
P)w{.a0	r>|#Y&XD)!
NEDTTw1 O)XbET>nP8Dx.'*DNXaJ"KPJD³S*逿T2]C}q}4nk^Ř|Mɢ()Yu9D6c}_[}/?Gͭx[QSsoj+Uu5wP^YV\RU5fWx#ܥh ꇽP)0E`oڥ,ׂ#kU&0kJ^-ȤĶbKϖ97jF0'Hlf4
KzVޤŒXv3 nVzCMK_(ITQM(BEiXvGR|z;Y
t8e66stqr1їfgK-#KHVR>o0S@h}^-5pG]P6MRG].^d{LQO<7VCmSظM+ZzF[	a
>ySD)+tcmQ9-N>+'I«sLkOӯ~rwB8HE>p:p¢lС̙ʭsh5c2i%_QE
+SayȂ)fb$9hj颊gY=Q",!}#C
Z	7X!EOWpH	^$-ЖtYE;;{,	Yw#(w9XUgt㊻fHjfflxẙ0H/$JtnxmB16 ٖPĂҀ?3	)Db Hlw3	^J6dūWMr0M!,H*Vk9RD|K05_0soҁRwmC
[PѳkS OJx}IF|ro
mI4싱1i0/Ɵ>Nf.%^J-@$y&0P^(JVDVH B	C--{#qc&bE!0lZJXb!DKp'r<ࡿW-炶@bfsZ/1tʪu1Y/R=%+,Ϭ?ͬ|%񿲴N,)E7؛{p͝_ LAYVTY)̪a
p,ї[q|_&Xh\eF"kei.JiL6ږ>7Sp2n}	!qr&]ˡͰ۫YYGV~;$OTFQB"xUӔ+0@ݦ)(;fAKĎ"<7=v*x˲+te%-lRo}Յ^驑74ڔ[ډ+WZ"Yaw)e@/13Kw۷ּS$kғ5:^$"ǀU͚LN՜XtO'FG'UsxR6_U9q97&`יvҤ'|dhob/i8Ny{ͅx}{åU}v=d|c0Kt74gT;p>yVWX{j{`
Ǔөc̳;qr2-C5w(um]Uo`\B7ԝ<{6QI-1Ou㙟w'6h׃?8zv(oc,͓C2~s8=}g
zx5Ʊ
@ @&#0mH2lL4ke"ZuիyvԤ52u>W\eik
wf2s?ǝ 7>翟閿b#xM
0F9\@O'Z+1.z{+.
.Z
1Y1E׋\ޛWlP1
:A:؅1dK4K:i똵Sqr8e@=<4&2-oP7󄶾|HM~%xű
0PQ}1hR%BQ؄2ytM۱k͒D%N6(Zw:VF%Z&ޛh;0 :]},"[xA Eb.a)%1ƅG@KlA|Vq!r"mѡbF9K;eW^hk`QD~;@!.Q6
yᇧe>ZcPY4$I)uέ?
zKSY!OeNx
! T
h61Ƈ%.SCajb>gU!0Z'}NE1̙bʑպd6@23Nl(evH)9/OVXNv86ern}݃[7`@41y>Z,Z.
 \KїxAn =xƀG1Q1THA߿ 6NAGf8f=ٲ+tA΀54Xif(ck>
:焞y˸;=vC.gn+)g[I'9K)1̆TBD!t˕Ayܨ6*^
$$Y xA
0E9\@$&&ɴ
X[x{+xw=_a!QF1v=#g1f>\K|!C]|)~4oR'8O|D	vluχyn]`e C
h(| NPnxKJ1}NQ{ẠREPAOGLIXYx{
>̰ #f\I1BZRa20]좶8	,>}I0f;o*NU^fC냷sL_@s =k2uan%
Cm_[ 2IKx}SɒF#1#gkV!i@ E[c?[eV2r	a*1#H`9!!DIpEIH5P}8v"8P!9GD JǇD^(R(b0")aʰ	zo)њg*\"!cE,='DFϬ%O A>a7v4yD/e}6Y3L8=)@2Ʋ#;Vx^q:e3f`ͼ'v$AhnO|[w	vѝywh+v
MrVj}5ϊ`t
\%/uZꝨӃWeWr/9)`sO!Txq<J4ۛ5Bx7o5,w!.zBRB{i>1C3̥u-߲N.$,~1
eqhE=ZC"dCɹ<i6xSg,[%J[n%҇R\4]h{X^^C[̪d6vi?%wR=YNۖ8óVu)WA\[u+y9ܷ̖#ڵv]Ooc1O6,|͓ʈ
4^6kl\\}iPڋwn-^1B</w\M*޹z&zhRfr:5=3*6oy#$z
4	vͶ9fgNxɤj?,A}1#_dX4ߠұk;Weؤh|n(j߲}[Du0g"iQ|x90E{bzB4t\,9$n@{0;Tg4lUhorV̮XNW17`ưPkH­93%'Ϗ|pjFaQlj0z[`- 	DRx
0@{ 翑,D
8z.%{KcJDR0Eݩɭ
XH|hBb+CY%,+z:^`׿Ϳ<gv\=6`
zD\{ɼD
/*SM} [Ox
!@;ULac<X
0DVW;wR"Cj2Ji9zxNݰu1q2,Svd+I
cnNJ%Q/q:x8/X6ei-r٧.eXKAp+_rm+{PPxqireYRanflihd`lhnfjfhibjb:1֜rYk`j`UZXP__ IxAj0E:\edIJ"G<ĎztU3ҐP4C9."%Ί
#PHA 8t%h&\BëJ*':
7jz.a]1uZ|צhFy}JPf6 eRKx}IFx͎cz!X^C׏loWݾ̨CX%9TIsE$aS/DPł$!UM\bDE*Kd *2/I곌ar[)PHYK"$K"!*!caO|"qc ÷èX[5(+A,KiS;Ѭ=I_kfcxN(0<첍mtM7ժQ&LOM^ktx;S%?$K̍)0n&Vzb
|_ԯuI̇nFX\P@BGͩh5. \6E/"M*i~+>]RP}Xnj\#0-nW9g,8?ZiK(w9C4hS,Ak/x?*vFI؇|lMe;aL޲-ѹݧ*ӍC׃J\,[vm!͋U{|	X3Ǩ:!
^YdW=uuYR6)@B<l(8r\jsуB۫cZt5<;ߴ
Ю3WkA(5gFxØĳJ=n?Aoo</7wϧ?2p$Nt.{!Am
 T4)0j̽:iYQ ;["yyruw݉Z=W#q)R{{a Ur-|VN9Z#ubFP6wz|FۻVI{C;.{`
x]KQڛH'#U;;Nƪk`\$mCOhxAj0 zAd*$PhV$QVBgnÕf!N7n0EDbJĞ	mR''m{x-.-[.$^[8L#x;bLĩqyEdJ~`3ΟI{Ix}KFD34n@.`
6<;hym3InvQjU4P
xIc"r,L)&)!
ELD)i 3}<v+OJ2 a$rE$SEw^QdA $S!0M1`1S,5LPWHZSG:m7о^>r*tǈ"<7mih5'/}>9ih6]5ߜxTUUӼmlv|I¢VU#O5E`ང@_¼-paq^-Y|h+g'k͑nel7uŦ4g*YQ5`hKP+dk6w]\Ԝ߿[tg~VxI)Н
5ʩjz}V/WU{B]I>G'qwb)('5ЋBf$:.Ir>~xVϳIhSL0XyRH_{㯅V1zr6p	\\n]5sBĀzXY?«HЧW%$v`=>m`@}K.|=U'f3DKO״5QHV[ٜeH2{#6vfy	qliiߺmK~2rHISes+qo'}v_\<%
Vo|FR]*-/'{25%`'oa2`RZ"?"W}%`ƽ!sF-+
aπSpݑMx^kK
w;e]w"9\`G s{CgMMeݏ
lU sqhxA
0 yE>l& xFJ?8sUUB(1c J,DB枫^C!	 }L~˭kjwhbWyۼ 9.9l{Kn0oaIKx}YF]G,Ij E^}AEO?$rusCG)aBb'xYTB+PI0lHL;Z
 A<QEEQ s@Y8aQAA#rg+R8B#,Sý@.h6YL,,EIjcO[Uw)l[TV:xBlV6lG
aiY
>2ͰvGpNYG590fyv\u{8˽PUoTO\7Zzip7\gl(oW:푃8~>Nh00V$P޾f-[1.یJZ(h$X̠?Wd
_jinMpHe<(I-lБ{ieZ}jG?6YܹwxfY1 u漿J}xz
^5%~+4T5;sݯ-uG ؾB)4
^L"{<;|}>8z6|~b`޶yOr5{,Kzgqx̗
7xi-)<Pe.ӧ-~I}~y
W'r7㪦f{z0 Yvuxs~%V7	_22soMMv.:nQqB;;NSfXUR#xɺ׻ZEXY=sh>/tLݓnߢM߻[HYVYAtUbt֗*x](}sԇj9>Fdyk3h8n[́v)XH tcu]r^w%bu!@AV
4Ul=\lwm{\xKJD1@yVQsA$ODlQtTv򈕁<Ț2ihBѫ->jT=Nք:6dp.<&<7~Y	>W [+-:-F^W4f&D&h4#b/y<<"IKx}SKӪF+*K^yM*  afx(>$٥ҋ^>-@˜4Bc%fU"!,SVjq\fjҲAQ0bqXQU8QHy"#T !U)Z c%^`ЧU.SN[`dNNT$^UO~bme:'Yw\N+,E])eItYUsgyl<̿q0`xi]ӂM`U'C<b暦8}~3PĀlLe`aJi;EM7֚G@y]&Sҵy]|pZKna_Ly]J[Bo۽ϻ-qĸ
`6{3n0pƧTVKz
t(}Cx3 m(U1}sFÆ^,EyC	9b=^OYO[[J
tpo<ms(,4^Ov΅u8;U\Ǖƿ5Sr<26z5m<lى8;i^6/Ns\g;ԇnլ/>cg9wj[^d<vxܸ5*e1%>ow:@2t̵]UO>_%GjĴwe'qfGŜS81L<5!zURիO S69dXDjɶs\)lOO@CTb:|Z3:!1Ի׳ى̀r0dN6h׃_8mUv(W"RoϮ*F[_PS=MZgU| *	8bׁ@xAJ1E9E՝DqATT*4x]<3;H}BZL{wf.U!,ֈYbkهd܉!7WCC/sїP[\2-X8
7>kQqh%RRUΝ_@5v2K	IxuYϪH̥9c
$g&\PEQXEAo2w3uUkTR
bDc%8Ph qPFB,`P"2Q("ı̇H!*%D(D1 IO,ay^1J$rAϲ+쪪g?}mgT=<F"		"%)-XlՇg9M+Yև3iǗirrz ^i-TMaqX^:e\UΘ>aDmTE8%@I7D#:@l)݆mr3(g(Vg@춉k4}
5Ya}\g6`iZ@zv=Fe;+Or YuĻt)KVN%-=!4M3TTQpqc'=}2madqgpFM#u٥K<~'gWY_?yli0maH{=AY&GcqmXmZwt80XVpaL1MeS$ゲ|͡0Zc$3K>f7;}o7^hLޑb!DP
*,1>4^?3g,3ɨ,Fo+YT)Jک~_0Td
ǵ&[.ś}Ntw?˽/4c`{Xp۫:ۊ|Dh<<"3o|YI<ER]vp;="qVlnl̊\:
s9Dp;ڦ}Q6=AVO0zP]<X^<ji{W	|?9w<~sHx}IӢHEՂ)@'EA3]GwF:bb,(CP%BǊӅi(D"UA2KG/p,F%Bȉd X"$(	L8Ѭ?Wd F!ċ279d7@j4︭D 2Z~K<_nZN3quMӗ޶Q<.ГI<gi7zZJ|{qݟ^V !q*]|PBU׺	QJJҮCAn_UoLX<CuF..)7vrPf2~mۿ}jk(v8s
Ri_َ+.w xץ}rM9ԖV6kɉMN[|Cz
x*m>-inU0;qFڹK.c몧|93?m,2߸lu	A Y?ܭIĥy>ҽthK3&qgG"#Qp{' ;MP@PDRp텼sաMjT=|m(OsK&]xX.I:0V9o^]j6n\I`q#3WKi.^/BU)<)D×SoE,uP]ֱBYrFah:U#.~b|\-]8i[\	1&CJ@4Gou7@m3.@BJm~UjxAj1E>Av4#EB/`˚(޾tއǷ
(0f>iфטLȁ{w\G$/8꽒0٥]EG+?.-^z{D o8!Ͷji$S;X3~h:.~ TJxuTKϪH+:74ɝɥyKQvдA_ev3STթ'pL*s\C(B"<)Ƽː@]GQ]ړf Y*^
TT2$	rH`o>!f L!ePa.,K,\eYFP=i۞e^COVFȁ/FdjA0lvfav _
q\cHSUҊ8RUUN_5QDך$hQ'İc_VC%QP]++/ټiu5H3j5+PG?ZZxTFEW']נE2X^1Q ثު2>bj&WjUgA.<oʋVsа8#iZ*Jy/e޼֌':vw>pdb{=5	>SnU`Ժ3
zzͨ"ىۗj$(08)O~wk"i.pamvvezOiV'Lc-J./= 86y~h7'
^(Zu	1,f2WB,Utv̕=nayxx8VN=WW+($JRv_v\8~É95b1fө~}RmLu8
Ĭqz!Y]?YwIfkXuW<{CdkϛPdcA-!i𒥚%'Qߚ0\A9/ƪ=y9?X\TEf׶yҸ'@n϶(¿A`viGC,ӪqItWxm1 bZlH# 58;Df1:D!ES
I0*eSL%
U*G+FOvڲSM}Eg4tK{eOc\K/>/]lDKSw1*6?Y;3v]j TxK
1D9E_@3 K7Nf	q
GQT"8<q	xc>QH8'Uy4jhddԄZM@Vj=ICRaӾT5/tt	
=v.?zp:B?t+LVmQ^x1n1@ާyaƖHp{=^,vבqr
(/~o"y6rfe ^(	M1gKօ!DG6&/o%I+vaZB?ƺa`D"FoV均
)AYL-R|pzWAPʗIx}IϪHJzIOHnw.2c(A}{;Yœ9CQ
xALSr<LD\ysB
]r94Lw>S<G㗉DPrD%R|F3LbqBC$a"q<%38M/@y"cOtE5c6 
H/̇0`	ʊ|
E7p`ԯREU]]>Z
c7YEve5zޓ@:R<f1ing>=thb{8/q{;6SxkI2`Ɏ\}qھc<u]jn5_5V{(sdctqgnq16@1 YT}].upg^K~N S=J᳂?]r*}8&œA	AYSs9M 0e368J'H}kk͓M)y|gˑ6Ume{;+Άg1~_ޮOF~NJ(\굵VN
M7l9i
UfD#VVQ|?nȿ*K|aDiyS=ȭoq7V]O}~bSzuQ?RΩ痎xTq`(/ߛօl`,TkCp`'xD6fVCs^a>O'笡 ۝M>sq~82w[wcӮo7H&kjЍ3.hWW&lxeֿO?mLDx}IFڣ~:Q33`l`GQ̃m
$rtp<1ł!!*YJ((Ö<Rl*|h˥xNfy)CYx(%Wp
 -s}0\LM^PEVXzƿٯSq__U3ʯß J<*<C}㶙w?~UK3#Sb嚪jEr@/-սFf݁Gw<!ؠEVW:Ə1X}&7JZu1{c=mP@Z#;󣄗ϯ59gCU)i(4qs:pݛ$O
f3.V>tY8Y#֚:nոd9 )=JĊĪˈa+,߾%>)lnU0]>;`TwGՙPH;oJ"&YC޵!6+i>'ѡ3b8+!#պ>ނ6SLS &P/*(`PD݁SV'c6{4ǫtcu=k,a|X
Γ/_N)|F5t['c/>4]D'>UCLPFrH^G#Hgm}:@m9<XtV\$)M_o£|<¼maŰ\q4t]9;5u{G?EԿ0=AE7LpͯST1p_5S2Jx}IϣFrfؚMDi
1t7?~}TW[R40t5g3]5s㓲$jXòJ	a"3ɐ	(ePY&Qjd$R	jPâLܠ//A%ΨE(UI%b0<D
(*RIG6rξ[5(C

|A>jSMgUM9?~_[cUorm-mC)\9Ǹ!K+eUqͳr*kPVBɵpҴZՐ~2_;EJ[/TEտȚG_],Q$49Km|r }%:9+H։"]lV0~fehMa#{ƁN˱pivb xC?Cs%yEqs3_i
wNW*E
'>9nbuޫՒw7xJY:opK#=T4xoxZlr:M^q~NSi	vku\Kcr|HCM4">QA ^.Ұes;H	5niry@YTjlɣ|+0V{9ǯ}НOy7!ӬٺU1LD7v	QO;hqdXOɤ$j)ʵaCnXVZЋ۶zz<+eJhdKC5l˾y͊!쪩W>TZ୥3V7t	.e~5Ύ#ŠC(ۜ5??eC@75	|5`۔
7%nֲ!JgV8}@X1੺wFx}ɲJ<EO#C1Eʠ2(n:Boq3r/r"}I3Y2IsˈHD&IƤ\,e:g
Ydܛ7	t@	n{G/n;YJi!뇯>%c!9<Ej](9]1ڰ8XON
L&QEW}F48'|Wޅ8FuUx]n#o(Tht0?rn5ʇg8}뿂<4ǒkZ
dvsU2Cw%^V)v~:^,ėƳn0#cDdy\$nx>nb-ptê]]ZA=zvR:6;<wZfnfec.u4
[yhpE:W'<FQ	K݈h
x]T3WHg{Ng$ Bo5ey0±]U <_t	RQl|R)ZɽE .7z:R=1u$
ktoDK1:i)ƐU5a"uV@=3Uc=5+oU2`Eu>hl0HO٢uvy!["ŭq&T=[@O3970H_wz/R`	:hہ3
uY{Mޖf-}ûJU<Hzz?aο׎AY$@Gِ)GV~
ϿϿ dܞBx}ɎHE|{Tf[fp&fM]ݽl[JW	c6
 Q䍌rE)M, .yل \lrT$E(!$"RF9QRfOh؟@čkf茧Oxh׏!5?
 Mu
]CX!6ٟ~o[Α-$aY[#8ܕp+fJ-o-D-Lr}?)!Fy}n)f^) hwGC
z54XѮ_84Gu\9F\v6vG_t>8͜gFO
^`,1ziR#_^j:cSҢi(lzvj&Lc!2a
{[M^YpJmcGP{~s;)R-C/O'9rit#ޢmՉ
.\hmO$`6ˤH訍ד,؅stЊru,YizrLp2\%Ze3ϦF-qVS^^pQD53{[4'}Ǖt3 /W;x};CG+߂^,ȼ$.xیf
]:<	8̀uk!'LJE]ٱ6pVEVj>KmT^\8'ŷoͨp{=ݍ~n-١K
m
_>bqߋ`eGnLRDx}ˮF D|E\4-Ml0؃7nh__OeZjSR-9Ii+] $ӂ@DF<~E4,E#aDt%PIaT V=W+Not?ac(b#.	
o"EM/	a|kXu	vDn<74~7 Yi٦[듆-2%Ugfcӝ0ѳ hǴnT,v{~ܷCpPjrV嬽j"~+wTk!9<YVVwY+?ou&'9{AhgzΡ^r~M8hMK%4>4/eȷfh#2ϒ!)k۔+jǥWx-܎?N;-+=hOtCSXz][fAXԲj1ݓ{喅yGiAW)Ue;k\2[MUYų޳7R
ۭԅ@sT=*ΫVkr
E;CTؓu9-^.*4֍dUArsaKs4޽Ns>kGQ2
Z]X E A.V}b6GʏNYDFlǮۓVƼsulxqlZ<vu,fyw#DEm7sw3|9`9:\#dBAe^>oy_UAXVDx}SɮHuGXUi5P_?tkCB!Ed&H,+
PC^(b0JYIH$JSuI62/%R
iAJd(,#r4Gb1'78E7-y$Y"77s蓮.i#+p>QS "HF4MlhU`t,~h?Jڬ/2w;:tog%z?80F*)v-tky\qk^*ҡݺfWG|ܹR.嫛bD
ʮQ[>׎9z{5\Uܝ|Ԩ wLa9	#w'*}j8mY헷^e1it$ }TSXhJOp-iUK1ޗ6xy}HЍը)G$o.(#GaIdeVLHK*/K8:O>Y%𯟃d͈%8~f5$JIXo:[oCnxˆxM
ցT/>9~x^LkbB]Iv@ϊOo\<lh߷nlW^XT8
0n 1?z3}fsNYF)4L"bXFCv*B2VS,|GRXV~/Ju`W`w:YJ'4^.o^wjE|z)	Q>

VVC[nw#KN@4~5NᢩP?_eXBx}ΣF <EiVi
;f
؀l$(u*}RJZ(!TcK\Iy,xUe"gq"!XV1ar]Ur	Q͟};FLy_+az7	D"EUoτ_㕒5WuP$UD'sMnYNw~fj?~KHFbo <g5M74-#o0b|4MZwZ4x12}
scʟGքx
r)l7lJwG.#O#6$If0\Tl	S鰎>]e\)t١+z9eN8߲vky,_~c*ˮϏuC,'E)c@+ver/zi^}-e#hnd[0cVpw??07XIp	{;t9q(a/g1&:Q^	;؛qo
y`BHU7AsMgs%5'"NSEd 4K"u
ŋ0/-.oC*W^޺F*W8Myp|
QNwU&O/~2drp~_-~/8B;rWZ`U*ùe⬾="u,NCda8^H*8t:d̾?w`i뼥5΍"|uR6GqyTLvPCqo}QJ|tʀ?t	kc#r! 43/JKx}SɲHK>bxPI
Ig߾ѫ>̓g(!@1"@21`Bp6ȽQ%(*IPT.M',ri"Cћp*J1A*VR(|TJxn
gI(ONT$^ŀ_cOhn(i,nc5_ȫYyU>oG#vc~~~,k>ߵҍqNg_ߢ֚歼C
[\(oi{hbki]:f@N_v6Ʊ3Lu-dYz]wW0Pl_W|?p-pbQY\!t9yYFi{MѫG<_/?g>aaVםaZNRJWp|Em-		"ǲO*kb=X,\˩HlmɀVQ5N{펝]?od6efi}dёU:
5v[@޽ͽջh"0>ͮ|S\CD{Nhk5fW$*,}r+>2mvVwgk!!4u0_bI726W@YOK׹n`Mp|zzE;w$#oV#ffET:2~	&P+嗺V
.GoSAu]@GX3P4WVdե#*:L.UЧmTizl.G0{?iaz?ЏNcЎe	(F +;F"IAIJI(,GcM/,@$yI &SHFNxm0@ѻ	(Z( (z]@&F]Z'A 	'!I̖dLdk*4{en Z-Z+ˬ3EUļad_2S-Kztxݼ[3MpO_?ڶĜ1E)pBF1?P`?94p"YLLIx}KHfi%4o2_Q<
Iv9Tժy\l2b
̈+|Ʀ(KY((L
EaGC B*C$*)3Pʉ`eĢA-`0RVpc#B#3(9Y)4z`Y>ԸAYAb7$žOc>_nI5_q0
@B>jB>8S
}_[ٗc]/fn ĮIdkn[j=J$$]U-	mK㠣[$lE]lqMb|uB7{uF^XĚ[gJ-&85]ߜy%ENB}z-G5i}*&oe䚉h
qa`ܛKh6_LClv͢hwqݳ;LW\ͼD<َft,,oJh/UGNK4:6V'(z,g>ݪ$t9
6DV#hzgEgBϻ\F=f^gpUjolJ=!IrqSB)G`(0j%6O}Eqq[4;ӯsy[ď?2]B
m:DJ>^ƥ\|Ґ.
̧s^PY
,n^`oӼr1{ƩҦ'YU]9Ƹxr
̄Xvh3$آl?O.5ےgЪ?[h]-m>Aثxzvٗ8M=}-;}30{e~C?DPS{͇m1="HW9	
~ tyxAj0 z~ ewm6CU,l
}za0iHB%Q(˘9J~(%a I&]Wˢ8c>QQ3Qģj^
g{s.uHm M#8DpB^vf뺷7Y=p{eQx;0=@p#!ؑUܞ"q>":)^<9G)6$08#FqZd2G}h=p	C%:8dxqTNyvmXxy]  seRoU쨺=QXCJx10@=@n&G`GN촕("w
6[j\)S1s,TbE zLf&O RatL"A.9*p:^i:L_qq,r]z ˬ*<̾1Iu
jM#!xQ(5U,1 8 491$2$94%%<dn*vWEBf^f	 k)xA @=h(Mq--q7p*.Id6=NG4;0vTek0$?)Xo-aJ$Q+zTp,5Nm7xV1ﴷݨ-!o]skC3r
*2> aNyxAJ1E9E]@Iw(,݈Ti%m|6TAbOAs&DX%LBRJw<DO$JV\'.yf-?m}tMVx_.tݸea:~CF;wǺ53Oq)Z7lU8 ES$Hx}SǮF+Q0I1K
7qf(~fOBUUGB bcDDAg$ A&%:nD9OV!yQL␈1Cf"*p9r(A:2cJ@+Ou~ɻ!#U*3lfs8}{Q}G}"8|>h[Y֒d*GM6=%9FOxNRE%TC{9EǲQPqN_^YQ
mkeCyʭzjPȖ|m#wהy@3	,94p'Nr6
YdYJ8uvIk#َP"<vkV8*A&}!d1CNm`cL̫ebIJϱi{&yPӶ6DCOK'xndݖ}޳fCl}y܉Y-R`JamUs#>
	{*#i00r_Q~wKDRRуكiwlgbiruWw9{MFsh
h*NiNsbF$4SiSq^pوԮ)p_L;䲐
[Z]>,-ٳq2vLIϿڡZf8چ/ILpJήj1[wZ
7];Տ/ֻn2~^^G`\W(pGmog=Iz+:jʂ/׽7: `X侐i K;toE),iJx}SɮF-ei`F%zm6xAw3،
m>SE*JG%H0e5CTLTIx$KLXU3]Bp3-XQd*jE^3(qX$QS)=TŔǒ,$&Ci-P)a.a:-\aaR%Uj1_O:`2|6-]5XWD^Rq̛q|':ES.||r\NQiJWV;h
>)JqQ^RqB\6$&t
rT Y7V2U]ē}0<ɩP/gzcֱՖ<{	KKE7Mi"x	3dH	})O|'_6G+v;׮A-MkBR-^R
#%⪤R
/'euHJ(ٸ/CTh?W)g)7q??OsTXIv{nrGHmv;kݚprKI;kwo ꡟNG;elZP&9^Ϗwv}/AC~+J+rOagRx[ pȴ-y	{*Y"{ĳl^7z99y
|ihƊc'[
Ѡ߽dﾥ99qNʗҺ&cROy}MƘND¾(~d)iʸU[5*Z00h)9hM4J=kaFyƇ^pa5gmQ1<Oc¨{y:u]
5&,E0[Lr:ZUa	 #m
mnؒ??0tlFd,_?>}*Bx}΢X<sRpIR)  "pGp˿/vVCy@ʦY*	,A'}K d p9Kp&8n2Hi LT|4 fp
.RUד?Y0VR~Oc>_y5+ڿHF@@mk4klM	_je_uIE7mLlӕI$AΣ*+TO*}qjdYԗ5T![mּ1Kr 7>p[mb1b."K6rrs^
<q4AQ^CJUƇ*6Ly
_yw:uc^j|RB$vLx>>|n_^4̚h.4P'*Ac*(F?Fjxh;t!JMOq5Hn8-Ň%f Lr_(Y(YC[gp'NZq	nE+SAߝ	%:Wu
dr)
mR%3 0oF6Z`2Bj;b&F!tM"lxuBa&wt.jQYjLE_A~z?5m!>y">^Ky;ȆsGą5^ĺzom!z3_ HGб]E~7ہTMhͻs;HMbYV=(Xs'ka*9h??W1dNߍ >8'O6b=Q\Dx}ɮV D|ݣ~p-uf2̌2c32J-TUes@"d8<|<O&Iq)HX0<0ɰMy2d@0KEO%C,M		!KOߛ|JSV'dby
_:S>4WY/՚|}'<)r?H$oiM߶_k+rKoIv;k J(ɢHΥuŒ]"_W6Q8w6<DŧTkYzwN0@Z0F|Fec]T|z歷#WAu	c&A^{XA_nͦY]c	q6{^¥%6yEGRO
[5ETįLVah9'
g5D`(WNvdC{ԄғO~\||WH-(/$
V8{6{('fӏQgj.ț?[h`i6Z3a{׉O8Uu@Ha74HUw$H^;}EZrTz
Ej>Ewp<Y/SGfD){6v.W@CC0*cÖ `V-W~K(ǄjHv%fl?}qv6H .[QoPL%of:j-`XmG$p%&ֶyϷVQye(멉41%8@Oߏ!CK\UTL0X)HVDx}ɮH |Eݭ~zF
lE}3o>&!E*R!E0q$"<abaEA@,FE1 	Y1ߪ@0!;p~,"]Srxf5Dد']UiW
~@~~[>̆Qc?گՒ&YMMݑOSSaYdE\Wx
D.?%-$IܕԬrts?bЭq44}<5Ad߱與oA9ܥ\i!w7BHtkRu9
*")"Mt-]r錧6mq}G(=fPLhQ@K7.窑ʔ뽱BG+?P~̭|QuH2vIJcGyaA>3vVh#Nk'iN/kӌW0ݍ$3c[v.izjP,QӨf-]jwѯ)WnBZKK0╘0!u>787=am%ۇkqjJrB=HtNp/Nw'K)Oz!&I7ӉcRvgdi.JћVvl&=KFHHHזYϣ֮R=Kݣ6FyLtQ0Ozo֏-k8]0җHot)sTqNR6xe?p<1}n1Q!mo3PJP|&TgEP&B*l(ʪ'aug@*
^iBx}ɒF ;_Qwb}; Abo!	}t8/"yy0,ϳ2"W*<K2)ϿYʉ!q72+3%HX`8JryA#E,EY&e#p
tXk8}tۂ>0ϰ4É4A4M|k[3Yϟ?Z5TS]L2]o' ^ۦ|-И̗Eoai`+XI8ϔ`GFfPy(0nI὚B7RϓYMd[Dv0_d/QiQI7̢qdBVVGMM+9bPr|$&.%{kfB|cݘ\5-:RC$++JA 1o]\z#CGe%,#vȏxz%^H>З`$l__sH;K.Kk[\hQ42^;)'ob{|*uL'5~Hh[gNwdk_5G[.v	#n9m1Omq7e/Z党@̢iؘ8׭"Y\0@;e1:)s?+6Nb~	.kC {4ci-qʽ|uV&i,~]XIZOGt :wns9&UO\AC;jNٔx=
1@>(dcv@DAKىGB,
{kU*iH@AY2aN:Jԡ'q!WC%02y,}Sŉg/Q+ˠm2evCg:Xk>u*?s9Ȩ<aJCx}ҢF E<E[Ij EPp?(@K2TT{Wvi
D,Y`)y$ZhE)/swإ/
DB"$280đHp1I$"	Z4p*LҮb , &ٯOt黚C7 
<D'b1ߴ.)^K"wwޗ9wMߛଟM.?mȲʲk6֎zQahÀeقO[>Snw]|x%Otk$jqN:wqnK0(QLEa_	SEp_㌇݊\dsӸQYǙ.um77VaJov;z#S@wzȆmL\6$+P8t֩?q%nlA=S0OczϧWOܾBHUCl휑3ā/lQh[ZӚn><thgagܟaF'˵gk&Xy&ji+Vgwgu[ntna];23u~{Zn5%ҁOM0^whlHd<~^uJWha]Sf2/sVuYmHg27
%zmQ<.7|dYj܋<}8FaJσ%g5Nwivd98i,^_
jTFn;<)KϰCAf,1͊7JxIC+_'4sF0;	i
.9i_u6S Dx}ɮHE|E{̓T*`y2ruձ	H"t!e)%$KI
I,Q$ҙ
pD2DNų)$1ǧ$#&Y`p~\RNE?GS(a	w׏hhy9K_X&I)$m9hz9K~_-ןQ4<WwoG9xMDeEeOmzV)	E#rtK<Dz|jʴ7'sh_map琷	5OԳFQ=$.N::	KbE9Jt'7v<
}XfxZ`
m6tr.~ /ۊiCV>kL˂"_9ʲ۽%DW5wX5x:q2^8DzTvoLvMXQȎO5]y{H7<t
Ml|5]/s!oANoZ5A}	(ތ>21 dy3e.$9\`5ՔU;o9fJ?6DWZpi9Xb`a*<kW/:+D,vc W.<}hlulcf_h燥l5~w$|(>+ѥu'J6
\Sui>x"	>sOXV]ew
fFB<3eX3"|
A8وm&M(
;737B&I{.fZiT/9$	F`rd*#˾Ժo{VWBx}ΪH <E!939EWqȝ,'S/J%"C8 h(& F!F¬ . ANyC
A"C `r1m~ 
~Mc2_M;$]~eɧ+j?dha~MSZ$0
bN!ڲ.-Y3vGp6Gru9(H$Y$GvfV
<MWG#Y
߳='c|y;i9NǲuBjw.O!&qm}@a{PG_H̝k7ּغq\{f\|܊*S :J׌>-:,Е
}@LD׽nMfpڌ{G`(h:YFC)'w,{V}Ac'B)Ť{
`fk"Yo,	ۻ2fJzrvׅ^hʊP`^4~z\UiH+sa
hWr#6z/
MAd
.RCWq6(J@Fv{!"Dx8[h<~'fW*2Uu4Q?(Ձ(,5J;w
g!N28y:!{kFgzMW. '+ۼx'S3ؼjYe>X54Q\n=G0cxp	{{C(;HK<P}6QGPʐ$&U+REx}IF Ƭ$vx5,67MSR*:(r $D%X@"#;HGTH0CYHraL
aQb1WR(i o7Ϻ+G*7~O2<?~ vZgH!ϯT d魡izb?7VݫgS-݀ȉu6.M80=\4дXnhe$±<bZk&]BAEc@3~ZiU}QÒa\7[jpv>p< Eי//;^$_kEK蜞Կp=wLp-

wHKn.!ײ|͜2xXoV=KM2qoʸ]"_SÀRnN'xK˲}pTz>.Eoz i}b(Gt8yDl$9qUUΉﺊpؕMNA|.Kgd~\Nj[/혵!b
s1\Z<uV٥ Gw#-n\Cdv<כgmG^SyȳPde2+u'lMע~N1y=c}0^ӌΐK<0;DÌ]9\Ku:4NiZ MJ6wԶ^ҧޜh{T0q|;b~{8D}Y1@g;"VqkWpe?am~ǻ> }4%Հiwr^CCx}IV
e:Q3cc`?×јp/}IQ)TBcw2r^HH<"2e\eC:"AZ3 K<s,/KQLe()FU?t%zdE>7|~̇U֨/ط$ð@`d!>GҮeWVTߧDOwI$A.5UtU
`mICM	cWOUUzKǌwWw%~STN/c׀w}f1+/W/VaMÜ/{n5;̞9G1
BktVw|EƴQK6 =	[SZah0R|%[%*aPΏ('H՜/`6ػ.pwEc:v蓤Ps{oolw\>̎>XM ՠZn_L[]|孏Vo?O*ܶ<)圜$Y:
\2h1
)]AaigxB|JZ4Ncb4$s;[Fr5IlOMT;:쳏?<:&6^&JmO\)ϥa+}>KiTmYޜ
ȡ<oabܪ v/!z'4agRX4JzRXɀY	%gE('a?|fׄ/PBx}ˮH E|E=vEdE<}nw;+ك5 !M	2'	IR:xKFS]ғf0P0sfDHE(dY*T2r	,Ëٯi մ=WQ)m'`ϰ4ͰA4M}ӺG)?ZCYh po|	ߜx:VdYQeS}{I=LiSeiَ"WS̬v{)0|S@Zr¹tAZL ?/,^TI:i`J'bQ'd[$زKi8Fkجr+V&R/R`Xgkͮ)
Yz+mctwFnan`BgS>dL+shЦ&67ŃID{cr
F9
X/l[^g|2t@̓x4h_c$no(ٟ\EXoau2Śt_Ql>t+|d{fFQ$Jv^/;\aFe׷q?jj}輊j]M^QM~#NM|^^jqW|yk^͒^Zr7;BN:YVx}Vp͘wzuF)Ne?/b
1KH@uLt؛sI+
b-a_[=ٺʢ(
HU{HوҲ7n簕2ci+9<МA=IFΚ;j_uּO]Ix}S[ϢH}WtfF;f@PDPK7["}l^ɩJH0$2H1¡J
1fh8Y!#'HHDY1Q0PDJ8##I1&T8YKTm yI`xYo4 2|oZjc6E@P$o@q(hLiiy
}
S?kp
P`v(FQ\7ɽ7
]qx?EIUT;3ّԓS&͝2
<g[|Jı!w.Þ'pTzm(SZnk})~FłpVUMP[c{KouQ?<p>o٫]Az1Bakt}f:s^RK6wrQ<ǕOT><}贒:0
5!mwc:}0=zg},?! 'Ez>Bp,Xv\e$Vx.Ko$SP^s}GyVsS[P}=ѝy7p{I]	pLSFxem*\=)X"lCICY/{طe?MG&)S LB*ʷ
myJ"7*{άn[iu/msNEm􅹴/:]}B&摒`6fuci״^I>[	;pWד@2/C۽&2G?p?':""MU'40ik@Hk6:I6ߢ*Kԯo;u.xKj1D:EM%k$!{z=`>Fnr7꽂
C59ֆiKt6D%&%K5IJ>~u|o*j=Xy۲L@] ʱ<l0"NL_p<VaS:[]fx}1?yT-Ex}KH
ĽRBJ_?LG/':_9yc:+(8\bUV*dH AlYJ!uz܍Pȹs
f
W$Y 
±T6w{Z'@T$N9fDدiz|o).nO/(KRm8.&)WF3Lۣ}ӧ(ߜ)9l

Bm
aN:\,IBI@XkfIpnQ+@^]XL*3$fÍ75ŖAYɬc{gs袳DEL!*, O_SV0nE»wg',KAN=3
Λ}5noS iۣv[%ƕWLzN
`;NؘRՕܼNЄ2j"ba0a`&ȋZx4-R9hl|d̒_[E2c>·bvhP2%6IV˘
<2sfǀ;ͣ3ļ.Hdq]p:oV>HdLhIC3WY\{4'g"<QmR'BN럶isnn{H9@/}R݈_>*m5xy$BoӼ)! j.BO󒃸>]Nu3+H#cעX:JcWUy·x7'.,E[3F}f
/,%>_N
OFPe#ioF\Hn"KVƬLXiDx}ɎH D|EQKfH=f3van	$2
Yg88>)zJ"8U'@r.ʹH#Ie:f BB"iZȨ*[ۃRUN*V$";I{nc #APx%gDc
~_[ٕϪo[@خv} LMknhI?I7rZ45ry$KbT+2+(<SW3]\ϙ M8y'3(mC[c՛z. 70Y7]XfkEbt.ªm
uY1 FGxv]1>*т[^
!~WW>64+f2YzR_ֆI!
!a;+\|Gn׹$(Pyieϙ< 7MʼE
_p'r[BnP{>`|KwkQ'%,99!Bw:Λ{WWt!&fn 

Md/|wEe^z	ojN&\-6qDqa^B)[U^,A=eGl:9EKN/ױD.<:FM%[Y) ZSJh)[S
}Eҕnw篬/]|ea3 [cqo/]=rȺ:!
W0`,Jka-I|[|νkq[pK/OXߏ`.'[P@j|?%Xx
0@{q*!XIZ(C$6k>|1`GmHbM<]$;I1ԔjA'f	IK:IXy~]~<fm^ y]簇
֚OGUa'he]@
:LDx}ɎHE|EJ Ri0fNؔl6_Zmt{O3F0g4!	I. @(e{0>M1eVbB9Ǧ<PD):R"2C$\0^
|n˄10w%n@,MCC
|x"޴mrKSaGwo_N <&-SdYQeU\sxz*²paɲL+%vRjrmfŃ Z?Uxp}bY_F첲Qh
"BL7.iXnu`jy 뫐vJ͟	ނ\W᫫f[rMJR$-9TDЍ6®[q\ϖc*ooُZ,K=OBNx'b4t#r~ZA/7o{750t|W;*!V?K;zsjgz29Jz^ޕقtҸuʦ 7n']{?дxU<϶(py=KԏJX<U*3lx;vhH.v67 B\vMCiB=ĺs6}5iw\8a9)5=1,"drKq~z)|Ķ&aJlπЫ2Yf~P L	0ʎkFeG2MY!YJsQ<K4䔼}]!6^:#~obo}"dFt/MM?o=V[Cx}ɮV D|ݣ~2#uf3c;kf2m>/I/HU2!()<y*cQF17J2
sF<6fay-	ٍ+1@@g$a|.֥&~Z4)5	%ė7haBc^b!$IH	MfYf1]j?
\b?xZ!$'yM0ueESO(H^tȧ8=5KI9AD&7@E8jtid
5iK˝g}HʏD&ַW\tVSm視}K7Erx{äy?'sXO$$1S$J.&d3Nn%;4}i5|{G	ýZ DTFyC0ƀ-g5I[P!vL'hUN!n
6>~yTz	>qr93t҆ڭ볮99,[\L"I0nI+AcgitSǻf"aE&P~|v)Oz_ٌbqhKsg=^
?w<\#<>%~90#Igzl6'||tZMBCi~F8>
fb_8j8K`ɉiESKɬqJr_Ґ
W$*4ώeޝw'Mj+me ૢrV/pPAxuIF	&Mi66,6b}<5yRITRIG/slg_I2RXa43rʊ#z4vHJVL|	1Y,\Fe.X:8v݈2k~KcG5FVXF?h/my#0Zgur苩*ߧ}遳m`? X]BjoߟA,BT¤|O=	תZz*7&!b^8ZO8fπLwu#xnc,Ţ=8wn n8[l"FT[2p1Oꇁ3k:Ǻ%Ouӡ׏V5QXj+5[OŷØd;i(e^y
j?^U,܏|~-OX߂)+dV.V #$8V=s_myһȉ7Uoo&(.U,޴&BՆESD[aۮq~^`gT(K)3ZUZ	:xtлˠY¢k{
zH$-LGO)9H k}s%gbI4rFTYcva[hoh@JPʒ^_)gxҐ;
;5#/%H|8ߗKaZ{GpȅSh'&H,ӳ%p
\gh{Rq|?~XP(Xzf땯uOĿ0N/ԏM7DpxAj0E:\Al%d#dW[F	}]
z
Pd0'ɱ
iB߱X$QTX^[c}8wLA8;'c%{KJQsz"q
e9^k֣aNku%|}@})mgYXCP?5QXxA
0 y~@ɚ4ـ>l[[hm	[xVUP!$r]!w^0b f㪯.%eu6
ɅF)^U>&4qxZDTF/υ\]pZsejMy}n
}MKx
0@"LƱF`'vi~PdlO؀{< 1cC#!IfCb䦫	
$	}@,^D)+:~ٴ5Z&/|,r'YG vfOյ gH@x}ɮV D|ݣ~f0ԉ2`f1\03K(<Rjs!0<ÒP2\))Lcrey*n5\fh($§75hzzS1'_ͱG#`	M9Mߋr:	k9OIsr,x
<6Lɓ	BhPOaN."Mkk,vFbKl&߽o?Y|]<ˇ"ߵ&V+Jr5_gI$jw<sxp1,RYeU|->vk
d>ITx*#V)>y<)(?ŸK]sÀX⌽Ҵj4MOЗ~{fe/(i8
o&ZJٸ8S+۾0Y%҈EKT%i`np[%mt{c}ƠZpÀF;,򔭏taI|&o%lXvp5`JsߧnCyg7z}my4'y'nÑQ;f,;oN6uy4Mڑ+﫭}++?:+X( '+m[|zK﷐v*g=:{%q/HiApB11h%4xBSl*_M<D;x340031Qs	./Je 2Ǯ`Yg ^zfIFiI5a*kڔ
̓Z!x:2̯ԟWMMSKB:0L䗌L~]"KKs+23I埢ˮQꅨHI-*I,Ie`T#MME|*9()?O7)'19/cG&}#9,89_78!b]+{U,{
U_TZ[R`_bF겨K_տ?=:DQJjYfr![x^maswL`(&'&1cx\6s#LhcZt0.?ʚYJZ\*]XȰ\C7lS#uAs
9O{Ni[t_U!ىy)YB+Ef2gPIEy%_$2]vlr_XgIOl!r2su3r2SndM"εk%Ӛ0(ey驺yy * ?3D795(1z=9	,Ѣ{hqv~A*C޴;NL=a{FhyI+'P%yYyZk_cOnNr QR\YPRiX[U?,H,axtiOwcY\y347_7'?=3٫^!2o(*I,eЇOgvlʼd)W)$u'jBԔ%&edTe3$HJ}?%UO Ҁx=
@-XxE	Q(<G3a?E}_ݤ	 C1Z$Ũ( s1VuVŮ^\L!Oa[ͺ}
!Ҝtm|M=*ژ)юthZøqB1G{:B
(1B|pZ41e\"}\<*Z!>	ox340031Q((ɉ/J-,M-./I-I,IMaX$kuWU*^gS By~QvZN~y16;07|~\"{$dxnA{?ő\D"Q(A(=;x<ŗgKTΜ׷/@WA)淁uJxTǷLυh*X8VLkB7L+,LLnƃh4Ciύ)mWw)t$xqHhtC:gWZŸ6ȍʪ¤*Zx`EF'KvN* Ы4A=KL.-	GEhKvT1R$g5s.lBV~Z.
B?zEP2
Vt73t=9:½聣V^1[9[YKC9c^v1ѦlYE/b ǔr%	[pe>tID{мL/x`1.333n6=DKDFkk$"ܠڮ	wIHyon=X
QNk\$AI=M`̲a$iU(}|ULh'$ɔu`k)`eӀ4x=ҨmJԭ҂x%}EuSئ[	Jܳz~v;/,]"lOoFOI:=+=*Qqz?_Ä`Ag!}6'VK9L N22:2.ՖF}^Tv #uj	
|.sx;s{!&,&n6ff Sx340031QHOK-J,I*ӫaڙw{W2kc oxVrH)ؓY %I%)r5D󓬗{>=#YOiaZ&"iqJx{v|7Jv`ěEP<iX
`%1\%&,ei%4VǗ63+hȌzg{h8z<xp!CUε&ps'rJ^ 1V20"J9'0לpg@(
67f<!)8,܇?@iFH@ȄJ/@Dc^6ː'ӧ2{b>|ӕUWH(aߜNΏ?85poghpMP`wkcեQ1'OR+O.̹ncm܃gh-:OXZѨf:VŨE/>V
_jU@$RuPC[޷*k'DoN*8r	"Gd6oґ4(TF4w֙&6_1vxvWȳ_ v}'0w R*D*
r9*E-0i|W9~+/gӣIs #ͫO;""
5)>g
>̋>L&tU	./%l+itmTaJ©b	Hwr4"ȯ61߂&_@<z7w%lp(ۖTV?3})'3ji-WyzQ=hb-u
$X-ґ }<EE"ޕJӠB0mHZ8kE1r
*
.ڹ&iMOӫk*~iVCǨ^}se/^>BRN
2_zMt4@Ԓsh	RE
?wV¿믍TAԳBx)K`C*Y3򤥖$g(egM(?ي{Gf%vrX  XDxE $relevant files change:Z	**/*.star&run:\<e1Cx]RK0W8JޛXM	KQ*6E_ߙy|1l welo#Y^/Jsp4m+c
'#"628	GA`78ɸэG0Т2#Mt5r&F:|rc!f1{D:kF. ؘk#7å#]9"CK3܁vu:GKft׌r|E;~v'ԹoFxImuh_)ZQGf)G=U؛au8cwf1P-Vf˵ YCՋ\%x,lj nh^6;P+r^iQנ4EK=Y.R0G\/- iTRDVXc2.c+ٔĹR8T\7rɹj+U_"m)˕FQyBUx5sb|5vZ>X|)9sqP"%/P
Y4;خHoHUR*e)uZd +9&ĕB^WU"/??i[xWr6}Wl&54-qDxZOfK1	 (Z>(=gϞ]='יY:|
LSA['O:
S*TSnl2[՞U
Aw;WIxgjQnjkJܥ6FAo|f
/v@s_6Bnak3i,fwg'8U:ϼjĊ|EzSp
NnkL[Z:d,Τ#;=f+vŌ+.vXf98f<Y@_Ym5@?T;bM¤<Qv}LVh<ْA,uE[!֗mΧ!ry7Uz!áZP|fKɇ pv0SeQ gk:Tv*u_$Rҙ@#=e6@xj?ɪHcP߳ypP;P덡=
nw/G8IF&@-%xd;xXR4~-cL*cT	+PBiot$M>Ǒ%؈NePVZM&Eq|*	Z+K3)uӀ,Bsmݐt뻖RUa~E~8J-8(|;(wֶw>[+?7vLzF2;݊.C;<P*o]$V	p}G6@[GX|GQ챃~
! [G%A2V
2ʎ@Ii(JAsc.b4vdp7kʮwsP$Aj5_|yNF!ghkQNsV!.dVqZ!Y2
n
\Yӎ+etȷ*zıҡÎ]KFr--WGJC"֝/^[IdH] 
:ҺP˵'tWb)ăC%o<Mŝ&=T/rIE)4T2Lf$aL0DG1|Fò-
z]{XѺۀE[A`z*!LMbKMVv>H[G\eI6NX^d'biѩ㈣7B`I?äÐ!'/^6)ϋJ (S;iwJuIH
r7eS&ai0\,FԔ~,AESe2
apZDcvYoHg¥oťtIE*Nsafp!P=J8,i-cL'{PxJ<u+z<Fcf^&@SYAjQ(ŉaQ }ee[NEwũ`0!ނi e hG^GOlъ
7؈̓s3dBQ|cg2A$w{
\Pz=GQ!/x Bttpaz&'e]<9b!Z~]Ĕ8%ZJ?Qt6,|Djw<x~zȾBM܃,ˢ$xm<?1~$e	ꊆ3Wg˟/j':HAgt)F8'Db#O܋18ǮP/)Py7px]1ǫp 	(.Ar9	K"'@(fٍ'zsC"Q" j{hW,޿w|}coT9.x{O5I$d/r6e4eHjdUJUI>
ރW(ZIzxgIʡsIhv"X[t-dz,*-^aNT0jykiOIsh0'\V1gQ!ղ_,dc3rWaĴzMp'lV#Y,062\>U9:!BW,wwλʐTi=e*{[WU#LsUV[Tz t `c'CbMd`4ٕFGI
ATt7'O83P6`)#KF~߾;;'jx[ѬA#8/ U3dG1YY?; Öhx340031QrutuMa֝ƓW6ol݆EyizYyKȅN\̼Ē<RH~^qIbC*k>DFtst7 @.xVrF}W`ڬDM>Uq;'t/L\KEt^(R4O6wYm`RL`&=`pqʊ?QIPd
dAe5*`EZ`V}j(XʆϿ.W4z2ӱ5H|{WE#:gdz? IL}%,%!X^8vV?02,AQj*UUlI"-ųh!sXd2 O%IoٖW`x1\Td
a2(^30t5.pf+)e\Jǲ7A.!kJn'u8/U:Ʊ#*޳MSVOOKZ66RI^b]ԼxqBdwA/˃I7RJL˿IE7Ȓ׆:THR8̰4Z1/!:rb߳4Sj`vTWtހ2
t0޷v3]=jG dHvFŵp5Z<̓Gm|}#K9c_<wGeIK[Ay3KLt
AVU_!ueᢱƻ_rjW^XC]1\<c[$u$f
K[~`z$E7oܿ+'/9Ώ!u߱JQ\Yz}\V;^׮%OI$1zOhTd8c~_1Q7߻e?4ݭHg$\A*tk5[oZymVd R%@1V4*6WkGE%z$h
.-*MU4͙(p4R-Vi3VA=O:vKFNq'	
[Έ6ko"]SWn>I>OM	|+2 ~Fؚ4K)h'
~x$Sh=c--̒b|-Լ̼ĒD--=.]cwjďA<G{j^jQbIBbL1!''0rؔ%mt9$B!%hZ֧ 1894x]R;oPP	:nZU%Oc*ν}	@f/0b0 ε:_MU=|8~*I/1BIV&U)U"!"i^F.}8{v{Ϭ-x*(%j1R
銴 Rii ^l՘i#Ft<($,Ӱz@Kv
 `U}`]tђ8IǰhV$X@iJnhPQBRdJr:Na°5xJ7@t/&;b
mG#Ŕ	~AȔg!mK몾J3\xݾo['g*LhpęRqc1/紌a$gHl߷+yӔ,^Mi\^OotN``,ZgNԿ	ˋ4׵2aՓ¥BPb.$O#eq5~q'FܩLδZtR߼qrF3=wzMc&XxVPKMURPr,-ͯPQP*, e%()r xX[o6~`؝dC+P  C%a#*I%M^$bs!ЦQ_f%\4|k"ϗP)5SDpN~PX#,9
,3\HInA#Q9MCc!3Ƿom]gRh\_\I^\强5D!٬ dn{Os"0c!$I(A=A,W	Q#);)ÊrAix_I+5JL~D_&f˥h#$hȺk/i=ۀYR}djt\:2zVRaL=K~QejƠSGQ#CNXyXa;=/za\YH^|kv5lJ%6.N+f1:tJ%L~s:+
qN
0OI-XL
}07,23U!3[".-ΈWA.x-*
PC.*tDk8>_&P{M*뺤A_hǶBe>	N嫝nlm&
`J'PB/r3_x2Tfw\fXS| ,+Z>1n|Ԅl
u.a:CdZb((Žf)k#M>.Ehn<I|<P=!5(/R\,Y^,ś+Yr^$BW֔1a+b'lл%Q	bZ⽶جRvEs[D@+lTGkL,0zcE^#ӭU	 Vd&^[t\*@ۧ׎KSDle@aFaf4%TiWڸ8CMc
N+8Z.hklwAL#^3*?$5 <mgXngQ莵_cz
zcw:@1v^CQo?l2̆
xߟI|C8Pn7c25>Hj&W@Ae] z@`=L?
M$6!&Q칽d݀]${nd@6IйAýϺщ#rcSM!c0!k8$NkpgtkcOD f$9&RԏNi:&06Ech.Nx0e71GtN }=* =b᪫HB$ _
5sC_6 g9M//r? N^#!B~Cta}}G@8c	$+")E* H
d `Y7<o∙ŏF\On"e5|DgokHU0	DW1XО5}to?7-apCۼ`<E|g
_H"Ak/˗uhZp6 O{(3UנzZ֢3rjjUHEYCfC6v)\"/6S
ǮQ͟?8/o`P͵螀N&bYMwNu^G}p}=wSLR;'vWdPL
8R).;ivY0|̳3ܻ
o)[3],xiۋ殅t87x340031QrutuMa;2SeB%ee1v6CoҧGs})+-.+IM/J,MI-*I,I+.I,bP~X\KҮSus& d*7*xV]oF|ׯXB>0\0Feh"K{_;,!El	novvfVGt7k֞[+4~BmBfGGd!iyڻ씖g[UΑ7;*ن|˿ޝ/xw|Ee֋*:1IQ$P;0]]ӥ@JfŚwl"cMYD[[)<ZZK@+c,s*E/:sd"E	٢̸{sv!0T|0	:$F#Q/ZL` &h ؅d7&7o3":+tg:FX1a8a5S	]pT̚E-(fgZg*
g)5Oft_6+[Pco"%WLe*X3ί`zb+F'6x>	zCP	hWYDbK-~h|,g$6W	@Ce"p6Rh4#.Blm;ICx55H-^"Lvȫc	wd
~Ӄ<efɕEC\FVf]}vVX<AzC$wFI4cJ4cN: ~P[h~Ia먩!q( 4-NNܛ+-5Gʢ,2+qND4ʯh>eZBeN!LbFH,Jh/^ޜZ|3%G[1%/:au,F:&R=|@f)Ngim=k U,JHY5;IV	xBP:S 9`l)^9Ii!7& "Ǔ~^D+rRn!i;]ܤ1"m%HSXp)F}P
TZwˆLzs 
6DJACc'WPZ>q,lե[rPk+J*eC m`e⯳
cY,8xun@&,6\7 8RVH$iŢHi0ĨuSǑ9Se<6qid;^`Ö5XI
f1˷~u?]/pB]wZkf]Rw:Ar|UZv}%𝽁;;k-$Icj9?s9H_c{`R9E4Om5V~9@mwrd(:~N~6cӐCJHd1kVJ&LNAbd^XO.yg5W~[ٻ9JR=!"T*tHx54|d	*y4(>d2#%Lǩ(ܣҔGsWPHJK/oR<Υ' ys9d!ς)7j*5;2~y{<,\nmseDkT6*o^&ՈCrrcyth1GxVPKMURP
(O)M.QuJ*yIy)
E
%`B- xX[o۸~(u
GsiM,4mFc5%?ߐD9N[97~sv2פS׆2Jm0RӲ'SQ+eH5Z(
dTS%UEiMK#T!-*:mFBhDӘe2b7^k-̈́Is_ۋHe00/MQJ%"7]+0o*isYU&F7Ϥ[uc<y=Yn815{^W$C]XUx$3~#3+]Z4ejr+
]3{d&K0(/;sdϟͺ11FE%q46F	/ 0h>cX:=b]掙hlcmU]HG\P$c.ĹF9EQd϶dCQ~%! 5`B @b婤J,ʱC^Hm+UȊ(MJlOyuU7ʶ48|%ih.$
koSt	וb%_NH4BU
2Ue5!P("LḠ _PCkPR'_/ūxOIG'Kׯg:;=go޸soea1	eId]7=<:>z冁0X!+qϹ54yQE*
O'4>h
CR
FDk#eQ̑jG(!d+&Jo'cs]ӒZw|" d@bZUY{H!`GKjz2>6܅4(?pׂ֐9lmms݀n?k_¤B$sn{'/^
v3;tU4N:7+MI#$ (o	u:H. 脦ɟ2Q{~qr
<Y)d\z
Vl3Ms{o7Z<) $T`C^ ,FS(9WxEr(EcY]#߰u
?8?}XeUwf;I
*-2h	zqߕf1^»3XwGނ35&W;wO=;[V\I~mc
ؓ=]]|ﳇ8 [qy\h,ѳJiw0>c >9qq0Woq~e@xZjBd}ebv4GrOA3BtlڝT(S'd+TYAopԻC,P(HWQwrf["_kӃ´w|}>vk}ʱB$߼e9hUv|b]%-s^M$:͌s-֔U3/k%a#Ƌ1L(g)}Q0ǙG`!&	uq+
xǵ.Ep3I*ɷ^2Gx0<JpAedF3Hncw7t?9Oғn8P,6^)\XvsJ.G{4{Sb˽,00k7e?E`v_s
~vXK![X|.vS:ܘ.9{B@Lΐd[N\mq'jW02[w.w~"UJqKŊ{v.Ku[}uA	蛊m'.ȇ7<C)a{~o<A'&IՓrޓ=20yZTTg3x340031QrutuMatxǒ.8pA"uCt<?SWrN|s,|{~˥f敤%d&'%l"Uf5-(4q++ ha3W5xTMA\vdEELOOenOw쏄2WKnb7Ax'X=foU{5߮-fRdZ=^,P9E=xOpc)B+N-}x!!19Ss^Clb9.d0ΆVK`l`']ػ~#TMDn&QÉ
_6^7ugQTN`'uL((74J3s袝%F Ѓl*r0p{P
Ƞ&hPѱ\ nUgCVKLUB0VcI>O!;Rr͢yMI?zJ5N\SCXX QPetí<d)k]
0Q_Sv[s,[Kf!S\:#
	T蛀cOǃ }橌rxX[X0"2:#X[T2W>^"+kAǠ9;O$sFQ>3Hgd
+4zg@B88jba_}u3yWB0Y,PpK?FJ,P%eIDD\4kʄd8VU=&Qd|&{`Iho0R䔙6TXCpEMp}$f<1,6k(ApP?a%$tdKf-:i	$J$,?gx;+~F|B6Ģ+TXVxVPKMURPrN,JSpILVQP*, g%()r H{
xYmo8_}:i`4"I{{#	/#)'fHR;\>D9pf8oRA,?ʙE.)42 QӘؗ"͘7<z3_Jd0eHXch}֌]Mɔga
Q.w5r`22-ixv%	IOg_BB"OԀn,SlldT& 8}:>#zbrcvBު]NT,E/Og.`,ۆܥ`s, w{70*㻿%TB>Z,|z]~˽CO#)H$Sڈ9EHLtp2-B9Cu.$1gF88-ad&1i6FC0AtVc&_LKΖkR,7"#RߓTP<%R*oAӁ+4w&L*ɼ~{5+ݫKqϲ`jviL eA4
 3"9qRSEaX<*EBrum?0f9y='`;FJ=g ʐtӕ<bSXiݒKcR&}j/
/p.  ! +sLnD
oV5ȚkЉT*B:]HMkr	5>PO[u4A>hTKU[3k+5p:}Pa-8≟LvQNEYV+5$خv2a,]n*=͔`|L 1 iѕ=i~BӆtݒvѯqS*e`YkoTjAO:W;;f@?]itT
t][^"͸ǤtH[Tb>q2&\c)Y@m5]yQW!JC7hEak*ˆ̈жC<$"EnYlؐ2vjz;B$Wh`ܝ(Kh-3m)܆laz
朥}`DDR G8 X_ M؊E/(_$Q_4ZWI7~K^tM\7R;NlxЋêo	Bٮ5`3M7O^.~n!-i])w8v&Wzzm̠,`ZiǦXzi6^2[kKo1[=W XrS -UKԲW ?Ѥ7l^׊[<(Y߱&f=A`vp~tyt0;\DxG#<9{^ߔOuWn6JENu.8S& n޸78ڻO AP܁p:BgcF~s0RXOS++gEZ],ǭ/{,Q(-3
>H
#K
̆{IU}6lD) V	J՗{bVzzк3$n;%%HgyuH$qinBǼ\{qT~%nV CnUw`q\,C#T"]jCR#OpSoAcFVpoN[	,Ur4?"5xp6\`&\W<B 4A`)tk_V4]Y^2֋"uܦ90[s3ABc͗f`6h%O'.o=ZB~˳ފ5L9`_mp}(o#mϭmw֏`|K<w@Nh6pZ?MwEitkg@1p3k
iaɥ(o._ײ%pU'Uo	y[kcsl2_o/{}*B|_;gySs,UyVrm輿[kuְM^nZ	vo[
CXh`?_7}dweh;gf'ui1@ʝJ.KX>>V7!sf5Z7r 6e3c}U~*2ɼbsEv=PYN%E-a-+>bЦk#OMX^ד(2W	>
qO
.O$x340031QrutuMaxsj_-k4&?i3(JKL*cMq>%(͸΋_ȝSVZ\W^XYYW\XמSwNq}]K? m7xVo6~_q@bm$
QMl.TRwGJj󦂕+TNX%W`'Z?6bڻ`ISmZRs
-Ӕх4g3ٙtgc*M5!|z#PcڗxRngG7V
ܚ9n<R_Cxxw
il/Ji煖Cnu8CzQǗԒ0i1B(3.S
p؜]vwS*v!uD: 0ka#xV<"Vǻ$;籢5MMW9vŽ$g~$G]0[Hn8?Dg865\ǌBgsi1pRFIX4 TwW=R4wJh{f:	Q̾{Ư3nS4 fznjEekDI!>,K7rcr&Ij $o<yhfJoSb8e3ǽYڨZLS"2J@\C-l4RRHQ{K%(
AaLo;5R˽P~1|凎CK:,Qz6H"	RwYuCG@cƌ2SHB!4L]
[Sqz,q69w=ξS/fi|h[dP4!F@d[1{y:W0MJ5=n&cnfZJ>B^>#\I<!6xɬ%rySF*5VzCDpkvV|١38wl$A|NI(ۚEÚ0ޮC5EXWXj~#0TWhyhbm+#7%|e ⲤJz8r77]~X?X:.Z#J]R4pYlFinغ@-|l0T= Ф)5xT@W< JU@2|QTJJshhU	2$Y1g*eR]PPzG["RxT"3k.]$x+6H]7Dg=~TUnTሜ2䤪eC2puxVPKMURPr,NvUQP*, f%()r xVYo8~j,.?U 7b
IP/k-H=%)s|3S%E<
E5	(}#;+㜌QiI@@?2r^tl- j"pQ"eyR~d1OtÙT)9Yo6~Rqx}FwWwlʾ~%^^g(mV15[U+z$TtEU<#C	LZ=d1BkI`g5aBSYT{l,9Qb$F9ͻ#j-Zg5D,);d*j-4a`k
]n
 H~P(9Ҝ=ׄeS.@Ky%Dg{܆
aV@Z;!`İ]rZdnHTܞ(m,9"$;Hh95xSlo.jdlIBk@51nS_Q#APD{+tCeh_:eZEAUGX2L-KCv|3J#w'Y]t.vOzwgbZFfz ?R奏|-q7%):6(]@hm }ρ'I 	x3]`D8
b%bM#}<p$-$5,2f{Fz*2}!}#X¢@B@|+%Z_	ۑ8BYO '#i
g
c]
K[kI{RǘSeƕ1bF=µSo0b1h-Sx:^9iOˤ=	n|wK
hmRiA٣]d~j"c}{ꥴOHU+s}<JE^:>Z9S5+>oMڶTʰRh5
bxLpc!?*o@Q}z^}0\>>9"_WL7Vgp:dA#Է)_BQޯpV8^0eoELy}EhL@PhLh.綉mVd~v0Z~ (0V\gӹ㜸jVf7
9ĊsgRx340031QrutuMaqaلK
)v*LaQU09tzs-MoqQSVZ\W^X_TZ[RW\Xİzjу K7x$<Ix.
݊G8 a	xVPKMURPr/*IPp	RQP*, f%()r (
(xWo6_)Zq"@j!@Y3iLj$-Էz%w;7ONȅҖowDHWZd*}\fɀajS/iah|\&*~?+FES47Y[>L\YqXXy\Њ9-_bz_}*,HbgA0'`'4MķCRĂw1f[8ApRzC@6ߜKj8NE%K\5V$3s(kN+ӧq*X0!AW8)@A'
^|ͲP=87
x*SpPrРc
GsHmr3h͠2_^XVFR)o}<TgyQ$YRr6	{ÊOskI*ˣF*:2>d
̾ [-3'b#+v 9KBaE 9s~SVIb|]lA&Nbo5O&3yjGPI;C_֩
^ʖ&p,nUbVWZF[VEМ>"&kZbfԇgelb!S.ϵ3&:rB*p	z@@X
z
Y-eY;VE/P9#Z!SxHE.RSQGJ3v_T["&H"Mm*>Orc&v;ʸ4}/Q|!3&U(XE})(2ˢa1j!K8,> J<CKG`X
`ƈd_i :v<?!kܕ(.>O-Y8
.5Dmy8ϱ,	Oa(:F0`m17'Xqd+S9>®_';Ӱf(w:BDcF6-waR¨NP$8f2N0mc"W7}	B&YZu(tZZd.n_BSL/Ha]n|ݧ{!jȓcc\y8h0|4k7Dڍ @}s'$n(fem$:߇u~͒Aȼ=<w
9 L!#xΛk7wO/TLX&\&X(:\hh7<OHc]!'(7x	-	i&Ԏ]HXo^{(8:8bðݹ}U%hiu
	*8x340031QrutuMaevWP>I뺞O4(JKL*c~ASCww_	SVZ\W^XZjbW\XuD3xe0I[[ T+4xUMoFWCl"&47uj[ 
p/wݥd٥77o<vvpoʚ
~}f:MYvKG7xtyBJ; #z__z__VcAվQBڮ1F%\k8u
->-`x"u)zU+~(KuYԯRw"]Us(<0
uMNRgazFiGpʬ#F&64us$fj24 JBxPvvpm+NJuzjFP/#8HA$W;eT 7hmvj"U=H}F"ܽ+
,kf([7t;Yu}7q1v@lN(c3_Bpr4(LTt&m->uWCH0nE0w傟8yY(}]B:
Q<gtg򻠷Ipgں(1y?qÈ_#ejFc4d=u%}+,xu}~R<Obr
qʭV-/Blptx`bu=	|${F~U)(qEn|A&D
{Ak@Muzk%oBPJk<J*e͠ӄr億0y|zAي%#pgY/ִ8RkMK#zgt<sZyɧ؁S< /|tB
_$&%/N;@֣ME;ˉ%<YVMTA{?Vl5K-k8~3xVPKMURPrI-LN51RQP*, e%()r [xXo6_塒Zv Ƅ[-/if}X`E;%Q )m}/ & t_<NLp&kf[KD2EM2.WB^o<1~i$;%I6P4[V<1wG-{ô-pYr"Dy{"~zfR5Tl2|yOwH]9J	f\϶N7wJ|[:?[̍㪚'?O7_#wbLJCVeј'oDi{)@~=?M1TDFT]* #KwZ`v$\P֠<G^-7mK2U^Th_/DvAC*veqmAD#.Cޥe/FW `MrJtXݳv/i 5Ez|
_ geWi3b3a
xM\4LZ8[Ht$OloR5QQjrou`'jMP8{IeٸzvA\pk U0Eo~i^Uǽ[0HGZHm3D7RgłV-U$OKl߾Ʀͥ7u=0!\ w7,W>r#pX#UZ.wX6,NqSCRl)֥ԂM|7p<
Kh;&;cݏ&`,c}[b@)
i0\}ڒpӁۀpÀ{HŀP^CEY)mA79>9[ތ@,N<S#B@T88aᑯ۪+IEl$}p؉:+;2ra*P<xr:}~{}<ikm'$hv	;LQ7MAfe +ֶ
.{(Dq:Z¼1ieuB=<#7775yk,>(EݱIJBt!,|595ӼƴI߾=0c}PJֳO3McICOL2_266Xm@p	IT
߱'K4Q,3J%V4Ef[*O~i1A-A&5kUՑ
Ag:gj8mesSl:y@V.pj#XOOBfT2|zcdfqS4:NQZg6-N)x7uI=_p1N8~bM+{jF7&
KhCaCqsu)18@:8f%,2+<UyZ^xZW46OInm8`xtW҉U1DOsVݛE܋O\Q^閹?)_*K?y@?Px340031QrutuMa8s|J?iLY?TwEyizYyoxV)uXYARLYiqI~nf^IjzQbIf~nJfzfIbn~rjb^qIb,oĚ9`F t= M72x;,|Xx^VΔ̒X2ɩy	z\ 8@ɿxVPKMURPrL,IQONMSQP*, Kd%()r [&ixXn8}Wʃi@Ѓ
v
i$/
AhYDEwC.c5]3hL/rBzz/Y>ms]p|?J [D<)')kbNEiZrG -*ҡW'sl5DM9[*;Bc'*H2YT셎38_&pqx>9.Po~^^/n/t_:cl{DF1:_σ"Pywo;Y2ADXq93\a F D=1)*ՁI
_;<@HSt{=KJk֝q,3:h'axʪ}\K-+RqnqF߃h=pv]`[Kc4#ӷks\mA#zhTcli}\ᤞ  9nJw"DqQ<#ǈa)ְ1 v[Ü0]1
	0'9A3qb-d^#,;/؍EkJ6uԥLyf
AB{qY5vX:N\IxQ=d"H6IiOcZ'^vq(3Ԏ y7$11"XG&9-1>"2qY-u\/Q:ZS?a($I"4qٸc~H{v
G|F0c<JWUo}5C{wةiu+m~N648b޹!&%1\GQ{uu&є
_ơH@Ci?^P?N@OL6:>VgT4^<O~m3kj4[bց (>ڎ#e'ɘ	O);8$8HNfA͒'n.z8YVٚWK&&yHBO%DנlvF5	}OR;?zU澆V(浄*ydQh1%	]]P꠻&]'~KJJf-#/5Bj4`]Fu:֧t̵+nX5:mLzuq6dG|mZF"rBx4JbC,Orl{gcaG;?N8{b`&װ4[0 oo
ynPLKYdնZ92h0Wc(M};noMe)^'K^2fv1E"<,aBÇ&E	g(?rKƊ4jrAƜЙ=bX>qGlɠƃӣb lVi0\
b/ .|nxۮڦ!qs? # ' x340031Q+IM/J,+*c:WGS.6y
 w
xŗ]O0VqC;ؠw]I`H}iB')]!l'm4M=rB:3 ^Ѭvpp;]tvx4l^Jj;w#;fpv9TI^@_TU2%xmRduv3U$e%/X2s%*mTA[$*M
2<MIhZ^|(m]mbwgl.oH6uZx,U'ΫBc5sU2/J[68sic^ ]C)8C_^iVÑ=Aŀ -T9:	3Ukyg%_2:
n"ԌTi؊|wMWy_lbFhkdzAeg%SmH򶼀M37p*ҁ
lp_?VJR.'TĶzԁ/ȘɌ^+:׸l]'U@qɣ=' aDιt|SȈIS@Wr(S]r?Ĵ5\gN']'s"oyָMlXj.j.5-̚(B$Wh`璘 ;VGکzVhꂶ"{dx340031QrutuMa8b¼dR
zsJ%,9(9?/-3]/8?#wmnoٿߧ=x&SVZ\W^XKU\rȯS/I10} 5"xuQ=OA
6L@@cgh`?@OemlH;
V6{3/AE*|t>G)	0P4GZlN4g7ċ4j5ׅB.-rVj;a
)LK!g`F* ])
Z,VbȢ,5"2Vs~w0B	 T*Q"˗z95(bd HcΈq&mNu	Rv-tAw
g29`l6ȄdY=Rw?o-W띏r"s/HZx;*|TxyVƔX2s%$&q sxVPKMURPr)J,ITQP*, d%()r "x[ko6_ Ӻbb\7F3N8-A 0p#KI%	%R/Nl]{/c1
.Mo}`wLbGa.n?qqLQ( ÑxOm
1RI ćČ]W[1sJ,i$E~w]8
{(?:#zv
޿Oһ?8=:
¹KIxH
xpYAys+͋:C"pR>"뺲N{Έ[`ah\OIIYP^,iV].^&aG<egQz%K>ňc|nye/$g
eTg^X"*~{-ϊ4.wղHM:{D.T`zy(2Sia~">[Lv	t۱re+3	S *HRaJPENSeSYT㺄",H[
WO50y+G*׃9a1Cw!J`k.(B 0#1N0m! J@s1ԳȌ JOUaeɡSc Y+Kj qYkմ*ZLA\@\:$aQI
{a'U	;w8띓 ʰs&`SVy&a/>gw@z>(@BjKk^\j{-XJeXNʉ2M9y*fV}tMW̭O'#L"x"0N5sJz	,	&-<7W;eLWzkb`u;-b7eۚqe/hSUN_y_FSlSR_>3եu)~x]
zHbR٥v)ܮggxz:r>n3Vd3vPݎyHۙKt;xn>'MfWoH"NMA":A!:v :A7:ɞ::z=/FlMy*t"8[<(k4{mx-zWxmy?^}AECI"~Y[i;r6ؼJ"*؏#
Eu~pD3JSWm*^KK4^'UX
6Z2eb%ӪRxUGan.)ƥvIi.G*6l{<ibf;IS>GIk3n$2N$8Uʴņ7mJ@gp̆
O#)K1|FCVjR	EΠڰЦ}SYH*[gNΠ`Z6'NgPphA!5`1TV)tL(%@~#MV@>DmU:teeݽ Ue=|F0%Qh(Ja;mef.#VFK<\jw:A?D3W"vȘ<ʘw8	J5YutC.55vs]M26
)\5l.Y֙m.n]L.VM&F9d
2
26N2lL2N:ZBCU"x4=*Ui"o}cж11E_ɩ 7S#4enk%kj沉6Z|noeܶYxmͰ5Ѝr$
j[fZE䖙mB[fl%ueJ۠-"t
!zgN`
ʛVx.VhBhZv%VLMi5񶮬gjF):Cȸ,KoFqtMph8?``:!N ry5paaڳFv$Vĸ'gp||k*R竄ؖC-ŉZI''m1f(JQV(;
P6&iSv,vbN2GmChV`90m?>#zϲ1#gIE>Py!;A}5F\j)_ 1=+K@LJ}-:!ABx|?HbS_*؜f#<?bR*Yۿ_߾%yw3x=UGޫ=Y^Q9KC7`s
l~Q=4R)N!R
#
=:[ΒSοO>Dj?lDKrfcaA5Vvu=ƕ Ym|VנQcr\{Tmym%&䲑׬i6`yhY+/	'8K+iV9ylL\V(.ƺyQx340031QrutuMa^O8veYl'EyizYyg&wo.?nPVQ7ņ,b5LYiqI~nf^IjzQbIf~nVbn^qIbCΧs̕y3m1xVn6|W,. )(ZIZEgFZYeR%)'YR8IqFJ\}@gvESxT֜_Gr%M	چ]ّsP1W[SEsX֜ጯ8#jG0'z6=,t{&tVk 9)SʌsǁuH5*0=]²S@֝V%L?go^۶l= .zhCFa Eh]Oóg.Oܲ]k#HѢՅU0ug
iU{]rn/=t
<(ZcuyT''9),)nϝt";.Mهġmny͂ݱr%j,V-(v>>zjR]H!2-m(Y08>w	Z/LjZ;kD(.7@
)PB`j:PA=*Kyjڪnk?Cc񬰁'y^l]%<$ьk>NEi=F.m	<˒Rs]DɃK}L-@D=b{؏IQWj%)h
:w27ovQwm0QRU0SzSt͗4a8OkyD~yxk;0F?fC^{
wwxcc;.^1[Y%]T}M#$h2t#Ub`W\:(Pn}[PϏVήB0KɖeC 
i]dYV!"W_E5yg	[_=rDZpjAb`:he΅xp1SXԴu
*-.{zFg;2B@>S lъa}!Zae}0.'g!9nw$vqZ\BxB(m}we/;ʰ#_[+x;$@d;]?W+Ǡx̜TĒDԒ|Ԓb<̼TTR̼Ғ/o !#xVPKMURPruSQP*, 3KRj 
ýxkSFN.r䖊0.(,Hx!XHr*YY3=niD?'Y$(]Ǆ72tI(=S\􇽀#~fQ xqHE>UDk
4v\Oc"McG,_52'00YEs.q~	#%nJasy[|%v99賻yA#/Z{_O mY9c2+$'~OwX yG(Y Gm
R ڰh>v6Zo-];r恶)@_yc `h4IKi8YM/&jޠ 7:پFl<9<<{qBtP
{';G<^Lv瓙rnI[0uaɟx	I=I}\.L7/1Vߍz/j	 GG] tb sdKWLS?l1݊,]lq%.r!b@ȝ 6FaDz|N	A0b
H82͘ _344XbgvdM9
iÜ gIhF!ٰ#ȭɴ0Tpr
py޹N9QY\qaL8ga!s X&?a`(
)n蛨Be1ꖃp$`jVzԪ3Hvi[޳]In$"@Í='_D6cIMk\+Q+v(|_LG1#a	(_yV1gz1xta,(+fq}ڑ&yFIӴi
gZYcu	gruLKWC7D[_T!3<~[ƬQrC}sj]t&kFZ08sT}79@?OvE(*M6,,ށIdm{eKzΑ$#2ia+%WF &+bK&kFFE!!oz&0EkE,rP&X}^lAg@mV4tA(ɫ2,7eEC\<| 4!I`,ŒJr<'c.jOj냑|Dkmfxڿꈌ=n=yV{ӒPMۨR)tB1}m	Bu9$%Qk׆9FxFekłduE <
eb	PWc@5%14Ęi_$;f bo #Q3Ѐ=1umY,_ՙ
č%`Y99P-l z837szx>gsBM[27|f7ܼǇ9kjK3	n"<y BQ;j9+
*"`1Fp 2w#Wa0[W-\uK~TK\O'm
X)[*-aߢ.18xB4~BJ7AsK.&,`CNL)j?"ɥxʦ.>˛:趸i`]ˠIV4]=h;#@!P:tY0	0;`v; `:yw;yvVq9)/\U>ҷ[~@3[Te3X{Rgωx:~qxN"n_YQ-3ayQi	YF dk9o[ueO &,`wy8
^< 3"`r["	[3ܳuS>gF3Ԡ؂.q_J $Z@?5	ݑ3弤	aGg}^>>AIT
1	>$RqoIAĞq@l8سQP%nT@
^WtF-]}}i2ކ1',kjiրD<:ubFwBR<v޽3?N#.X>3nl핣uOW]zWSCcLc}@%@ۛ3F}}lB1hr+d4n+=vbtvSzzWa*RD*&I/Ko,-M}L5#,~ZNmHڕդg7EGUL	 :`3
yՠ!O٭GcH"BAC{TsHw27ک>X-|&
"7*wZ,KHzig"b)Wx.fr
R 7$s1L/a4#PQVs(n	Nܗ8KUPVo%fi12
*D+AQwvFQXOO/bm[n]ACh$wPUl\o%O蒛U!Z	bauO ZՈ]GK?[/n3ZL+M
&Vb
 |~?qZ (iO/β@î^`uMСO﨟4?g|<t}|el6(A=jiv˙\>H_1͂͠tpbHtN}Weԫ%T3(8k H{ujJŲ!a2oI<(:JP%,԰Ie
	q
|ķ:G\Z烝(,d^t		>
DJDGd(Zv=?>k40 !Ћ(<$h/xοo.A3;ieo13ZD䟈7>n^_-
?yvٽG~-QB &jgjGgM'^˝| gQ7plyppTL悁-ab9PY[-h'^"p}/hXNI@4Q; d҉7_c Pg(i$bw5įM{,86ԣKqd>ӰB+C' <NZ<2 @9WG|n8/U, _.HB*xm$ʹtn `='^ࢹ/TR	U6kh΍fqi󞃴`k

e (<}?
ioy;
z]5i4B[sҶTF>X"k
@ck+5cЎn21zKCUSP~|}? U :[_HO=k+|4ZH<Ε (uX'z7
C75Ё&btSRPy9<ٟSWRS	T-օ9Z`,Vt{y=RHR~'Oƣ I}i&F"-/$/+UxTkA&9J1*
>6h6ւP=caL]wfS=QϞ<]ăGOBx7`+̼Os?7~?1K
I^m]^Kz
HF?ǩ噃)x p~.>%OZCܚH{^#F@U*D`XvJ[g:XmE@ t~ld
y=(t	k[-mj!p(Kl[fyn@7WPZ C>yV&Ǩ6'P:S|VbMTkFr
rHW7@oԷdp͊y	%[-jO_\3JcUTk٥cno[bQh7ޚlMdnvmT,"YnhQ2TmgRhxku
2	B"ZwS;ڥ:5@[9PVd"ƙIcmrm!Lx:y]86="p.yU8n
U}QP(z(x_=
A#fArIjpW4P7杊ǰmՅ)J]c[ڽAoWm~8+]WjWӓqN{!
o[I!lNÙ{W哗W&&~)3x340031QrutuMaTvav7wdTSΆEyizYy>|5_bʷÇw)+-.+IM/J,NK+.I,bvIſ)4:s9? q#3:>xAEcYѨ$dJ|d5yoVtJn?|P-9E>V#V	,LʸvO<x^vRk45A6L)ܲP*{2ڑ5J
 Lf]xu6(JfFǄ'B?4M$.5?xߚ IA$5Axu?o1ƕ4MU`xEjNB DPi`H}}"L OG`eg
})0>~u>a[+8A5`<lc$1`Y B͞WAWa*hПJw_[0D)}7(5͞
$
 ó6Pjŉ!g'ߕ?(&M2TCҘV̟~𔚦D{n6h9$f8 
8x,fܘ,MPˑ`4Zb.!iX!*x[2XNA99W(8苕
}kswz焦DP2H'CASƇSX6,hYvy<x;*
oYӏ*=-+F%hg)Љ&$O"CxJ!c~y?'y`z&}X&1r|Y]*{/|>o])	}gѰ=i )Iɵx"&4L$	l20V-N&<Dz!
xVPKMURPNKTQP*, d%()r rxWKo6WƵ6tpEziDL$R%)A{/QlsmD~3~	YqOgb1
F_5%o(yI#[c'x/9~d >jA}jGvGT:vSiDJؙ}\amٟ_>EZX&lvY+L8|k>ͮ6>m?oA藳3NeS@|
r9Hq'*?!Rf#,R-@oaq2CEFen/x傌2(g+0"$XdM\o%(`&E'/;<'@\%͍Z>q:~5?ޏܚlf$Z4$iUszI+MJ,m>ʞ`#nL8Ƴg1)΁hÜҙG8}TX52E?糳gu-(S\XQv碇4]L c=;Aب+.wrjk<ϸ2ɫTP?bIOSn%jң\)´!]b9K
DٞHB<hV:(uuzz\Whe0K$#2ײ%LЭ-I4s뗜p[95;v
-"%G/BL!u 
6m!%G]/nrƙ=$Dp#]EQ۠΋Q[p?s`$e
	G4fk[XaYemny >`Q<BeHđǡ0P4qt*@¹r-'^2am_7;(IK9qhl`l+v$,h8:oUۊ$VߠcMNN@APJu)L
sAEr z;F,h[FF%e:o&
cOwkC{
[a=I
.60L-7sꧩ
w$W3&bXPi)Xp}{J8Z+K6PlHFRӈqT}.2|JX^;$W麘u_\]xp?p|o1ծ,EwBI4R'9|
Fjo<@nm۵7s$91wiB/ vw4\ 0=W|zȧ{x340031QHKL*c(9kt}GL,) xVPKMURP.MJ-K-I-VQP*, f%()r 7k
x340031QrutuMaU0[ybYv؅wCzk[B%ee1o8[lf敤%dd&&g$d$1LaOk#BN7 7XPqxSMo@U)\ZTBMSEA%(U)ޮɶݏpC gpą
n0"n^yo޼2itzR$"Ǚe$l5GV(,C_o66wvy
&ƥҵGJ@
ݶ ~] Ȁk?9z"/7اuK#Wh0HQB5ĀH@0y`>4eUP'ilZs y`HJ؅PL+Y\[*Ya1^YKeϗM
`BɸT
zPEr5Yra)1{Ѭ2H!lImb [3+w.>aq!-t 0)A)<\߅X*<;Iݤ֐'CW13Z&wRH¬6F^
YӑJ*R)Tp7'o1kۿw
%25+4rhI932Jw/-.I,qZuD8& ae/ݞ|_^G!ւCK
q 3c8 }pu\%iiJssC{>?e:{}ջqd^99[g9*'ٯg3xBM(ͺp&{75}d_~L]7^͵?Zx}R=n@V"X!Q<iSlACdC!"y2~؝qf1B 	s
;sf/t}~{[lL?$r0:9R<y<
s&q\ 
Ƃ%2BDhBȹ-p&QJx
3,-<vB!W0!8ӗ'`\*C3Eo
JZmmD4ttb.3kS	*x`%M^S)Ɨ }C^7&7]~~UŬDPU¸2Bkqt.S3^粓2@6HEk{yPN)?QNkUxֈ胕qJNE)[^lחekw|߸<𺟉1_^<	xgp#ڟ|Rnİ[M75h~.^g܌n<p	;4RU+N6qy{:`:xVPKMURPMTpH,LUQP*, g%()r H xVmo6_(w(Y?t-A0Fc62)MNaFbYwW
RXb+C%(EyD\S#9Ii)`(h3H(rG̪J5+{+X2J'|Se7mfӇN&7n>|s1/7(Av^,=y$Y2:gTo8!,dR2-)+f9I	mNů IN%tFИٟظ,_T}8_}Fk*YN4|a9D*3E?%Օ|ZrIp0Q݊ѱ{b=:֬,2b2NŊr%rB`O\8<
@9D"&Dȇi5=)I%B̪VuƪyP7`P^nՠGN4fv'r=^xp+}Z
sI*Af(ZGXWPAb00!KsRa39'()32DDknkMEY\͵F5̠MOɥ%vkc&Ҟd`4B~
!CK6j:s{8CGR\n UCa-tj;.Xq@І)LeRZ]7o;pw>pӛⱉE*I}^tNi2)nsW	bbۤ1cղSXƺRݻm	g͵o:n-7@3<AaQYʡ2jȱzcxsh]4'{ r}\nA
K#V]J'n^ǔ)KmX"B;C9Q};]}ss#GqVҺg1VB8L}7;kY&LSj*sЋ,cemjRzOEwv>;.i~[]vBJw"=#K[ͅ_Lw l{	x340031QrutuMa.~E{=ry?B%ee1^-$?W73$5($3?O75/ (WRW\XQ&cڷ"ot1 W8x8qBH˯{˵, 
xVPKMURPMKLOUpKQ)y%
Ωy%E9J:
J%`yIy)J
\ xV_o6`q @M#9K$ARN"}w$%JvL6uy;ՊU5ʍW-j2ni-wEJ:nYtR{ xNGx^QBӠŖOl[Qa@<Ln?=|&ݓZs++tt}H'UKN>,
iqA9]XTb~mq*b1T<
4BmV(f@6+s{FI"JtJ	w(ARQVcA	۰,0+D<~h(,FbFϭ3BgS~5qnu- ^1zDf1LDxM̈́zs'(0PP9J^B9Ӛ*C٤kO#lk$rҺP8BϧX89r=RS8~0c#hrɭRz!^P֬
肪CY]eSxu5[@289зY;AbkS:#]<_N-ʓm:E:,	֒+p/&4x?#pY,GulSl";|FG;-/tB6Xtsttѓ=وLQ^q6tG%xyR<Tly S)rx裆	{af5a%B%?kݮpjϥω?Azhg'KG;ʈآ730"K0Ca 	azcomy'
+ƳX]w/;QsٴךEjͅvqѣs2ڏG<+tC\C=f֢Ν'SA?A\:AWiJ!?I 
Θkm$䇜_,

L>fO1\<֎'U&/vZIzŐ/-ycݢ"=	I(P\I!ooi;( !R^g UsVFj.{:S|<11ǤkV]1Ǽ`;iu#l`~/x!x)zNt5n x_Wo2Yq) ELZO0O~$+kzFIIAsp	E

J9%JV
>!:
`	CWVB(d旖l! 7Ϩx340031QrutuMa&MיO+tYi!DQr~^Zf^Vq~,fnE)Oj`JKsu3JRӋK2tRKRK\?h}|8BA=*jUd6MExSOkAGbē
⡅dz"BATPdm2d23μݒS.zͣ_go~~g6MփxyxtykMƗ?zv sAc`Xm``NsB+`,8n!LJ4FHb7" )#Y>nTR$c"L綥
Zs+ztuq=^o4Oh\85V㹺I(k+ 7d<b^K5wR^ǓhU|.̴Q.R8FhuKʕyh5NiP}_tg`~rCL"2v٫imÜ	">fbrI=Ꮼ΍K@
in!>\"	5Z Tzc2&|h~X2TV:/;Asp:h{CֲY+:@|lޡ>RQ02M:C
k\aOiͪbdiPMڕtF[pz4 E6Sux{ߵOXKtl	%SnF̖͍eھU[ڹxVPKMURPK-)/HUQP*, e%() 
uxX{o6ߟmj];cE-
d#6H*HIa*{H85FuEd4AQYq$J)"8#Q<*W0WJXsDPsb
2V)sAlgVJU0_iťJ",	V3
5#Gg>|HO/#r>^Z<g53eft
ar+u|ퟧZ9ƺ\gg_ޞ}|#d PYaE!eRaUI-V
rpJ8k2OZ0*0S\,1߬5+!BR]"HY]^2[glȊPV
)WKH_u84/SCv]F9Y (ců	w1G%<51
)_,VВjҋ}x*յpS\fJ\3EhS6RSw;ۓgg9pUfnFZqN3%X"h+Z0f]b2|oeL
#.M4q1O\N$ƭi`xhvbFn z9˱Vd،Vřٜ-c01iJ~ߏ<]*H#ȬϘ	(s5CAR	
.2٤+(Z0t^eVEP돕TQ
WJU	=@s+Bo>,^O;W\H8 ƅ$jG%T䠤#yH(X:=ljZq&:Ck4
"%N-6+YPp	\q[pDtjES] GQ?{|x7aE,Ҏ9|rs4ڑvbHw2izO}/zP?NQꞾw{lܗDhnTz̚
o7N0]'ZAR4ȩ)|LG7)q  ,'>;5/4H&^E/R}e;2{~$sWbV	8(=I
6X<Y&塂kV݀E?Dp}؉A04ctXP<;%-`:Ć@zn
+i݅ru\VToآ@wipX>ߕ5׊`FGlߛyiN-ߖ;̜ζ
y@O]
Ż:NSiJ6QI4MYOujzg$;?wF{.Cf7\Y`Brl  mU`e huЇiAbե{OW?n" 73m1X^voomOwxoqqKG0.<_0LMһ9A5%	ؾ9iv)kN&Oe-14O\bn
>zdċgP12$\䠈 _l	x[nr7n7l64Ä`x340031QrutuMaM4F՗Ƌ'7}2(JKL*cHtKu3zaJKsu3JRӋK2t2RKTl	kfIw, 24
x}Rϊ1g-2  (|Z-nu "eaE"N~m$cٱUx<y >Ifg
z&~W?]p3!߰?v?43h|[JkS>` LN hÖQ#B:̭8.LJYFʒn^Z̍HTƭLn4 CFa~f@,rb!c,>d+-;_f8N*x82qH3{4V< wo>ZB3wqR]|,&̲[j	9='\ºЇ+oj]5F)TIkT{!LEagj
dͨYUT͔	f4eY3ʜ8u)"؛lǍ9rɑ}vR?2ш%=Sk[ӌ{;/a͹ѬWcWRSOBxVPKMURPJKUQP*, e%() xY[o6~PٝA4 6 C=,Zm62]EEٲӹhd+/J!/WXns,Q^rXS,7_S%82-Y0
cGyyV <FiʱR#ΙQ<J+ x^oz=:uZ|L	j5N*R<@A,=$#ʘ~8X' >`4qP!(KR|_1&' $Qg$A0zdٜ_c>hm
,RYO5KIP&JR`q7ܩo	3+FdEX@rJ F9
f,FbPk`}5XH$+I(k 9UDs&PQaX?QDH"p)ҁPWfQ&k1QF3J-CgI*۲bHLy<lܚTBYX3âp{QZwQO)^$Rʶ
#硦jbzCP]}0luN¿[PyiС4|p!rF.WEw戣a0:K֩SJ>'xmmXH+Xc*vM6202 @5b4-e\2g(8	7l=JasJiYw4x-Mt#XpE,@4m~jԿ%1*=
el z%G=aa	īTJ6Eq8*TR"mcV!`@r,C :F<Uf35{nRDN8>+x+-6XK:ȯvEonj;{%Num7D.
&
#26Un<JQ,שU`hO{hSA,z	ujKZ`OƯg_/,F;Hʔe6~޼6h2>*Qg^YuJEY'U{H}
ĵb)hnce5c;T:p@[gf)(΁br| e[Rݶƴ3
HM@abGK+?wmDT m6rhа`pA\}`I!$[]IXglo;V	:v<>n'Mnɣ#a
,!\cN}YKr`7m7] Ah
qH3B/I]b=ٷo,KDGЊDxNɾ~T~8,O B.W7K.MլÙ
g	ozpc7(>3	ĺ[8^
T
ty袀~ܬ8PEc.8өU-L.0 f9T뵍:+8\8%..m"[Ojxnt;zÙc\tRs0&Qv

^1"wVpY ?Hg=j	"U[r0vl5(UX{B0{SРC";qzO&s2@,Y4jLH"YrIsGJ~I~߬ɋwΥyסN[Yx^צpҚ=Ƹ1.0#do/ 5Sy^ {}Q"et/]ڥ1u;juZU<{vA|!l'g^cn{
\&h衽<zښ/hkנ= `Rꚰc>h=ח;;JhJx340031QHOK-J,I+IM2Ⳋ
*>jlqz#ľUɆO|DyxVn6+`eG>&6Me]à-*F"U>VBgHʢK}$g޼yj-Q&Q2)H,$4I#ш)Y;|L^ݜ}'SB;ak:$tDu]B,|<]gx;{s,rO޾Vw7W[[xeUV~Z]
>XUN3+4u	I$ZX2QX&I4g"$\ft0IDD偟TWV3{	^.RCߍV-O\B9+OJHn8SY^Qxv^|7̰Ի ,Zɐ{\)@.{I!$3ix.y^ppLP<iFw"m	YH?[[y2iN*aw,ki0}= L6rGy5-y%Էrsek\BV@PGn"aA@+]2e5|8!|-0ӸAͅV5i@!krEdby)<]_R6Dܱg K쌟P#ڭӆז<V۟+!  0*`	˻Jw?=LīX
[J^O˝tvM\Qӑ$P#qHu*oxW8	{Fڻ	sɷk'jkbiɌPɐÎ	mF]: }T|Eǰʲ
%3N, ?*|}t= ֎Xo:
I19Pc
 E?sF61(29!i
jaT0m֑5d"e|+xZtḀ^+{"3Zi?MX!揑PU
B4Y_p\ܜZk#4QHmH;WF!Շ7w|G"А<iɪuӄ<-.Av\ԎxAGdʢ_ioW	݀ΆvHC
(G/ӆ%3ij'K#Eot5;-,pWCeOzrxj.
'6B
2$KDx+2@,q/^e$Cka#ЄfO:c	݆vk8sE
+\j`&^.NLmt83=r(('1t\`ܖE΁.vUǤP]>.SeW;.xk5%?X#6%6 ALzx340031QrutuMat[>gaiJO$B%ee1L> BFTeM:.Cef$1|u.&}u_ͮ4 a+<xWaoF~bt| C(NЪxc}ػƻNr}kbZޝy3vۚVs*93>ZfOPۙN\n6;sܒ2v%fZtYS貋orV?d^f]_6i 8a׹fŇ^:.խ71}=ܰYCT(ΫZ?,{ܲxߵOZVy͉v8T>7h]Yqqkq.~axfR&`&)y&dK{_ً~&Zs4P3#:_kG 2[[獪pO~4dp𝪛O(«7I0m>x/߿JK?>yu|2LsKҳO.ߜD,)ݨV<ՍJWOT*C	ȷJ@I2%Epo	_ҀTK	Oke{nnd\哔V"/O_?_ c2\m*]Tɯcqi>{j$ΊCh*{5%;	xsW9\A[RyGn ٵHrH,J@6aΑ^> 
Bjg(_ۮ\
&jJU',V7w`I:w2c؋-9P_iZ5:Cɸf.zcxk܀.(<[s#qߚibC WЀBgZU=s5P+T;H˼/5 'Rp>p*-XGZ}yv!aTYKHP8Y~
b9DS{TG(ji}Gz 'E2hY=rv.$G{cָ@A'[E̦	z&*(Խ]3ɐ4ÏZf@Of)pA$ib(;ZbU
~&KJtXwFW|yf`1K![^Be-sqK+K־J8?,H>R8~G>[UvP_5t]?siھdƵ5U3DZtj"3}BҸ^^&
^p8
}׏~ɭAomGo&#BL*еr	D"6/{©0;T~0Qe+t]YGZF%+Nay~1JPj(VS~SN^OƬƭB~	e*3A
ԆT$ZASｹή)d
ZBI{,=N Dۿun챂[5dw׏N.-A}0
@0';'_-3t# Ok;X43svQuE)wwMeH<C齖G[-pw? PgwGџs<
gk#hdٷ]H3n{!	]*N2fQD*Y%^,=мiQ:0<N AWsYʎ1 azHEM*`JOZ-M\C}۽3IKL/+mxVPKMURP
,HQQP*, e%() ?dxYo6~_5rT@!i ؤFRN HJ")mlݝ>JkNi*
]Mez*yILQ$M'kMGr \֒Vs8꜔RvR5\ym;CnMShb!'aw4Q+|+Q<UoDU5}u9Tl|x_|:<OtBm7b	woB՗˯WW^\}v)giַt2)2muK;<$g[*F7/!6%2$J@kKeJ%)(ikra7Pu^%8n2>>jpۍF68ҴBגi5t[4WAb7L͡6r`H$!YP"RƎTaa5;spr=H>:)&YVt]d){;:wkޙg+l<qaq,2;JVD
fZNd`.9\DM2T3[""Du(*;6~!3mms >74ֽ
2!Xby9K>ԄbSX"c̡Zp3h|"VX01KgRRBS`3Z].\淚H ^rkٷV;BA= " &h[Ӱ<_<3^ǅE=5[ v-z+:^l
`\T]ZÞQ0egJGh1z&
 F >D_E	 TD522ܬaMncɡlO;vXVXO8Q6u#H\R5ݸg;ǅhS#|k-.ˏb-<sx۳3aK07U0c:B~ٵVVNC=9R'?ئ٠)h`.Quc/tZ]x:@ghJu$3h# ÂA퉉眃)VFꚲrIl6&Gb]^acsa'
S19BQ>m</thUqXhxx?Fsk9	F8gceut3Ƣ;m/N2taz>QqcGL- ܟ3p@\FV8fzwǁ'u\=U؀CZ՛dReRXU?Ei^/Ceh	}݀ƐVcugJf ]);xCn*ы14VuejZGPS?QN+K
c`-2[wG[EG(cܑ멞N+@2#^șpi+g'|7Aag4,
JnO$rśuRV~ÿX%jUI1pt;{}\ծjWG^f[קo8O
~#ߞlKyrʩnhW}B}>B+ЉM9>	LLQs-Z5:̏qf҄s,vSu⋂˗0@K/{3_
D4]1$sIaQz]fn0_8)`plo5@ɑ:v"h
We
ގ%tHRSt l-PzFzZihԊyF4{sMf"|ϓ2O~)3MZRKF̯:/SWWrwx
 0+}#cYfe;=ooiM +P1x340031QrutuMaXwjiFN7(JKL*cx7ggI ی.T7ވq)+-.+IM/J,-.+.I,bX'?qUͅ6fy-  `1ExV]O#G|<("\D.D	N{=a=̇TL'[kOOuUu]sv2hkŵ4:&=v"dr$f%=9!$q[ϋʚc.2OxmCxEeW*9[8@h(oSBSQac;
7\mkm*VOkQn`]>4Av浽'#uX
ރxGZ (jW%k-A_.{j8B\̓A>n?׷v<BOic̇Ud5[M|f@,u*b+ijp&ȷc5]Fl%z^QF_L>h͋6	ȜtW' WyOص845
m`;Fםމ^2kaR\*$)2h)R\by*c)BF {38m˄pUuTXWC礡lřSGq_0kdoNPc25T(D[T23_Go|FVtQȱ?=mCD1vmdEK(M$h^.-~4,is<4@vHۉo0[SC['Jߥ\8˃# }h˓n8mA'gFcr܂- Vuս(Ǐ?J(.34NmON:v*&R:<Э@|#{3o0L{NY!ioeT-IE*UHV}cbZbvm*K#|u߳NvH!.X)[OFx3Ԁ-W_=@fCW5 Ӗ.Ɯ#4dޡv:6?ac?7X:Ax)בG MnIĤ쥟Kpz^y:Zyᤷa HmQHyyBSUfo`4t8Rz,1[,9g&&y7.ߝg1Еu'h!KDSJ3^)	ư+&Ƌot2u$4ϝoe<:W2(HX9͙PExmTN@	&&E/X;Lm3e,,GАxh<{
~3]vo~NlJÚ.p,m<A;zxؕ6EYΦVPʥI23+T&IV
p5Z
D
 T& -v"|D`zFþ,} ̱fPUDhS17Y\m݅qeSSKd$u5Qtsnt{;NAM:mx:#XsB$Ka sLtm(\{;0;+VH,,ʲy8foi霳4)a~t47>m8_DsL9(MWXBGٵCI)lb-7V,	8ˍs+HjϩczK˫lGFWX뭋)3omth>p+G.uܛVӿ\{3tKiSNu_Kͨ.%}n35M:UP2^R/1 ݸvg|?g]+]Ƣ
C(l, [i>I
.9Vra}AR{TJ+ᴙ@h\ؕF߶kׁ"aOvO+"G
a8I^-xVPKMURP
.WOLVQP*, 旖$()r <%
ػXxmTQo0~WfMK4*kVZӪM_M'a%6M$ߝ
uEﻻQIVjĎ+96ۚ`զL>ܼJ|%WK *[K Z2.rY4pk[pQeP\޲6FgZZjvV7A6):{7bq7W}.fΧ;(q.?H\nbV˧q{ݷK³|{^2FpY&LL`$45	EoHi)<xLs;?HXUcRطcj*NARQ7G'm<b>m
jLk(2J	le]c1ur(XfQ!Ms T\ 6ng8H3MD+X"U)Le,@Hm'Gp$R
3C<RpWeyfdFke~b&_r/Ibs9"RJ5µ
]vS8IyC]8Ԉ]tQVtԲ;'zb?E`C6<i;U0g?:sޭ\vU\F>
+ExJZ.sӂ93?,icNv*YKU)q&Dpy<:&ctcφQwZ*u/
2x>γa
#}u^Z~Qnb7
2rd旖ؚLa/(+Pr/QUH,.N-)iIӀgijjNfcЧP\&$ K+(iNgʧ]upV Q7Jo(x;ϳa% 1\Ux340031QrutuMaH{45B}nJzE+yIB%ee17qr]-캥8f敤%d$e$14,{iF]V #3@x{,XtLVƒͳXX9K2Ks vzxVPKMURP
I,UQP*, d%()r lxZkoF_A,I@6ifݢN,Cɱ̚"Y
;!%{ ysTMV[tI
yx^lڦ_K)z{f Us:PբnʪUlԐ_+QM!CPUײ]eE	)-[(ӯU>=
e-@>J;B&M컲^ϷY5ų?mB
״$MYU~$};	ǳ?/ag="6)
^AQM,|Ҥ=:mC -:]\.ϞVͽʪXm)GߺTbawy^,udV]]
av#jŻfY/`B:g"d6SvnoEދ׮) :Li
b.(eӋ08gꄴn(&MM9(^}#Ő=uVȼ+I. T)yo<\fp>$YG3$ߊht[ڊ,
^FR^METH鉕˦ֱ
ϙS+\A1
.@ڑ#RA[lqKL@R'R0HGB2nI݋2d^'RlE&"dm7I7Q/֢V̟/4+eLgKa2Ϫ"yyU@~#r؀<bo>z_\ ף9eNcD!1T^`^w(.q9<v_=e$FMm$F?$٦MȉHwVoQdC8-qIֶ``XUl)bN&.o,<Z.puXa7^lJ vOi?3)8 u}JǬ_|_fM"0S;5Ь5Om˜ptvǓ3;Mǒo6{`.YMMP,1"1G7"31
$M31m&51@ԐP1{A:!3er$U_W_iOBHz %v},}6,̈
}[bUEާJԈOgi(2-./DsmOH8d-c6`t:MeCbp֎\bPgn+#s
ؑNWJYUbe|ǘv]9/TBMw^<+:k:Q D"JM Vbl.ϯRznG?]2pnzj
!&	3sM6w3nbi0ACbJt$&D̲ΪY._ǪGN^l\O&ۑQtUK;y,sgu<loMU%w;6ePg]P!>7l"uHSk<BjT)ڴVxMItVf.2*Pjʮ-R&XKX/8-(-?tBUoaEu9'vT䥳@aw3XZYꄍWWlμZR?uۗhSO{%Ñ''xQoS6ЃKDyX(SUJn72?Q+j+)X.u7E
@\
JZ]ŵDDOtAEӝ#B`h6(LF~c)HT{tMVtA?Z([`icJ.ݼ2+6ЮfzǼjk $tH}QKږ]?daKQQO5T˭1ZtKE3(4-݆*Ԯkr:̇2H:`=߶yH!ڪy`
k>[G1[T	F@VuUfuJsB9HN=ވ;F|0tUͶE<EMiC{R0W]:3GҍfoV ԎN {:äbz7#ɳ#z|×Ww4&ʼݼ_ {',ScNi#Hȫ-$ӑnq=姻p8ͥ#ᆘҳL˫>R%- CsAƥw$Ж9w$mUb9K!I;
dH?#ɉ
	j6Xʦk%g?#INFB8k *ڻSokwb8h*&Dr|/8-EfMBP֧"7g񣕞F,ސbX_7݃9J[z#N m㶶8YҦ';m'dzIWj ^
`+/Zj\ww܋Z7+fOhla]$g7-vEfd"eqƈvYW>I,a
Eǌt=oCl^,
?̀ȀŨ㨷Fs>UxCy?#
M1^vٌn#*k 6qJ }Oh"g>պ>^C86<xZ$x1Ʃ<*cƶqm<7P&_[boR(4-^CN/v7;?rIr7XiZ8zsC/vIdd&^fKIq.q#Ius{6ulWE. d1Nx+%1jCΐ>9~ծPCX_  B H5LC9V ꧻ'P|hT.8w72>	# S)Egf:T|j<|~v{	/59;xn|Vf9@ʠٿ=Ńp"3/~ݩ _]2;ma]֧.Oר,|N]5Kw"+pL?ޠp=rWK9@3*ǖީLRӛz|e݀ـpUSa&h6:GuDV=Qs9Nإ'ѝVUICxm}D O-	>恣fwļFDCQ>Z6`oe|e&)M..)o7UbOg<6֨F}=^ׯ>xi5i~}֖'}	F =Ut<r%J쨾Cڠ Vpiq`E7+]8Mkj}Hԧ9ـAѿҐ#uϘ珅?1xԗa>MiAJbInn3.\ 	x340031QrutuMa8i&hCYMֆEyizYy:2l};xO*Swf敤%d$gW%$18lxySvMo^[^z	 r6xdd`!lK63}lέXzu> ЂӳxVMo6W6&F,rw+4R]#,2Ywvd̛y83xRpnZ]A.*3Ѭ%>y#-ד`K#WhB+
+p,Y#=#*`L|X'T TE{zhȾ?Wjeu	:#qZXuu	~VjPK-`f+HR(hdlӡJ>v}Os关mvowFoUQ2طXs?>o[٫g0^#)r\N'őĨq33Jb7rFu;<9jh^ eRkO5rvn9\	''(.l O
΋Cz3~L]t,Ksp!;@e?15E!ߊ
,E|d}Ѭod_m{=xlSAqYl!Eg`cEPKlm!wǄcc}]:4gNoc=O;1%w9&>mC8*DH.8V絤'_ۤ?h)#7=ּ-ωo2)b;%H;ͺg:{ܻbU?VR{{P/UlT`驹G8ܤ\bm0wZF*h]vؽWa*Sjm)O>Bw
?)	J0h커;s(~Mou[8{ulŜc*r)Y/;(7ړxm5[/B@jW0bt
1{z:
Lrf4ZI g$)Z,2ˈY:ˈS62g\ҊTUS ѹƼg6I ڻ*`\+G1U!Phw#GQ`VD
y5O؃~O&!Xn.8GVK-irK`AxVPKMURP**͋J-WI,VKVQP*, Kf%()r [
xVNH}W88q.2̠EdFձċEc@Co]U뜪XnnJmFԬTH|Aorzs3b_l5b_)D/ 4k~cD袗4}4Nw($3cw<|]^a08	ioL9pgOGcp1Z]o^ȝ8MΈ& h5m
/qsE({E"E,O!W00d4p8?ňd<	Հ(
mg<tLp)iaq`|Zoοy˫7L0g3KTV9B[`s\䱄F#v<坴%SY/%$.<fkTjLV'َ+[{*<:nWd]
f`mNRa;D94|"tIƚj+QE_;d}E8 f#,<|V\
(dAG*rQ1f&:Y(Z()A0_L3Py_u
Z{_`xQfN'B'X7|e$a8Jn5nv-
U`ܥ)taԔ(JӑԓV|Ru$+PT)T݂)SLE;v#ݫw:J+3"5U%MoN؏"%F$;[	Y4>#v(MQY`0;Fy"\FبhL}3)H7Ӫ?{kڳIU]E?VUAX~JLr0e6[za;1[8N.E"H$Kj*ztϠtDzTmPN^SN:]^H|2tWCtQ\!@(~f͞HN$/9-z:ˋQbdI86n|eqMwoFGNr
%آa(
{@ob_1cM7?Cls_Ipv-<	:Vz	EɡBA:޶<| p@P&l9IS%cuo\D*|TV!fhPn]\1ҟ2x(qD|=c wPO  GgW%`G`xO[%EdF{l\}|с Q#!	x340031QrutuMa}Iէe[%#eQUdns`w?ZSVZ\W^X[VZYR[__W\XtKC7/lggc9 a<rxVMS#7Wt,J\'KBadkV,&Y4`7l~ݯ_Λ9]f^Nd+t&xTZ
U2^e7v6fYQo!BI|QKLLV-+-"SZsH&#Apƒɔ2n9)㊜RIP77$2O^Lhr+I\k0,AP!ަđ~p*06HfJ []n"U!rJ{zUڐ)yH(B#zr|rl;^w/FV](tZ2FS#jҠȥ-$D:Ǳ|]bi}:GG	-ZZ6jZY&g2Q$Gb?)7ֻ"ORgH݆nP
YF>?+*L.VڈѾlMZ(+17te&*L<h%eqjALjRD=$VUQsL҅sY_x5U{}]^G0p{sE)*XhՖΓB~(sLaɦZ\^]wo~0ݜ`ٝur	_6mgrNGG0BZqjh8oA^]H4SiHn%2f(bE>RY"w~fQ-	!l@2߂60ĸCoj4Ndb92-rĠeYFn*$9dFو`
*e߀K_9 zU7 
V͸ۦr8NJCިb8 ȕX(`'T~D^^Yq;gILC}j*5
v|	dL&(dNJԖ>yev?Ҟ"gCЕ%	g2KNv:h4Aq>SJC[ʌcr|N	++>r
-W.!`m[]umgCo. fc]El:ͭIqo4u|8in5N
SEO;v]}Sg8T"\b+-9K~8TI*ai􋉣u}Fb0&t%s0]YM6*Z9hxIVUJ*WH%SzjJ
h֬6Q/\Z<;U9|XbJAXKBG|M0}
S;%ڣWeV,{]*yARa NAāDRfvˣR*^͵)wn77yÖs"B,
6lp{^2kk*nVIS-zL/"3d V
U4qRĵohs\/g;G2U"u0FDGqS_+\̰xVPKMURP**͋J-W+K-JL,T/N/WQP*, +/-I/KQR ɮxVmo6_&徠8k7-m-2)7,%]1}swsL\guy+#T(4tFy9^/!V#ࡈ`An:j5Lϯg9×|9\M'7OWX=P:Yz,Ɇ}&Wʣ=7"8:CP*PJ\Cς_[
)yM6K8H**\*ry,~~߾}7RBo
D~grôł/ӮE h32tՠ@Z#ޡ
L޾YJ3ԏ2"oCZ2u.X@D .2I'1(քY"ydZIX1
eR`˽?/\:ْi)[Sѩ8
ՄR8zʧo9"&QyagT?Z
h8{
<4.\h*f{D=6{kglU.}KTzk(׫R^Ae5L[ a쟢X'ܺ*Q
c@Pa`fVp/'"l<:&T!kuFRDYOG	En"M.J+*Yli-'
 c8bj/wV$(Dbڑ5;wjȰ9<s1oJ;@6jBZ)F6hdcVRԦ$CbӚSiV5au +JQ\-4QǸ
jzB}T~5ߥDis4rp7gh^֮2QK^
{͙L&X)N{Av9&o`?7p/sd:9/cyDί㲝v7M$h1Ϡal~|]<;x340031Qs	./Je 2Ǯ`Yg ^zfIFiI5a*kڔ
̓Z!x:2̯ԟWMMSKB:0cIoyo=IKofM%Wuz$OeW(BT$g$2\0*Ys@摦KV"
~>jQXTzsj#LUYY\.=*^j
І/*IЭH)b0]/1nuYԥߟz(%,39ĈWDM/ܶ0;TI&0stS1<~gw&41-:U\̐3Vꓹ?]uK*]XȰ\C7lS#uAsT?rN!jg\ZhD:;1/%+Ay壨uYf~4)(/$aKӞD׎M˝,7-DQNfnnrFbQNf*ۍi\_ĹvdZS&%x,71/1=U75/=3Dg&%0XOQZٺ'0g1ճ%Zt|A4//He=ubÛvǉ'l-o<i$3/+1?/AKz+v,)
I!J2J~]Z}!͹Xc~Py%O=yL:U9+ag&3~5{+$SCf{
sJ2Ks"?j8_yY< 8[2/!aJEovf/zpzz݉5e9yEI9%Ei9	{guɟ:mUœE.故ox9 {Ya]Wt8>]rӱ+⏡F3@{
wx340031Q+IM/J,+*cȍi(ݎӟ=py# xqx;YkID=FކmDy'밊odȓϸ͙q3= n}x7 y71n~aθy1PIq<<fq.kͻDEٸbjM"x۬uNgiD]YFކy!9̒8`}0(X(f (]xkalaP \*G_S.% =x8q%fo&KMns<8zF Ǵx340031Q+IM/J,+*cp٨vEtݛ^Lg>8
 g,5kXx>}+d
) Ynnx= {bUJ&)
g@FݩY~?DPcG^PԐ_T(>5Nx[1Wcy\ny88 5 x340031Q+IM/J,+*c|sw襥 	 x۬Rk2FM1 	:xU {|ev#6k"Yo;"x䵮% kջT(OJ/1oK= n*Elm2
$dx8 {bUJ&)
g@Fݩ~?DPcG^PԐ_ixVPKMURP**͋J-WQP*, e%() l'x[qP}	z<?$(x340031Q+IM/J,+*cq,B=._.~;_	 hKtx۬C}D=F	2 +
Yx>}CȎ.}_elHQBD%nr! F
x340031QHKL*c֑ng[_^?xR!$?W73$5($3?O$8[2/Y$3ŪkJղO5:D c)x! 
0H!4"و<x340031Q+IM/J,+*c8\,rEIϼj!9fw k$x۬C}D=F	2 f
*CxY 3쉶@Dx[˿xuF	G4|ev#6k"Y
0H!4"و<T(E+)x340031Q((ɉ/J-,M-./I-I,IMair;K[ By~QvZN~y16;07|~\"{w%vl<x;s{!&,BL !&bx< {gn Wn
zv)t!µ-ZaH@fIL<+Kx! yМaX*Z:raӳc3x[Xmb͌Ǚ7d Ax340031Q+IM/J,+*cIKwP=ڸ4bCw a "x۬uTuD=FӍy71m~' >x340031Q+IM/J,+*c)"rYnO6 hmx;zTuyD=͍zqi3nQf|՞q:fNv}+7`Ǐqs:'Přqs>fD~yٸbj%P5xvmCHB~lSevھ^3hr} ֿbx; {\hK}j7rm  9:%,[UfĜ<9xBex[q[ub͌Lwl Z­x340031Q+IM/J,+*c&+q*綘u zJx;zFiD=F9q 	b7x; {|qA6m4yl-z9e\#3lUx_e6v $sx340031Q+IM/J,+*cos_SZ>	l t x;:WaAD=F!%X7sq nx? {KUJva0s^vO|
ёM,1t!>nC2I	lXxXe3x.  Px340031Q+IM/J,+*c0p5Q}ם,%,vd eXxNveD=F޽a		Px j{6d:AԭN
{/ͽ40000 automox h^8G$zHX㑱q/{ιo+n=j+"fV<cR6\s?htask-sync 6&ha}@-t$W~_SC$x[ĺuI5a*kڔ
̓Z6G3 
S1x{Ef[6F2*zɉEIyI9\
.%9
ɩyz7pHk%$BTx9%s "މy)Y ;9s2su3r2S!*ssJJR+"\@f$y)Eu!y 0(:ykpinO~zf2H\
N9)y
y%@f+ -(3(5y+ϻ͒|^  U-jx]=N@+'$%) .lP(!RDY;/OXoP: q	@hIX(gy_[w։#]W8'NZ@ Sm,&Ƨh	TdQ5㨊lP>.AUbru^jBTbE枪~]$1`K4xUCEY-?bFF@蔘([kaδJ(
WV05	n-D)=~ǂV@Nt
jYnb`mԙxhxkglgP,YzyY_n[W 
.`1x}SMk@ƶehKEgشq[),-
ւt3̤TE٫w'Aog2I\<1	)J`9<̼}exyYG;[@
=)CQ]Xhq&O*2*-,.HB#m!"QH}jBEdDA": ʰiV#tiGי+SpD ygR=I^٧
Ev:
1Ee!ye@\
53AܬZvuD-|DX{86z?#E!>Mdkg(ݙT2,vDd[F懯d1K{T͑	:"xVMoF@#,9*P'Izj16ʔr_7tQGJZԷ7ʙm"gow.Tf'mPfbԇ7U3k7A.ɣsYTmO]mPIkliPb|2c^O13n5Ew}	},$yC<D;
HJ
::LX자;3-ě0tKUWOtS="Vo[{^DzodfrŦX[^r'-	ꛢ[M\&L?Χ0XR_^rZZ+?rNǣáHJBi*ߍ!cWrs bx340031Q+IM/J,+*cXI?Ç7Swʳ;gxT ,4-22T20:35:19.684777.1K1+R/27C?|@B'9Idx/uAbYDmyF11 
xkalaP 6%c˔7&~R lxxnɉ
6{3lãkaSZdZX\✟W\j"TLu
u
,D722nfb|IJhKY&@7wr.&I2gD3(5Y326Vء0yӾm":\ PFK7xkATlOZl/%4݉?@J!=P\!Lwg03ZE*_Ул9Mw;y7×O>znbo6f߮2M
Dkj4!10$c
ᐆ'4A3Rb"b(  jD.8<lZ}YBYeC#و1e
ܰN)TJZ/_?>qjWOGWKyx؝YUnl,\ȘHV5`d}wl(jRš6=`iCѧkG:ug~v3KB(*`&C4%\ɚ%g%-%ZZ=4}^VOzu݃u$D.uN̟><<9EЙ3;a|L9yvGbL
H۔p]^ǲ	S^Jm@]+7֤cx8 {0IWKg\B gexaDu
}j7xXrܸ}-?R
g*T͖g+Qm@9D\ K~!Ob>!r.+`{HOnt7\oUmii
??}榰-Sj?ѹSnd2~=)l!*R2%xfjQ+n*ZR`8׆=="5/1ڬ~~]7yM7K[y}aiSz[`ݯJWm LPۛ%#D`;!5\7:[;YF"=R~Jhl_N@dqkf5"cq(g}= T:@j3?* g+|8Y
/m~xg`,]S !Cag$  Cƺg,D񙭄gS*v;HUR4\H,^1jgUxy_L)"$SF=7U6WD{Sa/~?&eE;ۓ6탩Rz^!6IqbVN#H-<=X:Pmo$O&5c,+ɓ<Ma}$W,|8NjYPn5^
]UȱB:+zɍ6:Ԁ(L4 $*
ۣn5N͊=,d
~آ̩aO>˕ىCFQd ۯՑ^vNF+~XjGA
=h{>[A>L<EA<&X:UBOvhVkp/P<-
G݁j=-nv3[T$U+ZI1B0jEUU_r9tyנVY.
x[3Yxٶt	uʜD 3+|΄.P	/o?}'V	'}爕p?FqѿL fEBL6~I]3ACO=rX}%9ʡڻѮtqxY#xɮ;Ep2q2oS2՘\x+ǙL~?noZ׳|ڸQ^Tq<<.RxLv^Hք'rr9仃iPjya4Yai gqNFX|+]%
}aVJ_ezBg
w8sv-k'=G\1V=K7*u5Pc1Qǫ"Z$QSH	"Vi7717./%
|ǉ@Nzb_x*GrC_
8s _
Sb4"J棛N=FAFa4{!JgX 'Q'1t	WSA`\8{K_$ӇNmx'B!M\P Ƹr	>aϘGh H8UB1zcF,UmS`bÈǑ_zXQFxQ}РE;L	7`<%2pX#,tSo:#UjlP$NQ?%UKIML:$?c'7f$uލ]5TS̳\,cHq<0:I]\VD?Ǥcb!rm:9\6͞rՓJ9oP,%#nWIrckr7VGOqT̏˫ŏwx;)"fOVDVrKCR/H+vT??W/x340031Q+IM/J,+*c8۾k'>a}R oix[ĺuCkJ(,o, nU)x[ĺuC@Gr
S+n.<1a# zxKI ^D5 :x(ClBƭXĲjuJ2sSKKl4&oa=y- pReIjFJ~y^N~b^R~J+, ePx!K|l::%%f\
@PPWQRY_RهU
 )n?x! V̄պJn].|1j7zx340031Q+IM/J,+*c
:`BT czx/_j<F@^ oi;Mx8 h^8G$zHX㑱)-M}~?"%Qj71Gx[ȺuCȥ
wwM͛X]{,FsF 
gx340031Q+IM/J,+*cxx75_'`.k" Lx/_jyF@^ )x/_jQF@^ x340031Q+IM/J,+*c0S9z6ʽ l*5x[ȺuTFQݿREfHrlZ1y% ǻzxkalaP 2w҄'9*,,Ig. k
	x e3쉶@Dx[˿xuF	G460IWKg40000 automox h^8G$zHX㑱T)%q,)-M}~?"%Q+"fV<cR6\sF(?PC)x ^xGlX	5U6~xkglgP,r{-Y\.*h*l	 6}xVOoDצjDՂWlbU"UP"XUfb7Cgf9! w|  nƞ/h{73=x	}C;ގ8$gᓋn!'GHQ.
xwxp9e~on˷oj8q^N&2doN3+X9U1 <ݾl$	adTD	Ky[bJS^KꖸIAaC]Y3:ףA`5.sAD'9a
Ax̿GG_]gRvNJtݧپ>GR	:`ω|gK2ۭ^"$ڷd^4[v
l7>BL#9$@)ZfОTXyG;3Dgw<X`y!(T%J'%0`AŜȌ E2˓PqIےAPӢ$VX"x ֈ$X0K8+/ng`֟# k}' 
U	,zJ
]oU5O%-%.Ȁ挋.\1)悧g3mi4` $$$^ZJCk6
xAnzR@s"W pē>=$PX	QuKHs a'FKD>ߺ%Aep9K)ܩpsZL&nϏ!9ܩ`m@г-ׁ3bN?>HwFjs`{=-1fӈ(VqoBL;j~tݚUE
"quڗ/{pG^
~/zkv:\)Y,j#Tqxx 3쉶@Dx[˿xuF	G40IWKgv)%q,̄պJn].|1+"fV<cR6\sF(?6ahx {mBif_[v":xP {Nj37*Zbw9+Q"9!8\jqoEԋ~٘|c$B_x[ȺuCBw=albY Exx;Ԣ!˻4)(/$x2?W67!d..<??oqFv jx340031Q+IM/J,+*c0>XS]lԣD۟R<L x`N0xO ,4-08T15:52:58.521282.0K1+27C?|@B'9o_x qAbF]e YJ	#x MvyD=FÍ1~yYye
9@| 3aApֱ+o^ΨYZZZɕ"sױ/b 2px&MvD=F| ڪx340031QrutuMauqbB>_jsVsCt<_JWwʄ_Β\̼Ē<ҤԢԒb"neT$]s[ b:!xWn7}WClb'@F&
KiE펴WJ}/z˕V@av93g̜_y3ﵧ^	YM\ⅰҜǋґ2I9/>HYY}8p^ɩOM̼jk jqasJ)2b|&VMIdpwY}2DaB4%o-Hhҩ(LzZ6s2^A?X[9STJ w!גnWw$-v[LB8J{F(fHB(;jY'b3COEhRlU:%鑩Ɯ1g&¯MHBwq&R\\$Oń)_8 %;Vh]:>7xc CMW#uO>=p>ฌ3ٶԏ;ً%mHi*ou|5n`4l/M
<Ck9r/K X@)53r_rޡ^sC/ocEf-o_:k1c.k*Ř	tv}~p,@HЉ$]%ԭGUl~]\A!z5
$ 7$Az~B U>P$+(U.:?`zͧowWwWG\/dQQWz8AzPYu5KٔeybE5
@,"^*3B?ؓSk%
A]өd^S4vzDtSOU\bUk;gQ9t&Jc˫=SI&NJ.=ž2=Z !@s3UslrR!a-s'!CA7`'W6ZBPNn.RG=X|õxYzǵ3P!*I%5{HOӲ뵜WyLY64uo#B!PStc͈/Gf6W:Qa_ybrSO>@txa}ZD`3#<eJ
(xXc3xDkzb{xj:"ݽ
7y3xw<yݭxQc?eN!\>]A	UTdĶ
2}RjmGEO0Z︩8`lگ,Aݎ<>cx37pϳsfT݃JO6\BZ51"#zT@@`3^%0$@HkBJ 08 4NF?V㾁%.JYmNUd
+%]vL;Pq#EW"M&U?Q;
=7!FNZI"xXMo6Wzm
:iaXǡA 08Z&UN!%JKq4|ș!*Gf{,O|]jέG_=h+f!28
tq9kKJWZjc[[ 
wa)*,SőlME)So9XÄ95aRKƳ#/Ȍ-6*sR+D2Iq̱-,;w]Xg7n|gaVf@,ySYJ,<ufbTHZ3דTc-`jpR"w	ÇY\Lic/ц-eKX.^q56F/ZQUQ$cU\L߃If
Q[F?ӊ0Jx&T2Y新i/LułKҿI)=xL.̺_yS@=/0
S{}3ne	/MC!pJ_>k^.~'
$h*TP+uK}P_*M>G?SsGdY/9I7-7Ϣ$C4f8O8nvLd[o-\G.Lu+»x^g;M0̎k}?c`IڥB-l+)Uvuz}2yށЇ'?%+~'U!.0ݙ
An![SOɫw)S'N˝yjGU}뭏w)O6kq{d0xu8Ȱ+݂X+'$)wJ	UpL"3E4)(4讲=ǂ%m]G3Ri&sS(!k	A柯zR!lfD?0Z4nE?]q}ٲ48
w!{D/PH;NyMY^<!ӅK$")+xhlNFk#}jU4=KEZ)gkI[
LUR¨GXՓ|jUMǄpfX2HI	
a{NߪPn%
=:/e^
_Tާ:	=B-V]V'_OZD7'h֜7PUnR~Q~ܰ[?ʱa)^1ɲj'OAo@&|/QwlOi}C7#kdsd@5ryM;^%ҝ	owF=ΰ^y{BXoRv~Q(Ʃ=vZk9ˀ	cAxK 2x340031Q+IM/J,+*cxhlqmܳƍeZ?Sk	2x e3쉶@Dx[˿xuF	G46d:AԭN
{/ͽ40000 automox h^8G$zHX㑱T)%q,,FH@Mܰ+"fV<cR6\s#(?yE)x  oEԋ~٘|#/x8 {M
TFsNQc}v"DNuq3d +5j:lxkQYAksW; Q$x340031Q+IM/J,+*c00]t濱Jˑe bDInx&.=AF"@h^%kL	ʭx340031QH.-.+IM/J,-I,-K+.I,bxh2H{ztLnV77axǲuC($gW%3ؘ.	~Q殄_ c}ax340031Q+IM/J,+*c),#)}ϟ&+P eQx  @JI+i/cٓQW9xkalaP q9oV	 rWx[Q}~ns̜"%+ԼԢ䒐TT[+0RR("'ir_ehi9Ś\\t&lQ	df1TAvz敥U$ 1n7d: |r4vylLh,2YoJir2sR3ahN$2b^0
Bx )3.O m;
XvyMJG46d:AԭN
{/ͽ40000 automox h^8G$zHX㑱T)%q(L100644 integrations.json @F.PMFp40000 jamf 
~x~(Wsscripts %s?oN@W!F,Wex8 3Qk_GXy35ѐCZzG==6::=(<GxY 3=$@mv6IJy۱Gocs \;(htT )fHE+K ҩ fCAn:{8FF0%gxețmmwp>Fws& x340031Q+IM/J,+*c*W4lgM
:] qMkx340031QrutuMa8ϔ.N.xǽjAUfCt<377(+(bX$?W73$5($3?O7+17M$a3Wd;EQ/+ C4%xkalaP 5^&c[	v	m <	5xeÚ2?:WL ڪ
Ǩx340031Q((ɉ/J-,M-./I-I,IMair;K[ By~QvZN~y1I{.S3sϙ #ҭx340031QHOK-J,I*ӫaXT3dC礝ozyuOc v4
x[ʱcBBrN~Ʋ 6G]x! V,FH@Mܰj	>&x! V[L F<ij#Ox340031Q+IM/J,+*cP9)P+( h{5x qAbD=\ꌛo23na]|y,k73nT̸y94#B,W- *GxeHaN+=2]Fws& 
x340031Q((ɉ/J-,M-./I-I,IMair;K[ By~QvZN~y1mss˓tCF|ii #̭x340031QHOK-J,I*ӫaGY@94G谹+7Xwu K@Txeڤj[H4*:7<ݜ	 Ѻbx340031Q((ɉ/J-,M-./I-I,IMair;K[ By~QvZN~y1CpK{\O6oە %x340031QHOK-J,I*ӫaXҼ9x+忦mkw qFxe$66:Fws& 
x340031Q((ɉ/J-,M-./I-I,IMah]~otuW]ob 
Ei9;.Iq?QrmW %x8 3Qk_GXy35ѐCZzG\"fV<cR6\ՖGxaa(XOžT=_3v/ x340031Q((ɉ/J-,M-./I-I,IMa89A56KO%V|db 
Ei9&2\
}vonۗ̗ %?&xmKk0ƽR#ZBHOYZ"6+;BfgbI_bvLQ%K2F$`h|PtN#]Myd1PKyQSF5n<6
#V=SKjkMLB<_ \LJmCtCr162Z/ʅxk7L蛁{)Lc<n5
O{{r:+f+>?L|T
7BeCA%sU|VJU$lzX'9^F1퉗(@1l	bxM1
1EAS
<'!q3;3!;A7tce/?.qsJ2`W9H'QĝmB<)k,b 5Cvb

9ϧ2x340031QHOK-J,I*ӫa(x#OǏp~I۩~ }IxSn@}WR6֢(QR=]e/BglD ~Y93gf/14P˭VXL5= LV "47 %υ=ɨ3	X-[E"sǵzQWDN|k3)v18K7hbL69YxQ5mP	ȏސzBmu쁍Z
w(pJ_=)zj{Yc:wE>U_1dY
-j^yW1EDL7Dwc F> ?^
l˲-)ЙEAHNRºGV
7G\\S./w6Ka.dGR"loA,3GZ-[46?T89T+:6+ݣG5xTͫ+6tOW3@iիDzt޾$Ojx}=b^>B">|D(
Df Hx qAbyF=% v;(x qAbEF=% u5x340031QHOK-J,I+IM2Ⳋ
*TI/[4C14zd)G 2_xaaݰQD)M$fs _w.(WPx qAbyF=% v5x340031Q((ɉ/J-,M-./I-I,IMah]~otuW]ob 
Ei9/4ɕbjו7ۛ#x340031QHOK-J,I*ӫa`t}/Ju3 \Rx[1AE,DX!Q!/\!3$5($3?oRJNbRjNjJ,WV~RBQin~.P.Z]BBfBzfIFi^jYj^XN//17UVAMƇ. ^/s*xaa`,),p^Wyw^:}5IFwW& ۹Ox340031Q((ɉ/J-,M-./I-I,IMah]~otuW]ob 
Ei9F	z|LƑ[{ %lx340031QHOK-J,I*ӫa`t}/Ju!DqYbNf
HqqIbQNbQ6Xg\ɦ^g4#_e>YX  H%8xSj@)C@n{R 8	MlhiIa-M68)[{뱥'#tk% JvK)0sf	˴`&L`LY4K  6<AB\isdZE˖4[:i]$|BuXZeiIٍrʩΐI2˕4Ib}AnsՐuPͻqm;PцUIf2^CiZΥ[80|)w[Bc$dyL[-R!>}|*Yrl?3.s0mQlkS r?9ؖX8U#t4ÁGܗM,G"WbV_}e3@{ _U?b(<-I:߱*-{ iF9܇?pOk~}n71n3gTxaa`,>;Jc': ǐ,xaa`,rjZtsN]]Of5۱k]FwW& 
Nx31 PW W_\=_*gS&e3V~d'WƦ]Wf mx340031Q+I/J,--HI,Iիa07fYܾ|eؚO(l3hK-jJ+?Ue|~S)4 Ĺ(*xmRn@+f ݂ć
EKHW>dw$9u!+'K|s]dϱĢa+*e뷹)V*X_i(*eQN?; I)*'rIl֭_\Hl+"D݋F_y,
,835c0f7#rP{_b{HD;jl0?qKqty({Y{ݛXh6O9&?0&[N[^&"ĕ#?Yi%/#kq'
~Z6-lj-~=hLy\Q:=⪸5xmSN1W"%GU%T@UU
!wf8i~|B}NlOK4wʻ=m&+Bk8.1+$#Y쩑^X"&aֱ)#sVx6sֿW8?QeIDĠd0c 5
7Ppi$(SMb.ͥA
\)	c#H
7&LqAI]OX,>0;o5vu6F!T:f=i0miz%{2fIP1Ka]oIpUo(UIqǂZ;~B7=gH?pn1Xؚ45Jg^U7]Q/GU|
S}_Ϳ1 xaaݰQ$[+wܣf#|vƫ PxW[lUB[mK-
Kh,r+EPٙݡsYviѐhxc61xKH/&3vvc3~_c+C]d	Hf9y=GTb"yjl0()R;v#9ugXFUEHѱSN7=3MF !ѨN"GExa@bz&G-b؆g&9_##x&'<H#)aBd2U~q9\gCu?Gxv(貥埫D]FR`<RƉŇXI983slAfaz\7dq4j/9FEv<W]b"w#؁.Fv9

i	w.ս5N Ujg.=I@dtC{/-
pkpcMZp ll76%aw,5_A-]Hu,rh~^WK}Wzކ=#$N&&g9SW=;hUeҵcugV,6L"<hߒER<G̬0U楍|Zu2|CK1Txomf8<T*A>`>5IE3piq=km"(7'YQ*Æ>!#8<IVVai޲}<WՐܓ>sqeA!Zs|vc|D8T61Is8y,^5<j)O%AMFOsU,Le$qu.˰AU%3Vzb
w!zϳO3?}HuՊbs5\Y6VQ~GbLN+<c˗qӬ'G1o?鰋H[
,Դ,%0U^kavF?.	IIq%0 ՜`vG\йmsٵj<7|c'f+%fAѩ>ybv!.
Mj{Ep3S(+pf0u
6?2:ך욁ONg]5[SOi
_9ii8AbH.bB,ya;
[=<؄H hQ`(`7dR8y֭w5lld`j!<gKRsQ<=~8"`tp[`O	yf6nVYx{9FTeA|0
7#rN};`>n+-q\ʟul.^`C&,~, 9sT3a.ʉq<9z<j;b︆K(NU;S5b^pHs+{7j` uƸlCHIm;w=s2x?x8+j}V+KP
{DZa`<sYYj\x@SKީ;wx:x=9e
Ƀ3&ZS6YxN3_O(yS?5燓iI~ka邆l4Ś_kEx%]\CȒJmab	:V%xPax  bYI㴏dvv'x qAbyF=% u58xaa(ivJѬ*qFޫL RGx qAbyF=% v>Uxaa`,vm̝=$};yͪ] 
x340031Q((ɉ/J-,M-./I-I,IMa89A56KO%V|db 
Ei9[=Ǒ_'nyl> '1x340031QHOK-J,I*ӫatQ=o_MJo0yu! |ux[ʱ>/17J=5/($U3$5S
ϳRP(/N/O,.H,I 	iļbOAAW!713++?	,5_7bBQi^n7)$秤NdT(w
i9W2͛l0y"s&z @zfBr~n.UP
-Hc ( Rgxaa`,j=8;bAFwW& rx340031Q((ɉ/J-,M-./I-I,IMaH|qzڱ^|!|_%ܚ rˋ.={`qKݏ#͓N|& /"(Txh {.b/ę9Hj4[̪gʵM)cmm׭57Di_I*b"J968 FFz1hkxfL;1 Tx qAb2F=% LҨx340031QHOK-J,I+IM2Ⳋ
*&4}v:^.|=: XD	[xk̷YB!/17U!X$#U!-?'%,4ّY~rE4%BfBr~^ZfLeQsłEH[Ie6t0:ֹ
)	x31 ̒$7βUTkGlZڟ1Wv_+CJ*ae><4t!TI^n
^Gf<HYGL6%W0ܸfͼzWW>7DER~fNjQANbI*CU77gpj&O۹s!tr$.9kYY]*@VV1W|WrZm/WE)@''&1xm*q<̒Og4њ4ĒDzϜf)\k&X|VbnÕdyƉμ]>tvb^JV&Ckƛ_;Iz9Tɪ\SDĢT_pϫo*,6aso}H 47_7'?=3!hec-/&všE%yLpУ]졿ko\ Sdx0` TQhKxkgL;1 hxaL;1 h^xbL;1 hAxeL;1 h\xke;1 {x340031QrutuMa8ϔ.N.xǽjAUfC\̼Ē<ݬ4"5
Oިfix2<
- %ex)R]8Y,2Zb_X %x)yMkzޅוN hPxkc;1 hlxaL;1 ͭx340031QrutuMaXwjiFN7(J.-.+IM/J,-.+.I,bqs5il֟ 
#ex)N&2m[  z	hFxkc;1 @x8 V3K||RM4;Uej$!&>DX핅&쓆m`GxyCHkƛ_;Iz9Tɪ\m x#}Of63ҒX
=DS_KW!9()?O)'19$&($+8+8V(Dy)E7 %YxyCHJ`Kny	:L21 /ݯx340031QrutuMaTvav7wdTSΆEɥ%y%E%yىy)Yz%E.;b:Zr. "mxyCYsBX(ӝ_*V61 hx340031QrutuMaXaʹ%}Mq7_VlQ\Z\W^XW\Xڽ,69Shup!r~ &=:xSVVrutu Ozx-"o$k~ni>YA, "'x[*@nyԊ܂ԍ IXxyC#Fk4sEfox>1 ٙx340031QrutuMaXaʹ%}Mq7_V k5x|yC6t oxr Vmu|5֟K"j h7l̄s&!Li蛳铆856w+uKʰ}]^e$f40000 tanium ̐G}_Hvjl15x|yBGkVM6M$abVW/B.x|yC ҷ:ha~XUɩ {,x|yC ȕdyƉμ]>ɩ !#px)rNLL3~[/ o8x7 V3K||RM4;Uej7l̄s&!Li蛳铆mLxUMlUVM8͟Nb'Q&iV@P%\z>'w}42NEsđ?$8p@ℐv,̼oy~x܃om6o+QM*N^zNE
6;ӮG,E펕N~F	Vd*."!GCܪcQUNj$ǋG^7l:ڥl(.	]yL	"4AB5{,CN
H^bێqmy-
Fnj
zdpUhMB!Iv^_PhP/T"ꘅgLTyJԫzzp"E \_.ݗ$I'%M\mKN\l44MrmP$Shڞ+"ofJ67+,%&N1,}!l"]Dﴓ.szx!<	c19zЕ,}ާ:wx1\Rx3*;4>6<P`j+=
g-JtTFa-	cE1#؄w㳰[cJFD0LoSOneYt;8䂉a]gaXKF˕%aFFcZ=|bzV(k-3曗+|Ҫ^x(yyvl4{_f.+,3o4zHz?,funG{;*o0xO{TS''yT$Jx;0PO,b0]Bd|&'4
ƦqONs=7R)8M^JZLDǳuŦ*y)91R2zZ
U-"+8JN2AT	~o9u
8|5*O8QT+.Έ<Rt2p;MKEdzv/+IɿE},V%P(tXގ*JVƦH.-2GZ`7 P	_VDهO'z}*l~Lp\fVn<nܻAڶ뉰%xe1֦xT$xP,hhٍk絘ox3L7d8[U&k:S!,rʿM4x  eRҴѽHX~zz#!	CHx|y\F?ݕd.|<䍌 U-_x)bu\I
^l4 x;{BAQf^RbqqjIq|Vq~oL7fa  q`UxyC6|viRjQ^jIj1G"wy_8<uzer*c. u~hxbL;1 (xmkA@-]Xe7YHR,zh+MD:̶KqwB"'= ={<xI&8yͼї'76vloaj Nj3JW~VLrQfy2^w>,dԁ}&෹s9ZLCx 8Y<c}[m 	逄hk<x )^(BXHH0l#vI`LL4UHOO	N$Ǿ *zgjOj)^qZ&92UtLéiW0U_Ƿӎ3%,?jN%WD50\eOKǊⶩ/'𝙟SZl٘-_iVLՊ1c(b	U7}"*bKǝz.v
~j28V<[D7Ւj
x̼yBI x31 ̒$7βUTkGlZڟ1Wv_+CJ*ae><4t!TI^n
C^;kL\E{'MI9E9%gVLé<oN̅JN,JMILfa,N9mjv)8,$B"HA(mBkN||v>DUJ&w9ɩy:+9to/gZaڲ($YetR	IJMc<L->_޼%D:'37Q79#('3<Hk'.7r\~*DYqinnN~zf2v¿o%[W#'|DQIb^fi.imGvKesdm Qpx) pautomox ;;^ժgψ]jS΁x340031QrutuMa.R'iw+3(J.-.+IM/J,MN,JRI9z%E5Jj[ƷQ)hVW =%ߦx340031QrutuMa" }S>"}>!6l3(J.-.+IM/J,ML,IONM+.I,b.oT~tLޛV\< #
 x'`nxKK$"8fs>2] Mx340031QrutuMa?DժӜ]=/[aQ\Z\W^XK~ߐaPR9xSzuN #&dx%G~~zMY ]
x340031QrutuMa8w_5RIZO
K!KKsu3JRӋK2ts2su3r2SK&0N~z} ,(91x}S?o@]RAEOʒJVPB"*νwY1)8kyw4l"̔\=PY=82c蝰@/֔Ļjhu)ula_Jd>G	dhf1X]U0*vaE$Ӥ,OxEoNCqT0.?)ѼJn^Z̸YKRƋ~GgVnr@Yy1 '	Vၖye{kdE&;Jzؚ\VFȶf!
&n)jSF[ɽޭQsI3V}q}	ͬjY8艌֍轣w9J>cYDmy{ϓs\ĐN
ߐѽuG[Ϳ?Jx340031QrutuMaXQ!SKTۃNNj($?W73$5($3?O47_$ᾙ	+^ggx5 s$ex)rNLL3~[/ oO"xmTjAƨA"
s՝%%,d%J"!tzjg:n6GP'7УooX=Iff?_߉v}aSgfVCƝ>rr6YYVPQTFQ6zmpMZE
 T
G M͵V|A0^Fa(K@ERؤPDkS0׆$wVkeD\BYNlp]r4 đǦӇ:T҆gҘZErkC`jHԡskw"
D6Hbe$рi)6ӃZyKGAކ|14]z*`
Iͮ>8zdeo{}}$HYnDh\.$[?EFfۗ+,=Ui:f+L`CiVN]q,7>_0.ԌBJK-eŴ%g30%ݗie,y9 9Xi%8f0[73k7't!N&H*@!`ŏ!av풀K"h%GΧ֎YN)Ni2&<.7gymͻzh!m(gNZV٥ݐf3|j_?fx340031QrutuMaʹIw%[
7(J.-.+IM/J,-I,+.I,bH%}iQv92~ !"gx-̲0=wuXy[ kx̼yBI"5Vs9'Mmw3Oie|aZC^y-M@!($YetR	I<ٝ(<Hk'.7r\~*DcqinnN~zf2v¿o%[W#'|DQIb^fi.imGvKesdm zI29xȼyBLbiI~n~CEd)k226'>> 46x xV R)ƛV!ux340031QrutuMaXpmo[~<ԙ!DQriqI~nf^IjzQbIf~nb)P$B$fJY (kx; )VpjIIf^zcf)&5v I
%9xȼyImsqUzM	[-Kk+ ë
x340031QrutuMa8w`iq78RP3($?W73$5($3?O79$B"H$a3Ns? )	Jx<a3E̮kzP'ǚz]E^	 	z	/xff8F"ҟy<aEXZ(dg$'&1xm*q<̒Og4њ4ĒDzϜf)\k&؉D=؄}!RɮF"LpУ]졿ko\ ==^x[˼yB县f՞<\ǹj^= .x340031QrutuMajO[snߵO
!KKsu3JRӋK2tK"z%E'0kU禟Ϻe/ a)(x踙qw 3x340031QrutuMajO[snߵO2 x ģQ: KYx340031QrutuMa8iTen@ۑp_EEɥ%y%E%yE%)Ez%Ewqnۮ6n= 'yx340031QrutuMa8iTen@ۑp_EEE%)Ez%Ewqnۮ6n= 4Lpx aėc)q>&!:FRӯ\x340031QrutuMa8iTen@ۑp_E RiLx<a D`x\ <
"YCw{"40000 digital-ocean Wά oEA_mBFX?=RPTŏu(Zkx |u+gD&Լiwxi´ x31 ̒$7βUTkGlZڟ1Wv_+CJ*ae><4t!TI^n
C^;kL\E{'MI9E9%gVLé<oN̅J:(1G7?951yE(?wu?+I
($YetR	IJMc<L->_޼%D:'37Q79#('3<Hk'.7r\~*DYqinnN~zf2v¿o%[W#'|DQIb^fi.CۙAO\w]ȁ (Ux{iC imGvKesdm 	֥x340031QrutuMa?}ح9ꮰ\g!DQriqI~nf^IjzQbIf~nrbQJIL+.I,bS111N<CwLzn e7(!jx]QMkSAhlJ(-n$ZBKlCF^vQQɛzy3qf޳X7vݿ tܺURDs:G+?j}_l
Mzfw*7= "à3gǺ./R&Ҥtfa
HѺrY`vб1YoK|Hlw}v_9_hu:ymu;#]LIv`cd$i_9S\$֢p
	shLpV"uKk':[}I9p)g$IW˰kbb-qb*'PH.EΜHy@jě0ߚ_6~P~
Fg$P@FLqY.C'4W7WސEh%x{ti# {8x "4E+Д^Ip堑jrDlhx#}YrCl &~~x8 "4p&}| Y	ȑj`h욮憛
Si6[C!#>Gx;ti/v¿o%[W#'|dEFE sx, ##*s Library 👋

#듛,ﳴHenlxǵA1q*K# #Ix ]'j⾗Q&VxkxuJBAIR"또
! D.U"2up̜[HDZ)v>A-{f,fw~;k\!т!SN5Ad2JBZ(U_4BdVE'pٟR1~ͱπHPV0:45-|ç8ll19r% y7@f,FFP9̊ը
/wMU̺Zmgnc08a\ޝ=@\njCYS/YYHn^!ܲ=mɠQ[nXG6s[פCloV߰0x340031QrutuMaظ]L t&8t|S 
5x, ѷ
6N'3aMT
----
.git/objects/7d/cf64b5b5a2636f62e3710ee896781bd68d5358
x5}PE)FjA;Š"%b{n9y=.|'@%r%i43$^Fb<$EP&*gy岴$ R}jhqVI2Y]ƆdʊN0`آqO=S:n<+NZY!=LQ8p+vhԫ;* 6۟oޤ[|ۻ{娷le*ՃV:[MU/?ٱ}KJ;pg]^͘Ifofs1mBhGHD]
&?i}?sG؃jM(, PܨupqmjΓg/"e =o-lY綄Ȋiܹf

.}-7M^yHPFN4nIrd|_{ۜ
\uco"-˫yWnDbS MhKZoK~35BՍnqG[ߩ(e%LK	rz#~q²B#3|4g*!	˩jz?հ<RYHŐg0]tۭHmȈXAgMo&)q"dLLGon`;'PPg@FG0gCو왾ήyYW@,
`iHQ52.t3Eឰ?y|mopzltxlD/Ab*>
޲yHH^x7!LB&4lt[=uJH>p=g_zqev*L`h}^ك>ӎhNlp:`NTĐŚco)Is6Y
----
.git/objects/29/5b20f4a41075d2eeb167d11c15fa162f21a392
x5{L[Uc.CcscJ=2b{]dHf
f;=-
*܋07]+l. S	1&0aiUYdr/s#p%e@.eed$C@fY%kjlh̐-T#ʬ:п1*5LG	ٺK5=[ȷ7:"Hjf^۩TV5aqvzsr/Rzk!ߥpW]"G
,AŐ?z$6

N,1Mpz6tߗ'fEEBN2^ۥ78=^%y%0@_
u'7q^{dXN@v®@ŕ>yM47P箈ȆIWz+KV~'7OH/>$D=් lʸqnpI%yA߼TW;
A@<ZK1Vl;'^@KSWш )֪'p,5۬W	9a)S"5A 7]pr·blބAtVyA">
U8	Lf9uLCU>r,WD!AA;"~-m6M6/22Ј1x[Xz:Hn}к)EÜxpq>of-]@u	ԗ{;u_9&̘  bl[To5WGלTċ'9lxQ0(kV17lAc੕=#IёѥbQH<YM_Eێ6AV%(ֈI REǌm;v	VԯW坱l>C3x3;?k/#Mnfج8D9˙
[?;W_lX
----
.git/objects/42/e424eaca52fab40403cd6fe2841bfbd539b3da
xAN!D]s
30vc\x/@ۋWHV<"E"ˁc03.Z>jwdm4^8zGv֎|X[=H~Ko)?Z^aZ'6ZᎧ}bspsp1+. [~v`
----
.git/objects/89/c8f9a793613a531382e566ed002dcbfe6ca905
x+)JMU01e040031Q+IM/J,+*ckӲGK"Zu/ 
----
.git/objects/17/1033a22435a71cd81c242bd3f974fc938a554e
x5Pu/hyR(vd26$h9a^Ϟ}7<<4$&R`yuLKbuẮ;
"3|xL!O
<Siut 0kX./wz[3[[Z#K a<_5߲ABe<ZB}ԓWt߼Qݛz#4o
p-wBS~OEY1&}bp󛅻Sl&q!`@xL2;ǯ'6
9;M
]y?
z<cKwDE&)^ڣK_ts("&Ao5|D"\&d[_;
c/-N~/{KD&DTnEE^_]Ѕjna$iSdj)o=;\A)L\)I}HFUH̑	w4<$|U̡K 	pS]0zdQs"8R*S&]ԍ1bٍF&+(Mme^nKZYp!B/}s'Mz\ш!	hlc?b.z*'ө7l!Y	ZhAAVH8Q[Jw
Iηn:Z<Wm3`WrK|bX+YI;sW^q?q|HxCvu|4 ̚эjvmj*;"Xd@0ڽT!.I759>Z`0Acb!7Z( :p#,r0yygx9'v'Wo#x7K'܋g(KH[qlhiD4D%lfWIۆ'Ϲg/+
----
.git/objects/8a/776f8b1c1500d47e05e9eded22379f12714a34
xAK0=W}&M܋43-lN{^bQh}#H&ze'):d9CX9AqRFuC@FvLVhkM\R*G-FK^>"p|XKK6X{^i`4>9R΄0fsş	NS
;m
----
.git/objects/7e/2c70f96d4104be3c636a0d9bfca7e136254aa2
xMK0E]WX& ″TХxI^f
6)oѭ[p9<OZ+nD`ShS#;e'4.R
Ă
m*;I9ḡZ+/yn0T*~[]ϯ:߁tf4^uGt?vqܸ`[2T
3`Iz:><72ll
----
.git/objects/26/41a44f788c7225a0c596913fb71e201e32201e
x[o0w_az.,n=HmwP]|1vdLOSlCx//7 ^#1P9i!*r0!l耎t4tf;(H`oΙ.\"ġg b3+I>(}jW>2W,fPoYՓ$YpsBUnHnҢhQ'pNsOaգێ+
kz=;}sv.BRWv`$m\@:dye-=IUjMMȱZbWj̫'k˦±|g.0v+ Ђ]g|N$2G軰gBؖ$nXۄ| Y@k+[:U%3	
gJ@MJ$ۦN3$CR]S)H!炛GMPkϯw]$ό}LTv>1
bBv`$\@:iz]-TH<*snS]FJPM[m$(gƮ	-IpE.AB7e<ITxjMs
-$eȾLS
----
.git/objects/4d/20847b3b01d2f65d413ba35d914f845229eb78
xKN0P9h"GB[VݝID~8n^*۲LMVE88$	!SM%!yvF,P<xҜP(o>D6
B,srDN&ƭ7ܧGO,rܤu_uj-cphuw&4}LM{eU>q
----
.git/objects/75/2b772bbfd66d3fa6c363cd02d243f758cd8ae5
x+)JMU046b040031QrutuMa^O8veYl'PEyizYyg&wo.?nPVQ7ņ,b5LYiqI~nf^IjzQbIf~nVbn^qIbdݙx.
>uГ= Є1
----
.git/objects/86/df876249f7d204c103c56221947c5d73d41f78
x+)JMU01e040031Q+IM/J,+*c`\z7q2 G
----
.git/objects/72/a8a61fc370e324193f6d813050e1373eaa63fe
x5qLW'ln"cXڊjڻ{Z&+*d¦"l(e1lV,(v1K(d60w~|?~y"PRF4:)Uߣ	vze)ݦlLknjV+gORN_kKmSTIMjf	rzrw/O>H>ݱ:Ymߪѽ+
f>/T2y_-ԥf8.,qWޛ]
i	Kܠb?6o[B{"]ד%a"A"?}uUޡ̟JOMm
y(i;ڦaֿ	{ VePX@ķBAj!å-M<pnQSwޚȅi^z

	U~$d(B#ȁ>[n
<P{\ƅ# r6:ӻ/~j[h+;\#<!z`Um_	2--Z{mrd-.'[F_~I()Cl@1OvhfFcPS|3yBN9$"|;FuS۪yx(KBf!ECLt>gysv!$(1rЊ(Y1ls"E#N!6Hn;]\So^~pmM^8`'+kcZu̘L0gC`M|{g|z\3(CCmG vpYM.Rfh,8@A(g$E}C)ёѹ'K(X1
TSi3zEH
ŁGv1NUϤ+2BÓhg,~ih@[-MOx!޸ʴ9wvVa
----
.git/objects/44/22f890bc6d9d7497e8c37e1df41f1ba08f7373
x5mLSWٲ@Fqv-k`q-zz{(/2N7QPfiQje@!#ʲ,Ky1؆|9y''GJ2Ӏ\&P(}Z]&+rwɚ+2Z[ 5af _,j6Ew$2
Vj	61Oz*=O{pV.zSy[96>V7C*@#`4]K܏{.{,>&4 þӸdb}^zQXL!JARW7!ŲGSLQ3a iWv´ΑjC$K`"V
:q]+!rr#ϯ)pvPpȃ=wEdDvL"E*/UE͘\N%L^~HH, ;	oB%y\lYaWO[CZ7
 h>XY~z0>)!pFI6#t7lS^<RfEjt	hlo+WU:%ˑΈ2F30uxqIY">[xl1H@<v:OtKbiH03J"zm]v]>zDd4d	1af1)dbݔOrC)w8|Zo5h UWFNf̐ex9K5qY`#"I[<&(QQ1?(B?gX ;|GyϮ5NҎse@bUsQ[_Gwj7Bl4KP	@KbF*}Wq`
VWKϴ̝]	t.vp{pW[nVm8hDYJ(!v_w\yD[R
----
.git/objects/6b/411c497cdcc8575aab3eadda290ea68c30909c
x;K@W~1d6
Zŝn`3&7ޠ8|4Zn)A5Yty""z{R fj0QYʡ*Hq!Hh|
#_VKZ_ҕ|~]=Hk
®"6}?vq\`#qp:7YO/@%|TlM
----
.git/objects/38/5028e53cf2dd8fb86aa9ae54dd43d9a519cb3e
x}IϣF@sW#14i0l1lhh68QNQRSTm[Mer$"$$DDaM!Zȓ\NE$H`	%8⏜K	L䩒KP(VLP P!X	Tp9"GQydʞ
6UFh/!JkN/<:~zJ򽨦rӾkq(|$c>3hVn/ՊG1VOhi<29<?9۽w؏I=RX6^꫖5vAL/s+o[
wZ]̑}YG;o垻߹t1}+:I̶o׹$4X #_nUP{n5:f帠H)^1/YYiF(?6\E3;tshobN;\`(_{bc*}v43ZƂfYm<ytkx_yúsO7f;ND+6j9S,*׸fo,ݪCLH܃hagmeﾡ8b_W(蹾تESz'ԯhw{~9xן(0mdPO}ӶVDƶ8MsڍYO{A2
O0"wv:s{f/HϜHDT`(@6-h3}%@͍=N4Q2녚9/XQ1dВ+\5+OCp8_MB=}Rv^-BV7cW=e;XBi&POy~x<3';rڷݍUǩKZ2~s0^r

----
.git/objects/6e/e8f7cd0c3b272aa586a601f4ccb36a23de5fff
x5LeG J&3 (y\Hn^9}{sq~;
OVJ es3L8~Oa:$Rץ
~=ϳg!%\9XU|jca41E
X(/T2fUDWj	60Oz>7$!]zI߫RQ"ߝ=0\PH-23GH끻6,7W.Zfm3}G;Y=wcjDc183O[~s8MDEBN2	LEاr_{Ns:KH$K`<̟=E]|{o-^2,' as`嵹ϽZY1R+۟}}p4oݜ(,凄2` Z2v
ԃs$ǒ<R7	m+={lRA杣eU;{w܄u1G6C4"H	|?W.\][qj'[ODjt!w7#AnU o)16AFo@J:YM!.3'qlA?=6ZZ_(LC,|0ЛfFyEFCflz3 #p;bZOvdWNl,OăykF5uV*Ϡ2PD0c,m-7lFw}j!J$<a֏zAjtC	^2!LfD`쏲Y;a<Lsň@:
kմU4=C k$PS452l]c}!"2B5eRӍgK+7!:{yY0~8U4V 0;QrB-G_4
W:֟l]\L!
----
.git/objects/6e/258ed3b83b9fbdbb45872ed26e0f0456c5f3c3
x5PeG$MJV&g
&(ps#"v.<}x~7iy@I<3L[u
W~yyxC(J!OI
<YJhkCW$y̖7̗%764*K+*bx6o{RjSh2FXY"<BZL3K]̷@8x&݊ňgvw;gy'SL
BF}juK_nKvP:9|{mwkEg18~L\5ݛu:?MRDEBN2L_VSyI:F{s<g>I<W4.Oo#>x~8ɰm<E[7090k]
H9+sefN0OeI/=$D}Y@yۙt&ΕKS٨k'ɘ4% h1T^WyeCo9AR@sU1|D]^&Hk\I܍:N2։BåENn	Gz1H@<<Hߧ3|i"0
	rF`󩢐?Byv{PMQ:*22Ј1d3XXq2HnOvƊN<47@LH#s$d^oS=oiݣ"I[<~CTLqg =xvM_Hv|lx|D+A1.6uhy/9 
,AFLE wJ[+cjK	Vׯ(w4ΝU[	t,p3య
n7'fA= JX\D%Mc4lvy醺
----
.git/objects/9a/290ef030d56b9a36c2ae6aeed529f9d4722d6a
xM
0]seOq$3Ɩ<߃Rk`Л2bth0NexkEV+5yu@N.8$IdSr%F'4xl4VeY̧+`c#:DӾo K
----
.git/objects/96/22935f14b382ee58aed4bbe7abad4f9163a7c0
xWn6C-
jem@'#0hIH9E/n,˙3fY%(5/aݨ֙}z[Ό>o}õ^\G(>4Xs+Z{
>ƌr]?j!M#½Go[+"XVQyZ;?-{v3ؔA!VSQt&-GW?Y]פ5T57o[{hv@`z䬸@$ۉRƦSvG*
p/JyĜ ]-6bȩR)cImb<lQMW-*=-T1V|+gM<QŃxB)xBS̩ֳJ5WvP;4
*e-
z	PVNh9(^K5 =Ibn7Ƌ6_zflư*mll9d&؊M!?dޞ;@ɘ-u4]>Ya^k{xGZ*XbaT+#5,yZΌ1~|)~燾2¤ r:Wrʾ8
Δm+bc5xuKgxaMWQ31{Y0Ct
-ArYѵx'^=$-AW5ط=r+-}]\7nDJS?:b'dUIe'tՔeD)C
oZkG*zvR5 ^RᖟI1ӥCPHgYL#}#/)+x]mTFGS#4U"ek
Tox[h(IFvr8h?QAVռQ[ zA㔖C=n wҍЁ!ڨڡ{J)xI'N* 1["aኳ.w(@w-L)%[-.uC*`7y_5.{[{kWՂ.{Q9
qy3kkl0qh 1;:7@t죷 qPY!H'XBIq:}s8WXJN
MB69]üdMI?mo^
AeJXd4$B9ۆuzCJR-3b?>Hd_Ӹt֝Ȼ3otZL`/S~m'n
----
.git/objects/5e/b717d3eb7af97fae61030085e7ab3579afe87c
x5{L[Uc.C)AȄ-Xd!lVlr-Q{
sE)lBsNXAn#ը	2ĔZr/s#p*)@!)I9jY"/;v*ӚdBE<2<YToh7WĦ-,l`|d&_K,\#ݹA3zEU\ ?{v&d!
xrF!Wrs
rh=n%c_%^s]^8C,@ň?z.cW'
)ę)( ]c1ud ]T$t,C(HD]*0ewc^Zb'Y;eHYmj~K	FH=po]j{yoHDdw
V6E4'"XA_+qwcߌvc{@r,Ƀ/mh~K5*ĥ{Z# h6TUyQRx=/&pFI=-yI|8#R#K%<(:
zgBM1hT)>?%`!AS0WGOЧUOe4$2QF_9jkhU4 1<f3A"F k;]De?X0ʉ&֌ kWgGY7epD0c,3Q3lVw	\HxfuLص̊qg6#=a(xR 1W(
cvm#-{Aif	5`(iS:Y|0 lAq;U9ḄM
T{Ɩ o"x;C}Ve7D;vE"bu(g9S)Ŗ}OD=～7,g
----
.git/objects/5e/f966090cb862f340b51847dbebf64c3b0e412d
x+)JMU01e040031Q+IM/J,+*cPs\_S贉 u
----
.git/objects/6d/b3a6df0648cadbca97265e5b9e624147cedbfe
x+)JMU0e040031Qs	./Je 2Ǯ`Yg ^zfIFiÛmmwp>'OgW`WUV	|xij<C WG_WoM6nhP:K?bSbiI~n~CCs^f=Stٕ3JI9E9%JPyվHϿCT%'%&$&g3<oZyȄ?o6CVV1Q,WOo|tQZjbpk"ަnh$B9ɩyW3;O.fɳ#V	ۯX9BKYk&t}γT7|VbnG[)_M]l߃KYHg'de21:|sA2OB&奖3l~iړt9ڱ}as&=(MMH,Lex58׮9|Lkdo@&%g恨̼ԼJJ?5_Χ*b}fD#TY'6iwzƓV\OJ2R8;bmA8(ץ݇Ҝ;Ή;췪~hUQYTàx|_
^Ӷ,:	|ݜdïfr{|j,c/8"T$1/4!b*C>~њ 
JsR2s2K*ur$>?uڪ'\ #m
----
.git/objects/01/a5cf7576d7da51e05dc23be2df320c9e88ccd3
x]o0w_aq=VrNS$.uql;n@6qI9<r8c.c4x38| 'J^DӴ3D ynDڎR>.rux"V_SMwsBe?A2j9#Rw$K.Տ+2BuS7iR^o]wB\\NEbOSJ7*R^F%c]MNn֠5nwd:,4;ؓ7,otV<vYD\aTmaQeiVdKڪdL*ܲ|5g6
0v2Fw$猶o8NJ8gHfofD3%H\X ecf:2DkKK:9ӣـ 3VO3
$¹Ԍd}_IoHOTumD-Qx{6dH^ uLܓK=KAU8]k7Ӿ$fGU[.gvomm@J}AZJ(-avD[0
瑷t}8=d@ʣ^sNYP4&!]IՀFTgL]9P (#eGL%Ogə82SPmn{Y7U0hr.\ٷy6
P5ffa;B#.t	-cHb۶A^D"6$@lpKI*YG.h*2? iA
----
.git/objects/01/b5b97805d596f7ca6c970e51562237d8dce914
x+)JMU01e040031Q+IM/J,+*cZ1|	sϦz
 n
----
.git/objects/39/135071eafe22acbb83a7c4f8d6645f7dd59d03
x5{LSW#lYFZ(4DFEOo{[&|L`((Q^F!Cl-:ceds#p%+
T(2U4~^`9zkg(mƹ̦&b$YP0-/\7TmIQ&o6ZY$<N]3¾g
$-mܯ[cXOR"{tjm.6[Te/:_x,M'K.P>1KyC{7u0B?ڞuy<#?+ܟ,*r&!L$m`2N
U; }P/1̓,yj[>Z='~?R%rr.36].죋NdanmH|yyVj~DGB`Iƾ=m|ɱ$5zUۑ|iB>5% h:\Ywg޼ls+K#,фN
2f+e;FAaK<H>#	qT#~~gOi+'9"0
	rF`3$毸gE;
؀h@"ca1)pnrbC8#@Z;'`Mʟfex-]`3V%'9lxHǽDS3ZD^."	t?}.?z8E?1>:T"@̕!3+ۦo?Ҳ^j4KP@9'ō*sOvCDdE+T朡gfW{Ɨ o#x7CVn}i|8A4N 07Qr-_J5ke.t 
----
.git/objects/0f/087b63ab573b923bc834361960f6e0e0245fa3
x[o0w_aq=Fu$4URf¦N ii7y>9q81:}P'%J^%D3D~{'ן{ãa};;m{-5IBEN4B^o.1ӄ6n:!dQ$c3"y,zt7vެ\E,AHRvzQTfQ^k˩9ŴPZfQbǣpQǱGW5hnlW%u&y{b=Svԯ
K*0ΣlHDre-HU* M"L.8m3
8i34#yYٞ_ccZ=Cz5 }cn^$E/)XZ:Lg
_1<S5Νpf$s
\uhNr =
gPis
͉ZFx&=ش!ce@j.Pw=S`)kڎ/`9y}6gvߟ EZׁ:oifU.*bf%*0#opz\=n49G`h"\Cf݌FL蜤2Wfs(,H?~YhWTl:2WPL+46fnva50RrFߖfUj92HݱL-@[ضM_6
:'E@*X. McL-%
$dyl8x4<
----
.git/objects/64/9a120d7d95463edbd443e3f9e16154afdc52c6
xK
1D]}%
".<Hz50H&
+E<hͦUfQLƀ)׃Xl|B3H
8ѓ5VwB^ÜCY.*=mpyO\\Fnph_xΩL;Z#Ƹizڟn*b(U} MhO
----
.git/objects/64/c3be6e93d157b53fc7355bb2653cb8b6728c8e
x;K1+n8L;IFPAKfw`'27ޠ8ʲRч)ڨhcR<qFԒb&H&}78Ӿə\Kp4}Bp|hmȥz~!VXF؍=ٱQ9@[#9YO/rľ<mJ
----
.git/objects/90/a931453802195437dcca4c8e1a874079bb54b2
x[S]lXqgW6U{pe0|R 2a|3Vb.-]ͣ<t:)N֋ӤH~eURފNˢGJɚe}]Ty-d,{KUh@_E*=ݔRo1ׄ2NҴJٚ.љPGssoVM̠sM%U5}IdΪh$kǆyF/7b(zĂzll}|HgI1Kb[v~~v[B<L"Q"2R3j
O/YQMo?/υhzhE \P<_irJڡꤪcRZB/eL0촮q碾q=:Ao;r'6onoGK{ć;st|>K?;xwsvɥ?inݦ^'%Ry&TguQH౯_-	|2T_TzVB
*YN`HD+"eW2Y.X6ZVeXOeR*KǓLu+Tr~2Ie O,WጽW$z}}J
מ',vs60l$,/hnFӌJ Ǵ)0W==ѧkIɬXc%XoL_u>F{Ek VZTLGy(6dNLE]TB0cq4xh{fG"5#-HQǿ>SJ5ƭͯI_3E$nfX 0b:a{QJg=x7f9ȐcǦIUC&}uCJB*"x	<>Lry݌z3荌(`y-:<r/
y`81Łzi=LLWbZd<<ybxz[S+2jLۓhRTG{H4lTa\ hq䳬J"s(`l1Sf⌱;G]	1 ab1F.Wߎ49	1G^ȏNڵϝ (4K%uwrL8`0𜱋{c̋V-:lw.vw
hi|1	
&GoT
8<&WabV;;p̖v
RLnX7ܿ",X(~W{EArN`A$	Rufb>Ӳ@'sqT)%TedΪ~+JJ"nD\KaTd1@A3=<WkX#3TVvm\B^`HTJ""obE*&	??^q~Yae<B qL59.k~Aff{h-4-κaį@o?Va>bX1l`%nz=@O|WXVcǆ Tm{8ˡZ#ޮЊMrtXQC&_XT@]'M
!n[(P^R3g9VVD<|]75"!"NƐMC׊b,Y'BLL%~V)zNN73@6Kc((m\kbx=
3=4#G]^sZMk2k"$E1kbm8/ۤkỵ|x @{Gf%Y6IL͖10.
;5&/Uɔ
yl{-B͖ݠڽ-L۠xZ"#ǩ[4J4J\ӣaIt+z|\N *
;7jA6,腢܎^,h]x<,m0jBaPqgX
8:⚇mMNk`N!qN@U}%Ķw i:kwͅQl|Hڬ73	@C|	Yo=62,D=vȐ
9~Ve[}5xU묾Gi=5ZYdټO0𼹱 <_͋|@7z~°@iv@C
=毞#S&ExKyC哈!j9wfJA[Fhٝ
Ptk''7W ā0{ʇBO13-jT"L|-ab mOqh<@%8[ݢRRjAL2i(N)YqVnyOQt@|SXmWxz$T4[;
en44i2durhcMR
-W[~ٖٿ2͇IbM_t$V76mVq]@
CS\%ynb;w"$uL@4xۣfc&h
M,;|
.]D8EmFPMKڠy{p
wWp1G%l+Asξo
MŅ5
nV	\&zo:;8+%+\}]ϕFc,O@3%JPgfEW{j1h5V\;V^i gfxGi7JAﱘ\F4KYЈYg7Df`Dxb_i,4SH3W75I/5^9tck$jR8kI' s`|/F1oZ/ԬpN⇸0X2hE;)ywn#i<BO[lE:m%v0vC<}SK`Ac'!5Fh P0Vcg:qYƮ#I k
ZZKș3isG+n»E T(u	7Q5nѵ74u	4aUSòLDy!HS[ ڑ^
2_YpMFeJ]HbV`Z]}vlݗϲ%xSmI%zP;'$Z_:ޜ&~+6p6!.Tt ?d|r,ё
JtDDA˃HanjٸjQK9BsFdBGyȐk }x;w0Y0T$OJjnL%	NJ+T!hy))Bh7v~p:
N
{4ФԡN5lkSa;Z؆eɝ=0䣳~~-ݾcхyө	}wLk3s:ٝnk<؇ens~e5m
(;.jƜ<2J$,^V
}cxXǇFT6!KѬ5`~^cFrBS}"(3w 1<h9z0WKl2ĿQ$4s:2o}T`Z׃~ړ.,B
y^//rC	-ɇCj4H @^s1j1H]9yP{D{T9!5茟;9~
O?i筊& NE2jko-ͩ$shEbDrhK~hv _=ݶ1ϖȂoЪ4α%6ϛwa1KL}V1ڲ(
{19@23EjHRc^5(wt
^tc?YyNYۥF6PYh}l4u`\b/t>]\%⿶e++w[f
E7BSMeۅi0i	|7:W[Fs/[7˶.S%xXM XlLc}5˯W<8B[&fIdG;M6廣_jSmYԆ~ImdAi<crA>
----
.git/objects/bf/346559546149db301a79d976969b46ab11f4c3
x[o0w_aq=]LbA*NS$.86rn$OI7ȉ		:uPB^gDӬ7Dx)x0<9g8>ӻ[{tfRX{uL5afM#,zrFD%R+`ꗵKHd)6PdUåbEeOeRQ%"?)NBw**('LD£j;N3[GW%MT{b=]R` m
ΣlDDeHU
󈪒 M2R.XJdaؘ[6̦.YNhIgtف?cqZ =ںy%3ܝVd q-c	G7)%\[Vѱt uL[S<+i q
Ν0f$m|.'uhө4@[=EsRExڐqa@Z]fSXHXf=K)"	LR|g=k{*y[~ RG T+i:̮alpy,@ǋI ɡ< =WDE`4[
hDV~r0uCUNr?
?bE*t6#jiy^}((܀#minVGD27HT
x McaL-e
$by8z

----
.git/objects/d3/3f28429eb92a2dcfb8c43bcb00b340ea462fc8
x1K@+?$;D<A-bvw.pɆl7hk+?4M5FDB^: d:CJ=RVgܙl}CغBg%e8z)i^?\O>UZ)rO=R	 fKWǢ e	rcO/sT}HlZ
----
.git/objects/ba/941d5ebf3ed891865c6553f34357648d53f068
x+)JMU046g040031QrutuMa8s2{Ş`Y}(9?/-3]/8?G7]ݭ<ơ'=aJKsu3JRӋK2tK3Ssr"KN<[0ìw Z;m
----
.git/objects/ba/87dfc772b27b748d7e0b2cae95125b83525c33
x5mLSW#زI0nslhCENoOiKwmiP#|YFA	BMւD%Cb+2vf|<9Pb<]R"1EݥXb*۵U8_ؤ/lz0}7a4sѕĪj	61O{eNz5AӺJV3ημ[tf`;*:_B@m;Onш@ҬTxsѿ;>r3^zSRP@4]y^k8Jۢ"!gBOA&.mUQ;}=h%y%0@UoGʺSk^ZgdXN@as'>?o/^X=-#"c)Ҁ7o!ʢO~LLJ/~$D}Y@q;{
K%yeRctDNǻ涋{\' h4TUQg߻6F`K.O:Jon!o
EO23e{%J'*WҬlz1H@<njCѾtI+GY"0
	rF`c1QO1ݮ/4!1&<+ #p%to.7b}('^\|V@>a4uS̌K3f2kW>o
Y#$nUC)HVD`s'GřkVkFƗJrDQ T܊5Fik$H]Ș@GX{e;E$@hPq;ok;~[	J9BM؍ᵢ(qP),8r)o;m8~?
----
.git/objects/a0/70635c323a59c9bdb10463c245f7c2f19e5615
xKOR04dK*I-. 7+~
----
.git/objects/a0/385fc0b610c63455f4e95d89b7d97258db4bed
xXn3~Ehؒ6eZ	e#,Q/)__'TPF`S>yms::|qg:7v;lCsxT?6LRXyj;ߍFTIŠjR!|*U0)S?eԂ6Zʺk@X8׆=]"{&_(cY|BLK	;ii?-/=;<)9>].0*]d^5m
0AߞIvJtuZeLry
g>⿢]O
7lF(ǘʙ:|5H~Yh5YHyBY}d+q1.ښ>m>{hkp>kXl1 @uwZ3[M{@Sfu"0O*;ukcCtX:-1WdGt_hu2roϓh^voqpTkC]Mj$o[Q1NbR$	yd;XXB4:>].QtQY:X'W]'Ov<NH;Co]8f'!p!aVfѡF㢘K	Z*+3Ϡh6lGWAߒeS}Cߵ
NߣjOGQ%;bN*(;Rmr%U4'&tM| 6_Gɽl V{F8ǔU*WpCk}[`cb9/
৆WȬ:|`!I2V
"ʎ@IL/BU]tEhv3@	ۚjo Avz=!!j$L͇wѼ`Hm"4m>|96i6crƶ""f kF/f;Z ¡w%,ݠ=Zh+df_bH]ߞ[T	O2onP"V=]S7Q
ĬHi( ~2:FsvId{>YHvxg	zlmnթAw>޾-L׃M[xLpXOVٴKbmd^ \H0l~pt :W|tPT/U^׊|^./]SBĂ!ط dߪ
Cv$ڮvc}Wo3ٽk,}ze%e-}`dނh^0i4z1xϑ'IS|2@Lo$%
)wF/'_Jl=AҮ<I
zY!$D1Ú`4Lbr-n,0Oz6 O|!Ӹ $MQpN(0pM`
Ւk6~ե(P~e~AR
1>NOi{OuTxtyQw"K]bji"X9$8`>eXtZn1 SqDE(_Ywbgmm?Q@#c̈́)S,R8b4"6#YrGJ89y0
o72ހ)ߵ&!a'1۲,$FAehB<k졊6g-acHr"M\Mdr	{#ECu¢+H4c '>
Bɰ?5H~b%>d\c#YŔCɝ/|O8QF::h	vxhFF$O&	LrY`Bdc\a;%KIc%EHe+E@
]OY>!yym#*4$8aW2]flhNNeτ1EAK9Ҁ}xh
3Nocұ[rB2gN5\)%˲ؒ>a"0
94Jlwc~~}ePrPR0 ef_Y'~x] K
----
.git/objects/b8/a4c8e016aae151007dce33409a53548681ee79
xWmo6g
6@M˲5>dM7`A sIAE#7u6s<YW?]aD>U?c)-?dbUʝ[+TVdL?h0#:3Lxx6\jx: 2y^Ikەs%鑖ƺwC ＮkӒ}0|:xoK0Nl>e9NA,3+>AE*};z}ȜlY
V~rĝUUKO.Z?zJ HEQt}3DXQ/|}<6U{@<ee1Ȋv/;~8<*T&2zk4kZrlXB#BBaAK-N,RM'	 mA9qMvس::oY)V>@UJ%qB4:e2xG '|QX?>b)f3o-<VL`n fHT4*  i튊@"hF|}xKvBے_Va CHg[iQ"o6S\(jdsSH;V9Y}$*Y"]XJDhI<\*c	lYٽ׮VhD8W?͎w>Bj,j}r}:9_[a{ȾGUڦT+&F+%	߈@ȓC[}ɇAМ
D[{`zVI$j?] m۸#ء-TOKdY$a`{fm'?$dmAOcK1JSup;uj
Bw>Zlش?x8ppl3"	/eCi<(jidAPvXiK'OϊF~
7e8,(fjǜ2 tNNetza º7R+IK4ْJNFlJj7M]iJ
62b%C
3G998.1i亓/Bf, m1ȱ6JuP~cάZv:zTPFK`z_O%"y&&$=GFk0n0]L.0vFiH%9-t]4ƶLipC7_]5wwƞuKeebǁf*Oz*O{otxׯoV/Q-Eϸ2C.ΒtMo[0N71Nwal6t #@a6έO\
Mivj)$AOJ(=}{K$2t{ÈAemEOx'0G{EĈ.O^7ak/Hv,얠k4o	o
----
.git/objects/dd/b83a732919f6f7788f6ad8fe909b02c79112bc
x5LeƸc vca"b].f^ߖVб2hmP,YB101Y0a'˕|'+p4SJYF{D+`Oޚ
bzq<I)_;$3J03gʆt;tXޏW'c2s*T.5=k(OH:5mZ\/ЅƼ(+B&?'1(UW+=e։v3	0s?r<#r6 av8ve|[,_]JEr`Fz.H~59pSyL6Oayk~0^3Ǽ^B`NNi@ʅmwѡ[z~yfCEdDAnЗEƠ]RXgsC=$I$/eq`Ay~;rzgKbvtDĦ3r@ֽ5{pqA]HP4	tԥt~[\e};S Rɘ=4wOS/`Fт$L~GojU[7~=n>ȱP<4!o51q9~?SD4bH*!9A0߽Gts	pb[&EƐ,id͈}X6X +p$
ǵWҝ͕N&Opb|ފm0]jix#sD=1ZHBCp;3}OQ/Ɗ8dxXZb7fMl@g͸VrZS!v46#
(R`rl
Hw9";6ߩ[tWcmrojVw8ZZn/S͝]qirHph\
>-]m|7׬x3
----
.git/objects/d5/c8d2658cf3b218b77d1cb54ade079b900f8ddf
x5mLSW#lMa#Ve- M-Ȉ6tP6L/((Q{1Zޣ!,[(u2a|y>C(Z.KIr,9)):>C}Hͳ_keԮ򽲦Œ$ʉ7`Ъ[vjjsh2FXY!<L~?CW V-lվw*_puafrGs=yH٪xZjPmw~<r\xn]pWI%<KvP<3;}m㷥бB<?%ז_~̗=}O	9:
&0q}I|1wߓY1Ȱd	lA zok{F[-8Ѱ]ρ헂s|r٦.L>̽+ =a%% w?
#}d|$D^<i{tU+M-:#owtFkHgGĘ<;GKS|[hw~ζm!GvC4"H	|X\YSY7,cu5B XnLл[{ɑ1Rȉ!6AFo@F>_YVjd/|" Y50'>LCUVMiH0]A!t}!5æԆN
4 1<z3 s;OKۏ짮H.ؖ=	W޷X3tqsJq

ߖ8ˆB"oFt(]wvtzb@,$ͼ3i/(PVnR07Ҋ=;D`3"0{3DǨ=SbQ
\:]Qzk4KP@ORJ¦|ض'9) 2JӥEo9kjXLiR7םþNjJ*bu¼(b9SïD,ն}64^{/f,G
----
.git/objects/d2/dc0803458f010d053064d8e698fc1bb5ddbeb6
xKOR05gVPKMURPr()JMUK-)/.Vp/MTQP*, K/KQR 
----
.git/objects/d2/a8631fec95bb2cbdec72e7affabcb5feaea138
xXr5d|Q#Ig|gˌ֊Qj2p@"+*OW#;ٞv:-~{~s;6o_}^Y:|
-MSA['
ׅmj;_M&0Tx ߹JLʔĻ;SZs&P[PY`/ڰ[Ue6_^nBh|u;~3?/m}dW3=??9fx_8EU 1(Vk`;190=js]밗wmf:ƷhYiy}JmWRcicǍ4GSNʙ:o=jJ	Yd5YHyFף,>xY<Y$?ښ)mص58r\^oBe3  Cֺj-3[M{$N_hg#@U7JdM]38b'6vMdHSdJIJO%4>xE&.y6,+ێbcl@#jy6Եmg
n7G8IF&@-%xd;XXR4~-J}L7(:Ǩ,uW3NiIwAr~peqdg!pYj@XYwmQ̿܇
S-3)각M}4Oc ܡl
ۡot绖~Gӏ5{3#QinA	>آ
Tn@YFDJ+4vho~%\[K_`>Q*:wAJw|0luylKSQ:g~=Cf.K
IX5 R+;%146
=Wgꊂfbw0_ގ@ڡ$P:Dj9nx򂖍$C(6dh}I rFi3W	l~"gq!Y\-AC/]	>e%w,Ϋo^h=&/
VH$
dĐ:@%.e1_tн=!ӿ=߫J1}ݠ]lp/`­	1qEg߃𧌂p qCa$=2}YHvG*ܫs,lALCVV{Sp\eet8>cC-ףK
͜2kcwX))&\0
9hΰSq]v{3Y/}0G^V^r[B9J.!%65x'$.N~&gͻŬ)y9 OƆ;QoPx)a@wح( NIA(A]`lBiY5Lzv-NƏ1}zB|Oj~8p!&Q(qNf(080pM'<L_͆{BމFSwkĲL %g-ݴ>ʳgZ<AG\a٨zc1X@oS\!0{2;-9^GnL*)zQ1#Oy!`tz63o2F~'\QFD©ddL70$=Q~]Zx#Zk`4K~qFbr.\&ězc,{^%l,Tn[ؘ]0ޔʕwQA:k6K*CXtDC0 <.S7 #;':rK(1ݭl7{llvb&Ut١N|{yyu"1QFAte䟁<:ZY0Zp=F1"Y.K|F#L	(qO1\hH9yD,uTDEEד<Ũ~ yI61X.(pOe'wcgW
3Le¤˵]Li<X4t\Jw#حY@o!J3˫4,"WJy@ɲ,G{^CⳒ:#Gx{~t˳ŏ	ڏx71Xv2j-*%8J-.̾:v
n
----
.git/objects/db/45ec718b8a47480807c1f4b1639b36c493a92d
x+)JMU046b040031QrutuMa^O8veYl'PEyizYyg&wo.?nPVQ7ņ,b5LYiqI~nf^IjzQbIf~nVbn^qIbÄL!wNI;T 1
----
.git/objects/a8/ac8762d742963971e0940384a3e4fae82d76a1
xAj0E)	cIcK@E6BhG?UU"!<P&7p7Wj
JNM)9̑|Jޥ=Sv*V$\rgeV`|q	/my=}ӯ}^kMAP
----
.git/objects/de/bcde9f653f7f392f70538d58dc0bd1ae8163de
x+)JMU4a040031Qs	./Je 2Ǯ`Yg ^zfIFiI5a*kڔ
̓Z` dqh1iy/7(@Ux:2̯ԟWMMSKB:0L䗌L~]"$W0T_9?efړg?E]9QZTXpdyG.Y49DUrbQR~nRNbr6S^9ƪ7L3Fns0TYfqrnfq*CrEW2xY,[+,B&$B"tČeQz{uԲT#C__!6pvGP%LONMc8mGޙ\?dǴ`/T]~r1í)/T>h<E%ˬ5tX~q:>_YD>+17aҤG}j7f<7{NKdbt^(*e_0le>+&奖3l~iړt9ڱ}as&=Xv#kq]s,֔F	ހ(MKLOMKQ)y%ɩy%E9SV	YLhfkE@Rrgqb	3BOZq=*JKeВ^7~ʷ=pCtŷb_VvfHs8'ǲߪTE^fAnf	CO+pjU~C!9_^
?ԐY^pD~Ĝļ\}(W{iGk*<)(-KfHR}Eћ]K^w&DMYiN^jQbRfNfIny~QvZN~9C'{c]N[Ud_ 4
----
.git/objects/a6/471d553b117141a367a6e056bcb7162bf07bd2
xm0{\ LYE!mBP>6	zt[ {jIPɼ()Dj6:LBhq}T)3
-[n%[-?xW.o4'w/ms2?z_	PT
----
.git/objects/ef/e9839d381e4c9cb1d1057c2e2b43d492f13926
x]O0wͯz=7%czNC݇&$:v;P6g;ib=Is鉝pW/~!Dϫhxp<AxpҎR>.
\Ěc	6nnBȢ'HN-gDD
tإaR&Y	
JWjEoʤ<*JqI9=eNqZ*-sܪHEQNRǉG٤hl٭K+M3hzKAR` m[G&얁Z:,U%fe.ѩ\JzϤ2l-Wqf c,'htC
hَƸ㴂I{hkfKspw/"kxk0@٘G8:O)ڲ{{2 @L9=L	jFt/YL&
V9QK4{^
+C<aLܒs=KAmq_,@f})-H8,\w]ݕu )#?2@GREi_%@*8M;pU$PEz3"ȂX0aJ4B8w`1V )G
?b*x:Oԑj3
2w˺چNJ&H}gQZ44qYfOhUN-@;خM
:'9E@jX McO-e
$by{j<A
----
.git/objects/c3/23ab8bb9eb61f5f3711268761987af03f6f5a0
x]o0w_aq=K[rNS$.uql;n$-qI9<r8c.c48}P?RiNԏq<z3~ɠymk	
M9L
e.b1Մq}77!dQ$3"y,zIt_Rr),D9%iy+5Lq7Y//5T$9Ip"Ջe^8t|>f-Z6[GV%u&y{b=%(jK+0Qt}$"gಖyDIYIt&,U%gR6
8i34#9gtٞƸ㤄I{hkfKk9;[5<:P6f.Jci@3=
P8lEtnO90@j;a:@Hnзġ&́Iդڪ7P4'jf?!ce@]`\
),X

$y|m ]ۙ$fGU[.׻_uuUӿ=#|_PҬJ˅] ìQERY<YUݓHCyzΉ &b=+iЈ
̕+rpRExd,4@Dl>9Gf
4Mk3fMn444 UiFi*4HѲX>f?$`wm*rP9-jrWv2	46;Rj@JǑڊv?8BX
----
.git/objects/c4/6eac3cf8cfc2fabc7033c0181e9f58b99a07de
x+)JMU01e040031Q+IM/J,+*c8{į2$3  
----
.git/objects/ea/db1fc8c4603ec08ef6be422080ec760ffd937f
x+)JMU06c01 촜bmw|3anDV/ a
----
.git/objects/e6/70b9459076e6a793a671c9f7eaf14c5198f013
x5PeG8dPI`6zcDX0wƳ}
8H?:S3JT#u]Hx Z._>_#p%)r3ʤ4nN`9xgȋ]f|$YP0-ϽP׮m֤(6.,la|a'I*Ia߃z
-g\Y_wB"{*M66[Tۭd;T/<uͦ2P>Ι}w=Α
0B??Y?M6e#ILKMd
H^>I<E4.)*^'~?R%r*#Lt. ;
áu"2!'&2ByUE6+"XAgqwS}WqX;MUߋxM^) A붡ʺ'>|hGqƻh[!m+^fİ:\tФ cb [1:z-%ɳp M0⧷G?DOTxl"[D!A@v=a+.gF;؀h@"ca1)x{7u_v@xq}{3h0SϊfeؐЮ?vd{+W'9lxϰ^`V
U1WǷHvD`L&]rOVFƗJRDQ jT܊ubֽTYb-P=J VbgOQ`
TO5ϝV[]	w۸˅8Kq:(qЈ),R)>!?m<qlf˦?
----
.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
xKOR0`  	
----
.git/objects/c5/0f8474cdb34f0623868fc8e412f0f5e2922762
x+)JMU041e040031QrutuMa՛5ױugD+kA=_2.`vge5Hlwm)+-.+IM/J,+M()JMM/M,+.I,b49^dsӻuWv?_b z<
----
.git/objects/c5/5c4a034919c2af75c5f537f884680b2e0706c3
x5mLSW#:ln"cQ
"kXB
rR-``*8 31%cFǛ,H˲XQY@n
7-;B12ib2IIryLR}D-ڟ]5TsW$.#:0)7J5״d1ɺʥE󞌊|߳
{侀pōeQO
eA~v2/;փaŢ	)}E_roVY;(Κ.a؝:QXL!BAZzOEEBN2LGvSPķ <GA>õ
	NqujٴӞs0Awn ۏ
^3LANŏ2Z:;{﹝!~yAǒ<b"?	{fں_uՑ>[9(@pyHyο|w.Tm9ARUOc/RZWuj+7DjXKݗ{Q|i16CFo@L:Hq+>;V$ ܜQC?nQUMiHŐ0s7^0z啝!m6MvGd4d1b[Xu.Dg>u_rb}嶼qN>of-=3h `j7H0c,ȶGtn4z/Z$<aG[?EȺLfEWjdJP0؂, oVi˫#M'ԓcK%V%(ֈI $F$rl[eo{`+
VMwl藚+s' o&xCW[qډę-Y)qP),83(k=Ud_{/)Em
----
.git/objects/e9/2e7076e1b023eb38f7fc96405c01caa2be6ba3
xJ1$q"o#X7Y'oS~3.̠/)@1c2Re-4&iK:gM줣E+P:3kk&e3q0:;k|乖=T?}ߨmCϯ1ĺ܁s¥%v`vq\o3\NǷg%tߛ)k
----
.git/objects/e7/f6b86c43400c3c7bfb362bb13cbf6345725f72
xAJ1E]uN&tuRUq:~Z|^[8FW	LvNY*1|ŘJB$Ro3`KeϚ`S"Sͪ&qyY,g>cwk{=Q%pltl:b0G؟M_$p0WP
----
.git/objects/f8/cca7b37e38ed72b1ed1361e9d1f5f73fa8fda6
x}SKӢV̚_qwIj@^"*(EPy>&R9ˮtwUuY`YQmd	H*!&8C	Ϧ2'Y&p\	&H5 )FH̤MYa0#`9"9Y>	NX`	ǒ,4c3DbcCqt@+04?XA9qa?ǞtHߊ!i]XKG}Џs,kL_K5F͍|Ǎ*Ax)@wokE٫{sgYlG(SQ"a]0G}:8hw@@Pedô'uZCCMvepЖ<4
^ye{1]+-~<G[:i*ȝտ,ڏE^H
pBph:XDzkJ9z	OJrWes ǨPa"+GRv/,M.xE[zTFtш(y땳i̓҈vuDYXV.͞2VLiI5^ڼXW!k5xntHSFRoQ.-a8s5K]ؕ7W2e*}Km
y=ԜE^ONgGx|)ŜM7}b
|a^#/_L<>]kK	+;IϏޖ@þYݝ64Q6"uyrzr
uE@c'6ܩ(<1xFQ!
Z߆چ&>n #MhhV3ml%"ͬ'GߏPtBwn#ݍOyqQ}E5`lp<=.RE]}8On
----
.git/objects/f8/4886e83ba3d437e825892287c341ef6c485c83
x5LgWtS2N1sQ<jEDFXB
ѷ׷mlB6pB6 31%Yä$X,WTP֍p+ŦJLRcu}zUߤ,dҽ;ueIujMbik_}PfYp*v\,VyOF.u{䳌-,wY鳀x5y3ίT2y?KJdDB=brwz7뷥}S$,q1l	u
ވ`(kvyWOLm
y(i;jݡe6	thN4@omuBGW>L
Efl>8o_pޚ
ȅi:rr`Шeg?2@tu=R{seGhdlot>Y̶~g._kxP򪔿NV>.6Z3$}v6.!gamg4__ӄxH ߎma8b`oI,b3/XJJXm\9hE⬘{>9'[O5jg.(.4T:!w.ξ/؉veRs]O}қ	lpj<vw9Dǵ1h;D=Y'hWVj#ɲQX̎QDGGJ,b4PM%kárZRhzDa'
j+tfb^|<
Lǯ_.QId8CfJo0쏌iHGjOwfMĔ(
----
.git/objects/46/e7561197bb85ea0742ae3c349ba9b7ac86282a
x+)JMU01e040031Q+IM/J,+*cwdZB5;ẟ<: 
----
.git/objects/2d/2e9a9d4185b95867ea32665c7bd6528c6f33f5
xVn6ݳyX42ey,tMV;`h&,*I9V(v`od^{ιj^9]3i(K#nwojV4+ȴ6iͲK
ֲ!Ql-9MnxZRB.xϿ+{=5+Kץ$UPG@OG[IyJl>iSp+1̅;ZhsLI{MEG42a9_|KE<u܀3pz;z엜nm
So#i-
'ꁴx+!DAF?J$9QOsPer3*lK;-2B/
W0
΂Zpԍj.Y Ha;׬5صF-}ExL.[o`OAJv.H13i,N;Mޏ]?ڛa?$tTZ0/4	\Z.UkНV<}-mDG]y/dкT[и	ZXu ?0A90	[p9agaVF+<#%J5E᱃歃%Ook4}*<:ɣ4P^$SJi4=exyh098R\WaL)U
wX&Q,_JNsig\ASzrpZ9_QB3\"$Uһ2.B1+\e#^J\pXralw]l@?>x^;a1޾D49a?6 B!́\3f0+O8j,]{Xyh< 0mϭ"YnUfUv@FJ
uOJw\bH
|G	ӏ7*lx;PA٘)i	/5ĒLEik_+H u~+CD:䤟*I_QGqZX
ڣL8I>*&h,
----
.git/objects/70/bb981910c3d04b20ebea35b4976b3ec27c9a8b
x]o0wͯڤX@ۤFu*'qKbi1i㩾'<'Np@BHuEzՃV[m
&AFt}^ߩǳv{mwwͼ@Ng7ދ˃\.b\iF\	"<Fg+RBdT+}1Qi*:Axc8I>BчD3]cn^"&(+lNF$fs}\*REj͔0ތ
8
ihiV%5"Yp`T

^1.^qeCgYR9DC8O:SUU\mU:K	_,al?c=B:s}c%[$O%֡ӝ$4k-CRh1gsGp{ 3$n+NPcp.'*xg@zJ@ǢڤږOhB︣n(MRmxwC	wOnS ak*еZirN3;]dDVm?ɦ|H?O3BEK05!oy:<8ꚤ@
CC1dJѐO7o\ԧ\e8-(GrpdRLOg2x4/Ψ 3	f6<ku=]T,Z}+c-#UÅhJnJOD>f$VU?uB8Sp[ªưM<4
v=*$r8*"idM
----
.git/objects/1e/935fae165e4548cd5f7e307e91d295397d3e16
x5mLSW#ٲa0e-V&0el2$Krzߺ{oK;:8pc3JE,JF,Wper<GJ*2KN+"#`6.ݤ<ەuYmmjIɰbaǒUyO8_#|` ;,_Mxtiq|ɇ]qAco]˞L=0V4+Mc8ɟƖP79r;Y&ӈPDL[w\P>{yGR$MKhHR`2v-]i;? O/3,5ߖT7IGl8^D.e+JV8Y0|\XvWBf$RgHŁ:CܬK5*AL!Mp$,kgqoϓs.G
af\xGTTGPsP}cӤ^|VQq
+6X#&(3]0rR)Țm(h?FJ*m7?S&ĳHDizsuhȁrá\$j/Xb$^=JvL<ɸ2(1ЊZ1es	"ihjR|@q}6`m=3
Ch0»fNlH&AEnͣ3W\/v>Y"c(mP|]v=vb,XlGA(oD4b4H;m\];wrb"Yi}"a<\~Ş	Z߯w/,	3Wp)ġ
q:hЄi,,4W^O\hnnr+tRp
----
.git/objects/84/f61931cf116b340060b285b0829075940a2f5e
xXr5d|QCm73eakEIh2p@좻+OW#;ٞt:D~{~s;kӫ?w/uvN;lC+xT??6LRo,ZNWU{RXTM*U<\
&eJmkQFaUk
smӭ*~d2F/7!bẝc9_R>ã_w/TU"ik	bEz+N5׹uɳvp INW4T9VvN;n,<jgϟrPyX~c}wQ#/:!L&k=z]UO"k'd⢭ϐo 嶭q3B6zco uZg<bPI 2Fށ"0O*ȚfpĚO±t8ۭ7=13dJIJg\W"V]<LVlG
16 {#jy6Ե}NQ1%l+K*3¯eEu¼Jt<y4m#I{m\83ytArr ,ʬ;6yh\/va4TKc:#jz6i,u
	eS}C;ߵN?jȏGQ%;bN*(;Rr%U4'W:>z@cvHQr/ep^{qtxk?pPC.-rp`eJ>5/"_3`{HԐU 5c.PsJcsp iW]Q0ҬQBݠY;TvjEGHw^Ъddtf_Q,T[r9v""f {#O.C˶KXNo>z9
C#;/X#m 3+.+HPޫJšvݠ6@YgQ
2t2]Aq
H{dE#܃m'HDWX؂Քqhs=:)$Tg	._+8
8Vvjи7PuUmL5>ص.^V^r[pn#UV86I r
.äsWrrޔ/FIAA坜d(xs6$8>!R8D@I6jҠOt&Uz=[>kL:{I9MrXY2\q&7L(k)44d]El8V􀢼[CeB%̨u:(龨=qݏIQ"UJ]
BZ[qNUk!4$fq&Hci1ܘNyGRp˧Qkw1#OykкЋ`tzo2F.
r܊وHF$1M)'3Q~ݰZXxtp/i5w0	LN$z?8d#1
N؄8k3Qx-acLrTČAY*5KM$>
a  x\`g|Aj1lcu/o$` 9+C];`BD[ dсl
0bԅpY3gɄ&Eɏ= #c`"sdxTDEףIbT/!C&L3
-S{xU[2RaQLi<X4tOJo#حY9Go!J3^ąi0AyzS#eYlIG{x^I@\=[]ӰF:	ڍx>41XvQ&;j-#|򓋣42MwQXǮd_#`
----
.git/objects/8d/d56ca8d5de12f8ae52819d18558f09b1c56b45
xXr۸䢱FI;fՍۭAPE, ZV_a	}~ -:ɴӉ.K"|;k^r;;K	v*hkd+p]؆)X
/ֹSnd2jO
I-U`R$~l-35ʨ57l
u
Rq
{UELPh&ֿY,6\sOx1~Qj_vx5Ssݶ,0	NU.2o/VG\ۉḿA{Zk{7Й4EHzO⿢]9Ǝh6Y#! 83uXٳ{+NȺ'SZ@jsed`"Ygȷ}x|r!z	َ` ;Zg<PI 2=Fށ"0o*ȚfpĚ1:l֛13dJIJg\WY"VS<LVmG
16 K^v3?bFŤ
HN#<t,hO&cT	+QBioӴ$Mށ׏Ar~peqdg!p
mAXYwmQ̿؇
S-3)鰁M}4g1;]`[hP67e]N~T͚=v4jlIvG*],WRE#{"y;CZ܏{.ӭ%>p/0(]XC@
j;>F<ށ)(3@ ~ax! >CG$dd sS_3Iꊂfbw0_ގ@ڡ$PGt$j~IPl$۷65q`.B%ŉ *#.jlǁ/"bbdjy
"}x##^Xyq`4yiYwRGBg^5UG>6b%܏AnWuC@̊8SFq@hn\v5ɀcGV=?A(nm{$?t"Zͽ:74h=kt7qh y]n9[]G4zln$dC&~"pq@ɉS9NCd>3T?@Vǌ>`gr
v̮ѮxՂܖI!PN5jK~~I	r0~ItgySrA,$
wrO=Oşl=Iҹ~cwcNP$+Q	՗Y~akT[6ύ=YcJz)H%/b"QpN(fN080xpM &.;(ofǉ`=J?^RwkhL 먂 ݴ>ȳg8j3G\a.$بHRW,8+@78=$DnL<()|[7Q<|t(gi0f:=fwNb#O?.,(f#"T222_(p_-x,d|Ct֚;&MgdZˏ	 8^@m	Kd:6f7r% 0@Kg͆r	{^a3n0́h, 4#3]?'?qXF)ccײyPEtˋ2 2[& ݁͂
1bԅpY3dBaГ199rҿTXlto'yQc*6X]$ K?HTaL8=Sş]\5Ϝ1E
So.Wh1
`c)=!cf1T+eθV/.5^)F%˲ؒ>Bt\g%uFqluMW˟'j?by`=F4\qK(
 L05,&
----
.git/objects/71/e70cf6dc2f72fb1544d37792576c1fea332197
x=j0:a2"mg+ֶ,$ o(O2zrLH)NgE^kfc]%Iyb:,Y9hN&H3{1&z
_{G?B8B+)ORy_knPWP(.RK)hOk1|6냗B?ZY!oMd
----
.git/objects/49/1edda37233dc55d282192ac50a42f90cf7796a
xKOR01bVPKMURP
.I,*OQQP*, f%() w
----
.git/objects/40/835434bf51f0fe40cb1f42fbe863b0217f138c
xKOR04bK*I-. <
----
.git/objects/40/2f2caa53376bea407f1887b9458a4befab3538
x[o0̯x$MilH]iPF˪N .8Igc?>8<r7>5 !J%Fzԝ!l9vnv;(3A1D><ˎN|^9j;=v%3{Pq={ŦEfC"
U~?e*a("Ps>(X/R"X&fsNU75]YNS,e4}Q4
޼q:jD%Z6#@q]{Tn7$74 0dIqeX]_ԺZRHM4ibDaؖ|g*Z	\8dٞPa-I@&}O*W%a"KF|KкH9fdKA:h򧄕2BpĬkrEniзqAKb)g!F^TXvk>"X/%v9 wº@-,
je=[w*LQ {fI$[jghujH(*_S]1?8#qX-e$F>
yv{T&
<m%;++>#"Yp-KlIgUuU(YҤQE
zNCsFlNzK.0#kHNGe Kǒ$a4Q*?Ix2cMS2KAǗB8{κaq-Y퓙1FM	$*<e
dVTK2?~j
----
.git/objects/40/469c7086635bf80ffe6a2a4c4f54a7b83eec87
x+)JMU01e040031Q+IM/J,+*c;3ޞo2oy sz
----
.git/objects/2e/2950aee8ec870a82127b41c9296ff522ff4be6
x5Pe< S,`x_-܈fϾ{1
 $iaI:┮HUx~=s=D&MO24-%ETS	,g{di]SڲPҚ"]^D=JZ0eCM݆8$]{xf`=SVRfеҕF.vy]nRpV52?'ց2u5/7xwefY+(uGŞ}쾽[вB?$	:gOUU#IL/e-I#SA$?o?1*0O(oTjo:~o^8ڵ`GhF7/MsGD:d$JIżKaˌӹRK" 7[6ZR8]ǒ<pص}WR4%$1ڷ
Wn+_$C9
ARYG!%ۮ2/k/;$A	s"5@46N6l+[Y2-Nc#dt"B-5ƅ|#vcxpq&m5}Z\'Kl0
	rF`?#C~jkpE	
GbyL,fDA
lk<ҷr#ηp8!6'\Y
`F~
f݊Wez32-bYαu$MtkLȷe3؄, הAkQ#qщbQg>lᝪ``f	c~T
lYm8#"2LՓDm	Ɛ`m^݃#?׌ls'bA-`#JYXL`3QKmCuVͧsJ6%
----
.git/objects/2e/ce5c93d3d38c0d8cb15dc1d903b03d4cebe984
x]o w_r=4m-w]I!5ه:M4ܦ؉݅i\,'7F~GRR489uPGm2bXN p??_w޺2DLa7g.\vBȡܯ#IgDTIA7yZT2kxgJd]vʓ׬PSI]61-Q9nU$'\&qt|>-Z#w풺ڐ㍽8}c);7e5HP"t}&2ಖDUIY+tR3-4	ݑBplӘpL+8WȀvo4NHpYEсf BL9= |5#UFWrGuV iI#՟ShN͞deX2֖$mu\ޓK	*$|m] )<oX
MH_+#t_0ʮE[d
Rm]N?'-&
(r#IMKwVʮшIS..`˱Lr??*<MSO5*s7m촴Aj
.T\ѷYEܔX Q5,J"4'9*p䃶"E7qg3
----
.git/objects/47/fb344a403e73735d07cd49840783528972fa4e
x}TIӣF͙_ѷ934{$5`c^5Mc6ׇ$[*:>IzzuY`mP#H'ZcHHb00beH5# [r,cy"8FP	$2-Yca$GPb8AnaO!g.HiL?ȋp5ĿcO;#c$<MS;,tͣO_8{{Ko7N
{
nUc<|mBQƓg`sxٶOzJ
W7Cd=PS\S܏U^V7x2/S.WQo9(GD`:iVd4G Lg^=ݝAf xGw'uk+:gd[L>2]0
̮YwGo!k;
)CYx{rp]yVYV!.xNm브Lg-a0Fۻ+ઃ~'>][C难v((Z'0揾wG/nóϣt<-7^)@T
oIA),3#Nq6NI-_PUS-fWy\]F)pycT(aM?qb)1e?xMWRy/oJ+#DyxD d8̶fBP֏Ry-FII"Q8oiu&7u>z\-|sM,D.nb+R'moIɹEL!=^i!7(teNe,˥lK㉝oGP'=:T-VjAEk2-/$8mm
----
.git/objects/78/3236fcdbfb4e46c6eff05c5c2f0b6f5dce6551
xVn6ݳyX4ey,tMR;`hZ&,*I9Vv`od^{ιjQ]헟N誵NohWF8%]
_պ-iz7i?l4JV9;Ӭmش
`kir+
j=kxVלᎯ#+f\\	=#,: zn<**GҭTb$TIQp4.XEef!,RCHKS?Gϡ[#̝C3ѵat
x|#ZD=%o%ȉUhG[)$סlDDD/ag$o¡\ltG6r%Ȗ%#Emnof2\uZWRA6K )|U֨iEmLdcԅÁKRf acNonӛwg /p0+*F6QJEYmC
'FtѥZj7A+$5&8h0##65z0',1baDYJ&pW>#<qϢudÕa`-Ɵ/PGGy$ͳ91g	k.%nR~E4|tc<5w9-%e@94SJa/Iyd=/%9V83))O98{yKUkzPg
_(7|7lޔqnT{z_aDU-5NgzSCb0ƣvK<vc!aYp~<䀣EH7Ɠ@*~%[f8/iVE
h4.(xZxf4ܱ`*pHwd0]ys9+"A?QNTc4$ з(JK"^Fy'KO4
LcN(ti7z?(n8|R{~-Z,VăQ={hwD{t]!
g
----
.git/objects/13/8c28b9ec628385b7e4f99dd347482b406b1b8e
xXr͚_q]Ȉ%?f7ǌG"*Ql .Ȗn!EBDhfʩHqkW_|͟^O,u>؆&کotua`)lw^ZNgɀ=)TM*U<\
&eJ]kQFaUk
smӭ*~d2F/7!|ẝaR>ã򞃟m3/TU"ik	rIz+N5׹u˳w INW4T>--Sj,P8-츱f52?{	C9SY`=G\):!L&k=z]U
lE O:E[?E
SΐYMȶ, 2d8l{"(>XJl;
N]3jĚ1:l֛X[cb1"SJRz*hu+bg=5>gɲH!6D}~RQz^
u
nG8IF&PZKԑ`cIEtFkQdrA9Fg`T^Qw%Zh:M<4-#IӃw]\r38rr(XYwmѸ(_i

3)각M}4OcQARRmSsC;ߵN?kҏȏ4Gѻ%;bN:(;R
g.W&_=(cvHQr/ep^;SIEG*`v~2V)8PC.#w`i9>6#bfHq]KI1j&vvZbF}klf$mc--` 
CgI;L$r<~q-IؐIF;llvGcÜ7JJ`A>S.G\؎_D,~
Ȳjq"}xH/ە.ew8eckT4EiYWRGBL?ә˿g!LoA"}/iͿ>8ئqP"V}
&ءqk fEBLkG |67<Gq#idj?H~]E[{ua-h	{?joA \VYr>h:$ket9D,bY}rTCd3TnnccW3ٍeXzoHjKn~-u~1;O ؛q&M&*^۫YSr6A̟n$fjwO>?ԇ/Liǝ$7v!b#)P_a{Mp$o5aR׳{o=7~t_g
}!Uz&/#)Heb'(Rq&7L^h

䙼A|F7?Nh!U*(`re~QNYՐnZg3# Uo,tH^o=оS|+ANkc:VTIL"C%Xb
TW`٨lPo2F.1p+f#"a0"$R$(l㵆wDND=GwI\-O@ft$26!`E
tzЖDS	lacvQT d<Άr	{!#n g' (LO89,tWEըC]/Db0!ޡٓu hP잂
1:%KeHGˏ}
'9KĮ""SOu*m,:AHNpBHīThSpOe'Wo
37Le`-4`_\AfM,:vkC.0[HæUs_#ϕojdP,#=O<!PWRgd+oϗԿ#ljqq4i{$Z>HrqhPuq58/ 
----
.git/objects/7f/cd96f239b405f3ba8cb01f9be39ae122e9ce05
x+)JMU01e040031Q+IM/J,+*coy@fٴn Q
----
.git/objects/7a/2e21be820cf519efc6260dc7a61d33265da40d
x5mLSW#92N1ƛcV+"V!zz{ZN{=ݽ]Ģ"&fdbMbج(vY uc60/χϓ#ŧ+B.OU*S:~U /fTޭɲԆ|ħXX07+W-mJRo2%½ɪخ^8<7.Gtk¾eaCMG uwv~LC~o"L>QksRX88R.1KU5]i	K\3=}]΁;50 @֋jϝ^oƏgS$ECH8@Fbڶj
=`+taPX@ȗu@i{klٲֆ
E\&l`嗟_rޝ	㾄Lȉi\:hɄﯪ0	r<L~*
v@֖&!zϭkl+1Eo+J+=D[
Y3> ?Y`\2!6și
of4z-isaD<D$o6VÈ;u8g4o3K!`&d3*Z-N}ai@b,Q`0	DFCl>|-X{tq}F7[+;2``
	[|WB$X^@.
/noE[p=3#
 1~ڢ$\%C,],j0T흲}R9`AQIgh&Ն'9 (`I~a2u|dC<4bnj/mf{ck{hIݩ9Ԙ
----
.git/objects/7a/68ccd1d79a9b771c0f1bbd7bf65dce1804abde
xV]o7~"~Xw_
N
Xv("n%>WgY%C},q?fvv?i]ӹ	t*hkiv\cfgvfh4YSk<;RESVL7)=,I9\P<co+P5®"v4CG~Lt}dŽN>SQitIgLIǁ6:Hյ*0}&x:$)/?!gˌ]|wHZf% kH
uFah*x˅uClDDXJHghd$qt-N)8T2rfta[i7&%GB!~|u0>;%âTYr/_8]A*4id[8bs54"lĤ*O#3\JH!JԓPyT[SSWV|S2<8HUhƳ*SxcW\ >*m4$%fQ~ޅ@%nvoG@_7"jz}/6ӡl&0i_,IхZrJ:=;V^0_)heZ-Y<iNaaDt3BghDNa&E	PI?8 &7ycQ(%{Ȱ0Q-D޷~mv1
Эʮr	dJPZùI
e-R>Si;'Ql|t^^¤D}C˵'lG*0{Eӄz{y,Zˌپ&85LQ
o:X׵p6

XJ]b8p 
zyÂLb%U
VuLO.1B;NcTx)~/~
B7ag=S-!`-܋Nn+1>-n.A=íU.n
T
q_K-ưYq	+KO`֌_kvSm<'Gġ,ȳr*OӢ̀4t]p7|Wfi;
----
.git/objects/8e/9b3becf2d401f301044d35e3ff3e21593c5250
x5mLSW#l٤˄09ŋ+808#Ar{[&ԡdߑ
t&fT	BMVQ"n5k6{}<#pdgg<KHIWkhC@Stso7Wg4(䋓nB &|_Oq9W#]N-$}:cn!HNAm=ٓΝJt_jK.4U#S(
)(( Kiι\&:~WT$,C(HZD*x[?>0O(}HEϐsj-٫+H	I8t6895?JȈDL[.q`tŬ.(3)%d@?xP5{w|3WqX['uq?MGwh^:) A桚IO^vm)+^msMVveGފV-rB1Z0-Qy덝Nn]_ M
0׏G'Uo
抈4$
Qؿc/|9;áKDFC3f_F #pzzvPeZ%|h.筬
25s@y
ޔyj%d%v(
_t\_ൣd$m
{&UJfٕ$`" /'ZViFƟs@jkyvRf	5cd)m,~,T6lo`;
J;B[N\vƞJ.]̥~FyZ88h\D%YM[	_O\hlphm:q<Ź
----
.git/objects/8e/35afad6fa65a723ab65aecb140af2038012cee
x+)JMU041e040031QrutuMa02s۱bbcϥB%ee1\jrٌ?[SVZ\W^XWZQR_YW\X0Mirw~z <
----
.git/objects/22/81c79db0ef1027f5a511a953ac86a65b61c1c8
x+)JMU046g040031QrutuMa8s2{Ş`Y}(9?/-3]/8?S";$r9^SVZ\W^X[\YTd1Xrتf5 8
----
.git/objects/22/1dc74484239b81b8c212aae4d2bcb23bd1e543
xAj0E))[ ,rz4NLuׁ}^^k;zS%):-psXeB=0Y&M_c~Le$R)HC,2Ϣ
s6^U#.apZ{i)'|ޠk/`M
----
.git/info/exclude
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

----
.git/logs/HEAD
0000000000000000000000000000000000000000 02cb166f5a2c98afc9f526192630b9cd42256673 Tyler Diderich <tylerdiderich@gmail.com> 1747686019 -0500	clone: from github.com:runZeroInc/runzero-custom-integrations.git
02cb166f5a2c98afc9f526192630b9cd42256673 02cb166f5a2c98afc9f526192630b9cd42256673 Tyler Diderich <tylerdiderich@gmail.com> 1747920538 -0500	checkout: moving from main to jamf/hostnames-bug
02cb166f5a2c98afc9f526192630b9cd42256673 42e424eaca52fab40403cd6fe2841bfbd539b3da Tyler Diderich <tylerdiderich@gmail.com> 1747922154 -0500	commit: fix hostname bug + allow user to enable and disable asset types
42e424eaca52fab40403cd6fe2841bfbd539b3da 02cb166f5a2c98afc9f526192630b9cd42256673 Tyler Diderich <tylerdiderich@gmail.com> 1747922590 -0500	checkout: moving from jamf/hostnames-bug to main
02cb166f5a2c98afc9f526192630b9cd42256673 02cb166f5a2c98afc9f526192630b9cd42256673 Tyler Diderich <tylerdiderich@gmail.com> 1748546257 -0500	checkout: moving from main to dev
02cb166f5a2c98afc9f526192630b9cd42256673 02cb166f5a2c98afc9f526192630b9cd42256673 Tyler Diderich <tylerdiderich@gmail.com> 1748546267 -0500	checkout: moving from dev to main
02cb166f5a2c98afc9f526192630b9cd42256673 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748546274 -0500	pull: Fast-forward
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748546282 -0500	checkout: moving from main to local/dev
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748879882 -0500	checkout: moving from local/dev to main
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748879988 -0500	checkout: moving from main to new/extremecloudiq
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748879998 -0500	checkout: moving from new/extremecloudiq to main
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748880012 -0500	checkout: moving from main to update/jamf/extension-attributes
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e 0db5750a68ae205b4bb54abed4a67f10e67faf6d Tyler Diderich <tylerdiderich@gmail.com> 1748880062 -0500	commit: add handling for user extension attrs
0db5750a68ae205b4bb54abed4a67f10e67faf6d 9a290ef030d56b9a36c2ae6aeed529f9d4722d6a Tyler Diderich <tylerdiderich@gmail.com> 1748880175 -0500	commit: typo
9a290ef030d56b9a36c2ae6aeed529f9d4722d6a 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748880492 -0500	checkout: moving from update/jamf/extension-attributes to main
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748880510 -0500	checkout: moving from main to new/extremecloudiq
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e a8ac8762d742963971e0940384a3e4fae82d76a1 Tyler Diderich <tylerdiderich@gmail.com> 1748896910 -0500	commit: NEW: ExtremeCloud IQ
a8ac8762d742963971e0940384a3e4fae82d76a1 6b411c497cdcc8575aab3eadda290ea68c30909c Tyler Diderich <tylerdiderich@gmail.com> 1748897688 -0500	pull --tags origin new/extremecloudiq: Fast-forward
6b411c497cdcc8575aab3eadda290ea68c30909c 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748897697 -0500	checkout: moving from new/extremecloudiq to main
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e e92e7076e1b023eb38f7fc96405c01caa2be6ba3 Tyler Diderich <tylerdiderich@gmail.com> 1748897721 -0500	checkout: moving from main to stairwell/new
e92e7076e1b023eb38f7fc96405c01caa2be6ba3 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748897740 -0500	checkout: moving from stairwell/new to main
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e e92e7076e1b023eb38f7fc96405c01caa2be6ba3 Tyler Diderich <tylerdiderich@gmail.com> 1748897747 -0500	checkout: moving from main to stairwell/new
e92e7076e1b023eb38f7fc96405c01caa2be6ba3 a6471d553b117141a367a6e056bcb7162bf07bd2 Tyler Diderich <tylerdiderich@gmail.com> 1748897785 -0500	commit: add gitignore back
a6471d553b117141a367a6e056bcb7162bf07bd2 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748897788 -0500	checkout: moving from stairwell/new to main
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e a6471d553b117141a367a6e056bcb7162bf07bd2 Tyler Diderich <tylerdiderich@gmail.com> 1748897805 -0500	checkout: moving from main to stairwell/new
a6471d553b117141a367a6e056bcb7162bf07bd2 221dc74484239b81b8c212aae4d2bcb23bd1e543 Tyler Diderich <tylerdiderich@gmail.com> 1748897828 -0500	commit: add back PR temp
221dc74484239b81b8c212aae4d2bcb23bd1e543 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748897909 -0500	checkout: moving from stairwell/new to main
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e 3c5c40bfc4cea8cdb071028149e3984241a3faee Tyler Diderich <tylerdiderich@gmail.com> 1748897912 -0500	pull: Fast-forward
3c5c40bfc4cea8cdb071028149e3984241a3faee 6b411c497cdcc8575aab3eadda290ea68c30909c Tyler Diderich <tylerdiderich@gmail.com> 1748897951 -0500	checkout: moving from main to new/extremecloudiq
6b411c497cdcc8575aab3eadda290ea68c30909c 3c5c40bfc4cea8cdb071028149e3984241a3faee Tyler Diderich <tylerdiderich@gmail.com> 1748897974 -0500	pull origin main (start): checkout 3c5c40bfc4cea8cdb071028149e3984241a3faee
3c5c40bfc4cea8cdb071028149e3984241a3faee e7f6b86c43400c3c7bfb362bb13cbf6345725f72 Tyler Diderich <tylerdiderich@gmail.com> 1748897974 -0500	pull origin main (pick): NEW: ExtremeCloud IQ
e7f6b86c43400c3c7bfb362bb13cbf6345725f72 649a120d7d95463edbd443e3f9e16154afdc52c6 Tyler Diderich <tylerdiderich@gmail.com> 1748898022 -0500	commit: resolve issues
649a120d7d95463edbd443e3f9e16154afdc52c6 94fe69a0f9a706b1870573a69c7d097a14d6ac8a Tyler Diderich <tylerdiderich@gmail.com> 1748898068 -0500	rebase (pick): Update README.md
94fe69a0f9a706b1870573a69c7d097a14d6ac8a 6b411c497cdcc8575aab3eadda290ea68c30909c Tyler Diderich <tylerdiderich@gmail.com> 1748898109 -0500	checkout: moving from 94fe69a0f9a706b1870573a69c7d097a14d6ac8a to new/extremecloudiq
6b411c497cdcc8575aab3eadda290ea68c30909c 3c5c40bfc4cea8cdb071028149e3984241a3faee Tyler Diderich <tylerdiderich@gmail.com> 1748972733 -0500	checkout: moving from new/extremecloudiq to main
3c5c40bfc4cea8cdb071028149e3984241a3faee bce547623e335f1612289f6efbc85fb20fab3cc0 Tyler Diderich <tylerdiderich@gmail.com> 1748972736 -0500	pull: Fast-forward
bce547623e335f1612289f6efbc85fb20fab3cc0 b27b10dd5ece68f14873ce0cf49215b1669d32c3 Tyler Diderich <tylerdiderich@gmail.com> 1753285688 -0500	pull: Fast-forward

----
.git/logs/refs/heads/dev
0000000000000000000000000000000000000000 02cb166f5a2c98afc9f526192630b9cd42256673 Tyler Diderich <tylerdiderich@gmail.com> 1748546257 -0500	branch: Created from HEAD

----
.git/logs/refs/heads/main
0000000000000000000000000000000000000000 02cb166f5a2c98afc9f526192630b9cd42256673 Tyler Diderich <tylerdiderich@gmail.com> 1747686019 -0500	clone: from github.com:runZeroInc/runzero-custom-integrations.git
02cb166f5a2c98afc9f526192630b9cd42256673 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748546274 -0500	pull: Fast-forward
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e 3c5c40bfc4cea8cdb071028149e3984241a3faee Tyler Diderich <tylerdiderich@gmail.com> 1748897912 -0500	pull: Fast-forward
3c5c40bfc4cea8cdb071028149e3984241a3faee bce547623e335f1612289f6efbc85fb20fab3cc0 Tyler Diderich <tylerdiderich@gmail.com> 1748972736 -0500	pull: Fast-forward
bce547623e335f1612289f6efbc85fb20fab3cc0 b27b10dd5ece68f14873ce0cf49215b1669d32c3 Tyler Diderich <tylerdiderich@gmail.com> 1753285688 -0500	pull: Fast-forward

----
.git/logs/refs/heads/update/jamf/extension-attributes
0000000000000000000000000000000000000000 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748880012 -0500	branch: Created from HEAD
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e 0db5750a68ae205b4bb54abed4a67f10e67faf6d Tyler Diderich <tylerdiderich@gmail.com> 1748880062 -0500	commit: add handling for user extension attrs
0db5750a68ae205b4bb54abed4a67f10e67faf6d 9a290ef030d56b9a36c2ae6aeed529f9d4722d6a Tyler Diderich <tylerdiderich@gmail.com> 1748880175 -0500	commit: typo

----
.git/logs/refs/heads/jamf/hostnames-bug
0000000000000000000000000000000000000000 02cb166f5a2c98afc9f526192630b9cd42256673 Tyler Diderich <tylerdiderich@gmail.com> 1747920538 -0500	branch: Created from HEAD
02cb166f5a2c98afc9f526192630b9cd42256673 42e424eaca52fab40403cd6fe2841bfbd539b3da Tyler Diderich <tylerdiderich@gmail.com> 1747922154 -0500	commit: fix hostname bug + allow user to enable and disable asset types

----
.git/logs/refs/heads/stairwell/new
0000000000000000000000000000000000000000 e92e7076e1b023eb38f7fc96405c01caa2be6ba3 Tyler Diderich <tylerdiderich@gmail.com> 1748897721 -0500	branch: Created from refs/remotes/origin/stairwell/new
e92e7076e1b023eb38f7fc96405c01caa2be6ba3 a6471d553b117141a367a6e056bcb7162bf07bd2 Tyler Diderich <tylerdiderich@gmail.com> 1748897785 -0500	commit: add gitignore back
a6471d553b117141a367a6e056bcb7162bf07bd2 221dc74484239b81b8c212aae4d2bcb23bd1e543 Tyler Diderich <tylerdiderich@gmail.com> 1748897828 -0500	commit: add back PR temp

----
.git/logs/refs/heads/local/dev
0000000000000000000000000000000000000000 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748546282 -0500	branch: Created from HEAD

----
.git/logs/refs/heads/new/extremecloudiq
0000000000000000000000000000000000000000 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748879988 -0500	branch: Created from HEAD
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e a8ac8762d742963971e0940384a3e4fae82d76a1 Tyler Diderich <tylerdiderich@gmail.com> 1748896910 -0500	commit: NEW: ExtremeCloud IQ
a8ac8762d742963971e0940384a3e4fae82d76a1 6b411c497cdcc8575aab3eadda290ea68c30909c Tyler Diderich <tylerdiderich@gmail.com> 1748897688 -0500	pull --tags origin new/extremecloudiq: Fast-forward

----
.git/logs/refs/remotes/origin/burp-suite
0000000000000000000000000000000000000000 bce547623e335f1612289f6efbc85fb20fab3cc0 Tyler Diderich <tylerdiderich@gmail.com> 1751999626 -0500	fetch: storing head

----
.git/logs/refs/remotes/origin/HEAD
0000000000000000000000000000000000000000 02cb166f5a2c98afc9f526192630b9cd42256673 Tyler Diderich <tylerdiderich@gmail.com> 1747686019 -0500	clone: from github.com:runZeroInc/runzero-custom-integrations.git

----
.git/logs/refs/remotes/origin/main
02cb166f5a2c98afc9f526192630b9cd42256673 385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e Tyler Diderich <tylerdiderich@gmail.com> 1748354016 -0500	fetch: fast-forward
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e 3c5c40bfc4cea8cdb071028149e3984241a3faee Tyler Diderich <tylerdiderich@gmail.com> 1748897912 -0500	pull: fast-forward
3c5c40bfc4cea8cdb071028149e3984241a3faee bce547623e335f1612289f6efbc85fb20fab3cc0 Tyler Diderich <tylerdiderich@gmail.com> 1748972402 -0500	fetch: fast-forward
bce547623e335f1612289f6efbc85fb20fab3cc0 b27b10dd5ece68f14873ce0cf49215b1669d32c3 Tyler Diderich <tylerdiderich@gmail.com> 1752085056 -0500	fetch: fast-forward

----
.git/logs/refs/remotes/origin/update/jamf/extension-attributes
0000000000000000000000000000000000000000 0db5750a68ae205b4bb54abed4a67f10e67faf6d Tyler Diderich <tylerdiderich@gmail.com> 1748880064 -0500	update by push
0db5750a68ae205b4bb54abed4a67f10e67faf6d 9a290ef030d56b9a36c2ae6aeed529f9d4722d6a Tyler Diderich <tylerdiderich@gmail.com> 1748880178 -0500	update by push
9a290ef030d56b9a36c2ae6aeed529f9d4722d6a 8a776f8b1c1500d47e05e9eded22379f12714a34 Tyler Diderich <tylerdiderich@gmail.com> 1748880474 -0500	fetch: fast-forward

----
.git/logs/refs/remotes/origin/jamf/hostnames-bug
0000000000000000000000000000000000000000 42e424eaca52fab40403cd6fe2841bfbd539b3da Tyler Diderich <tylerdiderich@gmail.com> 1747922160 -0500	update by push

----
.git/logs/refs/remotes/origin/stairwell/new
4aff50b3d836103a9d44bf37be218ec88d707a7e e92e7076e1b023eb38f7fc96405c01caa2be6ba3 Tyler Diderich <tylerdiderich@gmail.com> 1748879855 -0500	fetch: fast-forward
e92e7076e1b023eb38f7fc96405c01caa2be6ba3 221dc74484239b81b8c212aae4d2bcb23bd1e543 Tyler Diderich <tylerdiderich@gmail.com> 1748897834 -0500	update by push
221dc74484239b81b8c212aae4d2bcb23bd1e543 4e564ba58a99ac8680f78c01bea393e6d6cbee2e Tyler Diderich <tylerdiderich@gmail.com> 1748897861 -0500	fetch: fast-forward

----
.git/logs/refs/remotes/origin/new/extremecloudiq
0000000000000000000000000000000000000000 a8ac8762d742963971e0940384a3e4fae82d76a1 Tyler Diderich <tylerdiderich@gmail.com> 1748896914 -0500	update by push
a8ac8762d742963971e0940384a3e4fae82d76a1 6b411c497cdcc8575aab3eadda290ea68c30909c Tyler Diderich <tylerdiderich@gmail.com> 1748897669 -0500	fetch: fast-forward

----
.git/hooks/commit-msg.sample
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

----
.git/hooks/pre-rebase.sample
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

----
.git/hooks/pre-commit.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

----
.git/hooks/applypatch-msg.sample
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

----
.git/hooks/fsmonitor-watchman.sample
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

----
.git/hooks/pre-receive.sample
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

----
.git/hooks/prepare-commit-msg.sample
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

----
.git/hooks/post-update.sample
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

----
.git/hooks/pre-merge-commit.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

----
.git/hooks/pre-applypatch.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

----
.git/hooks/pre-push.sample
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

----
.git/hooks/update.sample
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

----
.git/hooks/push-to-checkout.sample
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

----
.git/refs/heads/dev
02cb166f5a2c98afc9f526192630b9cd42256673

----
.git/refs/heads/main
b27b10dd5ece68f14873ce0cf49215b1669d32c3

----
.git/refs/heads/update/jamf/extension-attributes
9a290ef030d56b9a36c2ae6aeed529f9d4722d6a

----
.git/refs/heads/jamf/hostnames-bug
42e424eaca52fab40403cd6fe2841bfbd539b3da

----
.git/refs/heads/stairwell/new
221dc74484239b81b8c212aae4d2bcb23bd1e543

----
.git/refs/heads/local/dev
385028e53cf2dd8fb86aa9ae54dd43d9a519cb3e

----
.git/refs/heads/new/extremecloudiq
6b411c497cdcc8575aab3eadda290ea68c30909c

----
.git/refs/remotes/origin/burp-suite
bce547623e335f1612289f6efbc85fb20fab3cc0

----
.git/refs/remotes/origin/HEAD
ref: refs/remotes/origin/main

----
.git/refs/remotes/origin/main
b27b10dd5ece68f14873ce0cf49215b1669d32c3

----
.git/refs/remotes/origin/update/jamf/extension-attributes
8a776f8b1c1500d47e05e9eded22379f12714a34

----
.git/refs/remotes/origin/jamf/hostnames-bug
42e424eaca52fab40403cd6fe2841bfbd539b3da

----
.git/refs/remotes/origin/stairwell/new
4e564ba58a99ac8680f78c01bea393e6d6cbee2e

----
.git/refs/remotes/origin/new/extremecloudiq
6b411c497cdcc8575aab3eadda290ea68c30909c

----
.git/rebase-merge/git-rebase-todo.backup
pick a8ac8762d742963971e0940384a3e4fae82d76a1 NEW: ExtremeCloud IQ
pick 6773d4ca731030284b72d0f2dcc3321b9d1ddd4a Auto: update integrations JSON and README
pick a42c8427f1160f2d4ef73d3a8a58ad686c142a53 Update README.md
pick 6b411c497cdcc8575aab3eadda290ea68c30909c Auto: update integrations JSON and README

# Rebase 3c5c40b..6b411c4 onto 3c5c40b (4 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c <commit> to reword the commit message
# u, update-ref <ref> = track a placeholder for the <ref> to be updated
#                       to this position in the new commits. The <ref> is
#                       updated at the end of the rebase
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#

----
.git/rebase-merge/head-name
refs/heads/new/extremecloudiq

----
.git/rebase-merge/rewritten-list
a8ac8762d742963971e0940384a3e4fae82d76a1 e7f6b86c43400c3c7bfb362bb13cbf6345725f72
6773d4ca731030284b72d0f2dcc3321b9d1ddd4a 649a120d7d95463edbd443e3f9e16154afdc52c6
a42c8427f1160f2d4ef73d3a8a58ad686c142a53 94fe69a0f9a706b1870573a69c7d097a14d6ac8a

----
.git/rebase-merge/orig-head
6b411c497cdcc8575aab3eadda290ea68c30909c

----
.git/rebase-merge/git-rebase-todo

----
.git/rebase-merge/message
Auto: update integrations JSON and README


----
.git/rebase-merge/onto
3c5c40bfc4cea8cdb071028149e3984241a3faee

----
.git/rebase-merge/drop_redundant_commits

----
.git/rebase-merge/end
4

----
.git/rebase-merge/patch

----
.git/rebase-merge/done
pick a8ac8762d742963971e0940384a3e4fae82d76a1 NEW: ExtremeCloud IQ
pick 6773d4ca731030284b72d0f2dcc3321b9d1ddd4a Auto: update integrations JSON and README
pick a42c8427f1160f2d4ef73d3a8a58ad686c142a53 Update README.md
pick 6b411c497cdcc8575aab3eadda290ea68c30909c Auto: update integrations JSON and README

----
.git/rebase-merge/no-reschedule-failed-exec

----
.git/rebase-merge/stopped-sha
6b411c497cdcc8575aab3eadda290ea68c30909c

----
.git/rebase-merge/interactive

----
.git/rebase-merge/msgnum
4

----
.git/rebase-merge/author-script
GIT_AUTHOR_NAME='github-actions[bot]'
GIT_AUTHOR_EMAIL='github-actions[bot]@users.noreply.github.com'
GIT_AUTHOR_DATE='@1748897048 +0000'

----
kubernetes/config.json
{ "name": "Kubernetes", "type": "inbound" }

----
digital-ocean/config.json
{ "name": "Digital Ocean", "type": "inbound" }

----
digital-ocean/README.md
# Custom Integration: Digital Ocean

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Digital Ocean requirements

- API Client Token (Personal Access Token) with appropriate permissions.
- API URL: `https://api.digitalocean.com/v2/`.

## Steps

### Digital Ocean configuration

1. Generate a Personal Access Token from the [API Tokens page](https://cloud.digitalocean.com/account/api/tokens) in your Digital Ocean account.
   - Ensure the token has the required permissions to access droplets and associated metadata.
2. Note down the API URL: `https://api.digitalocean.com/v2/`.
3. Test your API token by making a sample request using a tool like `curl` or Postman to verify access.

### runZero configuration

1. (OPTIONAL) - Make any necessary changes to the script to align with your environment.
    - Modify API calls as needed to filter assets.
    - Modify datapoints uploaded to runZero as needed.
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - Use the `access_secret` field for your Digital Ocean API token.
    - For `access_key`, input a placeholder value like `foo` (unused in this integration).
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "digital-ocean").
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` to ensure it has valid syntax.
    - Click `Save` to create the Custom Integration.
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to recur at the desired timeframes.
    - Select the Explorer you'd like the Custom Integration to run from.
    - Click `Save` to kick off the first task.

### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration.
- The task will update the existing assets with the data pulled from the Custom Integration source.
- The task will create new assets for when there are no existing assets that meet merge criteria (hostname, MAC, etc).
- You can search for assets enriched by this custom integration with the runZero search `custom_integration:digital-ocean`.

----
digital-ocean/custom-integration-digital-ocean.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_post='post', http_get='get', 'url_encode')
load('uuid', 'new_uuid')

DIGITAL_OCEAN_OAUTH_URL = 'https://cloud.digitalocean.com/v1/'
DIGITAL_OCEAN_API_URL = 'https://api.digitalocean.com/v2/'

def build_assets(assets_json):
    assets_import = []
    for item in assets_json:
        id = item.get('id', new_uuid)      
        hostname = item.get('name', '')
        memory = item.get('memory', '')
        vcpus = item.get('vcpus', '')
        disk = item.get('disk','')
        locked = item.get('locked', '')
        status = item.get('status', '')
        created_at = item.get('created_at', '')
        vpc_uuid = item.get('vpc_uuid', '')
        size_slug = item.get('size_slug', '')

        # parse IP addresses
        ipv4s = []
        ipv6s = []
        ips = []
        networks = item.get('networks', {})
        if networks:
            ipv4s = networks.get('v4', [])
            ipv6s = networks.get('v6', [])
            
            if ipv4s:
                for v4 in ipv4s:
                    addr = v4.get('ip_address', '')
                    ips.append(addr)
        
            if ipv6s:
                for v6 in ipv6s:
                    addr = v6.get('ip_address', '')
                    ips.append(addr)        

        network = build_network_interface(ips=ips, mac=None)

        # parse image information
        image = item.get('image', {})
        if image:
            image_id = image.get('id', '')
            image_name = image.get('name','')
            image_distribution = image.get('distribution', '')
            image_type = image.get('type', '')
            image_public = image.get('public', '')
            image_status = image.get('status', '')

        # parse region information
        region = item.get('region', {})
        if region:
            region_name = region.get('name', '')
            region_features = region.get('features', '')
            region_available = region.get('available', '')

        # parse tags
        tags_rz = []
        tags_do = item.get('tags', [])
        if tags_do:
            for t in tags_do:
                if ':' in t:
                    key, value = t.split(':', 1)
                    tags_rz.append(key + '=' + value)
                else:
                    key = t
                    tags_rz.append(key)
                
        assets_import.append(
            ImportAsset(
                id=str(id),
                hostnames=[hostname],
                networkInterfaces=[network],
                os=image_distribution,
                customAttributes={
                    "id":id,
                    "size_slug":size_slug,
                    "memory":memory,
                    "vcpus":vcpus,
                    "disk":disk,
                    "locked":locked,
                    "status":status,
                    "created_at":created_at,
                    "vpcUUID":vpc_uuid,
                    "image.id":image_id,
                    "image.name":image_name,
                    "image.distribution":image_distribution,
                    "image.type":image_type,
                    "image.public":image_public,
                    "image.status":image_status,
                    "region.name":region_name,
                    "region.features":region_features,
                    "region.available":region_available,
                    "tags":tags_rz
                }
            )
        )
    return assets_import

# build runZero network interfaces; shouldn't need to touch this
def build_network_interface(ips, mac):
    ip4s = []
    ip6s = []
    for ip in ips[:99]:
        ip_addr = ip_address(ip)
        if ip_addr.version == 4:
            ip4s.append(ip_addr)
        elif ip_addr.version == 6:
            ip6s.append(ip_addr)
        else:
            continue
    if not mac:
        return NetworkInterface(ipv4Addresses=ip4s, ipv6Addresses=ip6s)
    
    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def main(**kwargs):
    # kwargs!!
    token = kwargs['access_secret']

    # get assets
    assets = []
    url = '{}/{}'.format(DIGITAL_OCEAN_API_URL, 'droplets')
    assets = http_get(url, headers={"Content-Type": "application/json", "Authorization": "Bearer " + token})
    if assets.status_code != 200:
        print('failed to retrieve assets' + assets)
        return None

    assets_json = json_decode(assets.body)['droplets']

    # build asset import
    assets_import = build_assets(assets_json)
    if not assets_import:
        print('no assets')
    
    return assets_import

----
sumo-logic/config.json
{ "name": "Sumo Logic", "type": "outbound" }

----
sumo-logic/README.md
# Custom Integration: Sumo Logic

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.
- API Export Token with permissions to access the `export/org/assets.json` endpoint.

## Sumo Logic requirements

- HTTP Source URL configured in Sumo Logic.
  - This should be the endpoint URL where runZero will send asset data.
  - Example format: `https://<your-instance>.sumologic.com/receiver/v1/http/<unique-token>`.

## Steps

### Sumo Logic configuration

1. Create an HTTP Source in your Sumo Logic account:
   - Navigate to **Manage Data** > **Collection** > **HTTP Sources** in Sumo Logic.
   - Follow the instructions to create an HTTP Source and note down the generated endpoint URL.
2. Replace `<UPDATE_ME>` in the script with your Sumo Logic HTTP Source URL.

### runZero configuration

1. (OPTIONAL) - Make any necessary changes to the script to align with your environment.
    - Modify the `SEARCH` variable to adjust the query used to filter assets in runZero.
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - Use the `access_secret` field for your runZero API Export Token.
    - For `access_key`, input a placeholder value like `foo` (unused in this integration).
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "sumo-logic-export").
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` to ensure it has valid syntax.
    - Click `Save` to create the Custom Integration.
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to recur at the desired timeframes.
    - Select the Explorer you'd like the Custom Integration to run from.
    - Click `Save` to kick off the first task.

### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration.
- The task will retrieve asset data from runZero and upload it to your configured Sumo Logic HTTP Source.
- Asset data in Sumo Logic will be updated with each successful task execution.

### Notes

- Ensure the `SEARCH` variable in the script is customized to meet your asset filtering needs (e.g., `alive:t` to include only live assets).
- You can monitor the ingestion of data in Sumo Logic through the configured HTTP Source logs.
- Use Sumo Logic’s query tools to analyze and visualize the runZero asset data.

----
sumo-logic/custom-integration-sumo.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_post='post', http_get='get', 'url_encode')

SUMO_HTTP_ENDPOINT = "<UPDATE_ME>"
BASE_URL = "https://console.runZero.com/api/v1.0"
SEARCH = "alive:t"

def get_assets(headers):
    # get assets to upload to sumo
    assets = []
    url = BASE_URL + "/export/org/assets.json?{}".format(url_encode({"search": SEARCH}))
    get_assets = http_get(url=url, headers=headers, timeout=600)
    assets_json = json_decode(get_assets.body)
    if get_assets.status_code == 200 and len(assets_json) > 0:
        print("Got {} assets".format(len(assets_json)))
        return assets_json
    else:
        print("runZero did not return any assets - status code {}".format(get_assets.status_code))
        return None

def sync_to_sumo(assets):
    print("Sending {} assets to Sumo Logic".format(len(assets)))
    batchsize = 500
    if len(assets) > 0:
        for i in range(0, len(assets), batchsize):
            batch = assets[i:i+batchsize]
            tmp = ""
            for a in batch:
                tmp = tmp + "{}\n".format(json_encode(a))
            post_to_sumo = http_post(url=SUMO_HTTP_ENDPOINT, body=bytes(tmp))
    else:
        print("No assets found")


def main(*args, **kwargs):
    rz_export_token = kwargs['access_secret']
    headers = {"Authorization": "Bearer {}".format(rz_export_token)}
    assets = get_assets(headers=headers)
    if assets:
        sync_to_sumo(assets=assets)
----
ninjaone/custom-integration-ninjaone.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_post='post', http_get='get', 'url_encode')
load('uuid', 'new_uuid')

NINJAONE_API_URL = 'https://us2.ninjarmm.com'

def get_token(client_id, client_secret):
    url = NINJAONE_API_URL + '/ws/oauth/token'
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    payload = {"grant_type": "client_credentials", "client_id": client_id, "client_secret": client_secret, "scope": "monitoring"}
    
    resp = http_post(url, headers=headers, body=bytes(url_encode(payload)))
    if resp.status_code != 200:
        print('authentication failed: ', resp.status_code)
        return None

    auth_data = json_decode(resp.body)
    if not auth_data:
        print('invalid authentication data')
        return None

    return auth_data.get('access_token')

def get_assets(token):
    hasNextPage = True
    after = ''
    page_size = 500
    assets = []
    assets_all = []

    url = NINJAONE_API_URL + "/v2/devices-detailed"
    headers = {'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token}

    while hasNextPage:
        query = {'pageSize': page_size, 'after': after}
        response = http_get(url, headers=headers, params=query)

        if response.status_code != 200:
            print('failed to retrieve assets', response.status_code)
            return None

        assets = json_decode(response.body)

        if len(assets) == page_size:
            assets_all.extend(assets)
            last_node = page_size - 1
            after = assets[last_node].get('id', '')
            if not after:
                print('failed to retrieve last node id')
                return None
        elif len(assets) > 0 and len(assets) < page_size:
            assets_all.extend(assets)
            hasNextPage = False
        else:
            hasNextPage = False

    return assets_all

def build_assets(assets_json):
    imported_assets = []
    for item in assets_json:
        id = item.get('id', new_uuid)

        display_name = item.get('displayName', '')
        system_name = item.get('systemName', '')
        dns_name = item.get('')

        # parse network interfaces
        ips = []
        macs = []
        networks = []

        ips = item.get('ipAddresses', [])
        
        # check for assets with weird address blocks and rebuilt ips
        rebuilt_ips = []
        for ip in ips:
            if '|' in ip:
                rebuilt_ips.extend(ip.split('|'))
            elif ip == '':
                continue
            else:
                rebuilt_ips.append(ip)
        ips = rebuilt_ips

        # check for assets with no ip address
        if len(ips) == 0:
            ips.append('127.0.0.1')

        macs = item.get('macAddresses', [])    
        if macs:
            for m in macs:
                network = build_network_interface(ips=ips, mac=m)
                networks.append(network)
        else:
            network = build_network_interface(ips=ips, mac=None)
            networks.append(network)

        imported_assets.append(
            ImportAsset(
                id=str(id),
                hostnames=[
                    item.get('displayName', ''), 
                    item.get('systemName', ''),
                    item.get('dnsName', ''),
                    item.get('netbiosName', '')
                ],
                networkInterfaces=networks,
                os=item.get('os', {}).get('name', ''),
                manufacturer=item.get('system', {}).get('manufacturer', ''),
                customAttributes={
                    'id':id,
                    'displayName':item.get('displayName', ''), 
                    'systemName':item.get('systemName', ''),
                    'dnsName':item.get('dnsName', ''),
                    'netbiosName':item.get('netbiosName', ''),
                    'nodeClass':item.get('nodeClass', ''),
                    'nodeRoleId':item.get('nodeRoleId', ''),
                    'rolePolicyId':item.get('rolePolicyId', ''),
                    'policyId':item.get('policyId', ''),
                    'approvalStatus':item.get('approvalStatus', ''),
                    'offline':item.get('offline', ''),
                    'ipAddresses':item.get('ipAddresses', ''),
                    'macAddresses':item.get('macAddresses', ''),
                    'publicIP':item.get('publicIP', ''),
                    'osManufacturer':item.get('os', {}).get('manufacturer', ''),
                    'osName':item.get('os', {}).get('name', ''),
                    'osArchitecture':item.get('os', {}).get('architecture', ''),
                    'osBuildNumber':item.get('os', {}).get('buildNumber', ''),
                    'osReleaseId':item.get('os', {}).get('manufacturer', ''),
                    'osServicePackMajorVersion':item.get('os', {}).get('servicePackMajorVersion', ''),
                    'osServicePackMinorVersion':item.get('os', {}).get('servicePackMinorVersion', ''),
                    'osLanguage':item.get('os', {}).get('language', ''),
                    'osNeedsReboot':item.get('os', {}).get('needsReboot', ''),
                    'systemManufacturer':item.get('system', {}).get('manufacturer', ''),
                    'systemModel':item.get('system', {}).get('model', ''),
                    'systemBiosSerialNumber':item.get('system', {}).get('biosSerialNumber', ''),
                    'systemSerialNumber':item.get('system', {}).get('serialNumberr', ''),                    
                    'systemDomain':item.get('system', {}).get('domain', ''),
                    'systemDomainRole':item.get('system', {}).get('domainRole', ''),
                    'systemProcessors':item.get('system', {}).get('numberOfProcessors', ''),
                    'systemTotalPhysicalMemory':item.get('system', {}).get('totalPhysicalMemory', ''),
                    'systemVirtualMachine':item.get('system', {}).get('virtualMachine', ''),
                    'systemChassisType':item.get('system', {}).get('chassisType', ''),
                    'lastLoggedInUser':item.get('lastLoggedInUser', ''),
                    'deviceType':item.get('deviceType', '')
                }
            )
        )
    return imported_assets

# build runZero network interfaces; shouldn't need to touch this
def build_network_interface(ips, mac):
    ip4s = []
    ip6s = []
    for ip in ips[:99]:
        ip_addr = ip_address(ip)
        if ip_addr.version == 4:
            ip4s.append(ip_addr)
        elif ip_addr.version == 6:
            ip6s.append(ip_addr)
        else:
            continue
    if not mac:
        return NetworkInterface(ipv4Addresses=ip4s, ipv6Addresses=ip6s)
    
    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def main(**kwargs):
    # kwargs!!
    client_id = kwargs['access_key']
    client_secret = kwargs['access_secret']

    # get bearer token
    token = get_token(client_id, client_secret)
    if not token:
        print('failed to retrieve bearer token')
        return None
    
    # get assets
    assets = get_assets(token)
    if not assets:
        print('failed to retrieve assets')
        return None
    
    # build asset import
    imported_assets = build_assets(assets)
    
    return imported_assets
----
ninjaone/config.json
{ "name": "NinjaOne", "type": "inbound" }
----
ninjaone/README.md
# Custom Integration: NinjaOne

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## NinjaOne requirements

- API client ID and secret with appropriate permissions.
- NinjaOne API URL (e.g. `https://us2.ninjarmm.com`).

## Steps

### NinjaOne configuration

1. Generate an API client ID and secret for NinjaOne.
   - Refer to the [NinejaOne API Documentation](https://app.ninjarmm.com/apidocs-beta/authorization/create-applications/machine-to-machine-apps) for instructions.
2. Note down the API URL: `https://<your-region>.ninjarmm.com/`.

### runZero configuration

1. (OPTIONAL) - Make any necessary changes to the script to align with your environment.
    - Modify API calls as needed to filter inventory data.
    - Modify datapoints uploaded to runZero as needed.
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - For the `access_key`, input your NinjaOne client ID.
    - For the `access_secret`, input your NinjaOne client secret.
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "ninjaone").
    - Upload an image file for the NinjaOne icon.
        - Download [NinjaOne logos and icons](https://www.ninjaone.com/wp-content/uploads/2024/10/NinjaOne-Logos-and-Favicons.zip)
        - Resize selected icon to be 256px by 256px
        - Upload resized icon file
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` to ensure it has valid syntax.
    - Click `Save` to create the Custom Integration.
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to recur at the desired timeframes.
    - Select the Explorer you'd like the Custom Integration to run from.
    - Click `Save` to kick off the first task.

### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration.
- The task will update the existing assets with the data pulled from the Custom Integration source.
- The task will create new assets for when there are no existing assets that meet merge criteria (hostname, MAC, etc).
- You can search for assets enriched by this custom integration with the runZero search `custom_integration:ninjaone`.

----
netskope/config.json
{ "name": "Netskope", "type": "inbound" }
----
netskope/custom-integration-netskope.star
load('runzero.types', 'ImportAsset', 'NetworkInterface')
load('json', json_encode='encode', json_decode='decode')
load('net', 'ip_address')
load('http', http_post='post', http_get='get', 'url_encode')
load('uuid', 'new_uuid')

NETSKOPE_API_URL = 'https://<your-netskope-account>.goskope.com/api'
NETSKOPE_API_GROUPBYS = 'nsdeviceuid'
NETSKOPE_API_ATTRIBUTES = [
    'deleted',
    'device_classification_status',
    'device_id',
    'device_make',
    'device_model',
    'groups',
    'hostname',
    'mac_addresses',
    'nsdeviceuid',
    'ns_tenant_id',
    'organization_unit',
    'os',
    'os_version',
    'serial_number',
    'steering_config',
    'timestamp',
    'ur_normalized',
    'user',
    'userkey',
    'usergroup',
    'user_added_time',
    'user_status'
]

def get_assets(token):
    hasNextPage = True
    page_offset = 0
    page_limit = 20000
    assets = []
    assets_all = []

    fields = ','.join(NETSKOPE_API_ATTRIBUTES)
    headers = {'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token}

    while hasNextPage:
        query = '?groupbys={}&fields={}&offset={}&limit={}'.format(NETSKOPE_API_GROUPBYS, fields, page_offset, page_limit)
        url = NETSKOPE_API_URL + '/v2/events/datasearch/clientstatus' + query

        response = http_get(url, headers=headers, timeout=300)

        if response.status_code != 200:
            print('failed to retrieve assets', response.status_code)
            return None

        assets = json_decode(response.body)['result']
        print(assets)

        if len(assets) == page_limit:
            assets_all.extend(assets)
            page_offset = page_offset + page_limit
        elif len(assets) > 0 and len(assets) < page_limit:
            assets_all.extend(assets)
            hasNextPage = False
        else:
            print('something weird happened')
            hasNextPage = False

    return assets_all

def build_assets(assets_json):
    imported_assets = []
    for item in assets_json:

        # parse operating system
        os_name = item.get('os', '')
        os_version = item.get('os_version', '')

        if 'Mac' in os_name:
            os = 'macOS'
        else:
            os = os_name

        # parse network interfaces
        ips = ["127.0.0.1"]
        macs = []
        networks = []
               
        macs = item.get('mac_addresses', [])       
        if macs:
            for m in macs:
                network = build_network_interface(ips=ips, mac=m)
                networks.append(network)
        else:
            network = build_network_interface(ips=ips, mac=None)
            networks.append(network)

        imported_assets.append(
            ImportAsset(
                id=item.get('_id', {}).get('nsdeviceuid', new_uuid),
                hostnames=[item.get('hostname', '')],
                networkInterfaces=networks,
                os=os,
                #os_version=os_version,
                manufacturer=item.get('device_make', ''),
                model=item.get('device_model', ''),
                customAttributes={
                    'clientVersion':item.get('client_version', ''),
                    'deviceId':item.get('device_id', ''),
                    'deleted':item.get('deleted', ''),
                    'groups':item.get('groups', []),
                    'nsdeviceuid':item.get('_id', {}).get('nsdeviceuid', ''),
                    'ns_tenant_id':item.get('ns_tenant_id', ''),
                    'osName':item.get('os', ''),
                    'osVersion':item.get('os_version', ''),
                    'serialNumber':item.get('serial_number', ''),
                    'steeringConfig':item.get('steering_config', ''),
                    'netskopeTS':item.get('timestamp', ''),
                    'userInfoDeviceClassificationStatus':item.get('device_classification_status', ''),
                    'userInfoUserKey':item.get('userkey', ''),
                    'userName':item.get('username', ''),
                    'userNormalized':item.get('ur_normalized', ''),
                    'userSource':item.get('user_source', ''),
                    'userStatus':item.get('user_status', ''),
                    'userGroup':item.get('usergroup', [])
                }
            )
        )
    return imported_assets

# build runZero network interfaces; shouldn't need to touch this
def build_network_interface(ips, mac):
    ip4s = []
    ip6s = []
    for ip in ips[:99]:
        ip_addr = ip_address(ip)
        if ip_addr.version == 4:
            ip4s.append(ip_addr)
        elif ip_addr.version == 6:
            ip6s.append(ip_addr)
        else:
            continue
    if not mac:
        return NetworkInterface(ipv4Addresses=ip4s, ipv6Addresses=ip6s)
    
    return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)

def main(**kwargs):
    # kwargs!!
    token = kwargs['access_secret']
    
    # get assets
    assets = get_assets(token)
    if not assets:
        print('failed to retrieve assets')
        return None
    
    # build asset import
    imported_assets = build_assets(assets)
    
    return imported_assets
----
netskope/README.md
# Custom Integration: Netskope

## runZero requirements

- Superuser access to the [Custom Integrations configuration](https://console.runzero.com/custom-integrations) in runZero.

## Netskope requirements

- REST API token with appropriate permissions. This script calls the `/v2/events/datasearch/clientstatus` API endpoint.
- Netskope API URL: `https://<your-netskope-account>.goskope.com/`.

## Steps

### Netskope configuration

1. Generate an API token in your Netskope account.
   - Refer to the [Netskope API Documentation](https://docs.netskope.com/en/api-tokens/) for guidance.
2. Document your Netskope API URL (e.g., `https://<your-netskope-account>.goskope.com`).

### runZero configuration

1. (OPTIONAL) - Make any necessary changes to the script to align with your environment.
    - Modify the NETSKOPE_API variable to reflect your environment.
    - Modify the NETSKOPE_API_GROUPBYS attribute, if appropriate. By default this script groups by nsdeviceuid to avoid duplicate records. Modifying this variable could alter what attributes are available.
    - Modify the NETSKOPE_API_ATTRIBUTES array. These are the attributes that runZero will ingest. It is passed to Netskope as part of the API call.
    - Modify datapoints uploaded to runZero as needed. If you modify the NETSKOPE_API_ATTRIBUTES, you will also need to update `ImportAssets` so that the asset is included in the import. 
2. [Create the Credential for the Custom Integration](https://console.runzero.com/credentials).
    - Select the type `Custom Integration Script Secrets`.
    - Leave the `access_client` blank.
    - Use the `access_secret` field for your Netskope API token.
3. [Create the Custom Integration](https://console.runzero.com/custom-integrations/new).
    - Add a Name and Icon for the integration (e.g., "netskope").
    - Toggle `Enable custom integration script` to input the finalized script.
    - Click `Validate` to ensure it has valid syntax.
    - Click `Save` to create the Custom Integration.
4. [Create the Custom Integration task](https://console.runzero.com/ingest/custom/).
    - Select the Credential and Custom Integration created in steps 2 and 3.
    - Update the task schedule to recur at the desired timeframes.
    - Select the Explorer you'd like the Custom Integration to run from.
    - Click `Save` to kick off the first task.

### What's next?

- You will see the task kick off on the [tasks](https://console.runzero.com/tasks) page like any other integration.
- The task will update the existing assets with the data pulled from the Custom Integration source.
- The task will create new assets for when there are no existing assets that meet merge criteria (hostname, MAC, etc).
- You can search for assets enriched by this custom integration with the runZero search `custom_integration:netskope`.

--END--