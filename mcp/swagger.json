{
  "openapi": "3.0.0",
  "info": {
    "title": "runZero API",
    "description": "runZero API. API use is rate limited, you can make as many calls per day as you have licensed assets.",
    "contact": {
      "email": "support@runzero.com"
    },
    "license": {
      "name": "Commercial",
      "url": "https://www.runzero.com/legal/terms"
    },
    "version": "4.0.250407.1"
  },
  "servers": [
    {
      "url": "https://console.runzero.com/api/v1.0",
      "description": "runZero Console"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    },
    {
      "oauthDefaults": []
    }
  ],
  "tags": [
    {
      "name": "Account",
      "description": "Requires Account key (starts with CT), or OAuth"
    },
    {
      "name": "Organization",
      "description": "Requires Organization key (starts with OT), Account key (starts with CT), or OAuth"
    },
    {
      "name": "Export",
      "description": "Requires Export token (starts with ET), Organization key (starts with OT), Account key (starts with CT), or OAuth"
    },
    {
      "name": "Import",
      "description": "Requires Organization key (starts with OT), Account key (starts with CT), or OAuth"
    },
    {
      "name": "Public",
      "description": "Unauthenticated"
    }
  ],
  "paths": {
    "/releases/agent/version": {
      "get": {
        "tags": [
          "Public"
        ],
        "summary": "Returns latest agent version",
        "operationId": "getLatestAgentVersion",
        "responses": {
          "200": {
            "description": "component version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentVersion"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/releases/scanner/version": {
      "get": {
        "tags": [
          "Public"
        ],
        "summary": "Returns latest scanner version",
        "operationId": "getLatestScannerVersion",
        "responses": {
          "200": {
            "description": "component version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentVersion"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/releases/platform/version": {
      "get": {
        "tags": [
          "Public"
        ],
        "summary": "Returns latest platform version",
        "operationId": "getLatestPlatformVersion",
        "responses": {
          "200": {
            "description": "component version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentVersion"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Public"
        ],
        "summary": "Returns a health check status (cloud and self-hosted)",
        "operationId": "getHealthCheck",
        "responses": {
          "200": {
            "description": "health status and current version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/import/org/{orgID}/assets": {
      "post": {
        "tags": [
          "Organization",
          "Import"
        ],
        "summary": "Import assets described by a registered custom integration",
        "description": "Assets can be discovered, imported, and merged by runZero scan tasks, first-party integrations, and third-party\ndefined custom integrations. See [/account/custom-integrations](#/account/getAccountCustomIntegrations). Currently only assets for custom integrations are importable here.\n",
        "operationId": "importCustomIntegrationAssets",
        "parameters": [
          {
            "name": "orgID",
            "in": "path",
            "description": "The ID of the organization to import the assets into",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NewAssetImport"
              },
              "encoding": {
                "assetData": {
                  "contentType": "application/gzip"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "import task created. The task ID should be checked for its status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/export/org/assets.json": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Exports the asset inventory",
        "operationId": "exportAssetsJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered asset results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/assets.jsonl": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Asset inventory as JSON line-delimited",
        "operationId": "exportAssetsJSONL",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered asset results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/assets.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Asset inventory as CSV",
        "operationId": "exportAssetsCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered asset results",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/assets.nmap.xml": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Asset inventory as Nmap-style XML",
        "operationId": "exportAssetsNmapXML",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered asset results",
            "content": {
              "text/xml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/services.json": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Service inventory as JSON",
        "operationId": "exportServicesJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered service results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/services.jsonl": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Service inventory as JSON line-delimited",
        "operationId": "exportServicesJSONL",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered service results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/services.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Service inventory as CSV",
        "operationId": "exportServicesCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered service results",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/sites.json": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export all sites",
        "operationId": "exportSitesJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "all sites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/sites.jsonl": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Site list as JSON line-delimited",
        "operationId": "exportSitesJSONL",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "all sites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/sites.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Site list as CSV",
        "operationId": "exportSitesCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "all sites",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/wireless.json": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Wireless inventory as JSON",
        "operationId": "exportWirelessJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered wireless results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Wireless"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/wireless.jsonl": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Wireless inventory as JSON line-delimited",
        "operationId": "exportWirelessJSONL",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered wireless results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/wireless.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Wireless inventory as CSV",
        "operationId": "exportWirelessCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered wireless results",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/software.json": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Exports the software inventory",
        "operationId": "exportSoftwareJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered software results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Software"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/software.jsonl": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Software inventory as JSON line-delimited",
        "operationId": "exportSoftwareJSONL",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered software results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/software.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Software inventory as CSV",
        "operationId": "exportSoftwareCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered software results",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/vulnerabilities.json": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export the vulnerability inventory as JSON",
        "operationId": "exportVulnerabilitiesJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered vulnerability results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vulnerability"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/vulnerabilities.jsonl": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export the vulnerability inventory as JSON line-delimited",
        "operationId": "exportVulnerabilitiesJSONL",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered vulnerability results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/vulnerabilities.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export the vulnerability inventory as CSV",
        "operationId": "exportVulnerabilitiesCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered vulnerability results",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/certificates.csv": {
      "get": {
        "tags": [
          "Export",
          "Certificates"
        ],
        "summary": "Export the certificate inventory as CSV",
        "operationId": "exportCertificatesCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered certificate results",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/certificates.json": {
      "get": {
        "tags": [
          "Export",
          "Certificates"
        ],
        "summary": "Export the certificate inventory as JSON",
        "operationId": "exportCertificatesJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered certificate results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Certificate"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/certificates.jsonl": {
      "get": {
        "tags": [
          "Export",
          "Certificates"
        ],
        "summary": "Export the certificate inventory as JSONL line-delimited",
        "operationId": "exportCertificatesJSONL",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered certificate results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/users.json": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Exports the user inventory",
        "operationId": "exportDirectoryUsersJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered user results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DirectoryUser"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/users.jsonl": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "User inventory as JSON line-delimited",
        "operationId": "exportDirectoryUsersJSONL",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered user results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/users.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "User inventory as CSV",
        "operationId": "exportDirectoryUsersCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered user results",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/groups.json": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Exports the group inventory",
        "operationId": "exportDirectoryGroupsJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered group results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DirectoryGroup"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/groups.jsonl": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Group inventory as JSON line-delimited",
        "operationId": "exportDirectoryGroupsJSONL",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered group results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/groups.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Group inventory as CSV",
        "operationId": "exportDirectoryGroupsCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered group results",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/findings.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export findings as CSV",
        "operationId": "exportFindingsCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered findings",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/findings.json": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export findings as JSON",
        "operationId": "exportFindingsJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered findings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Finding"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/findings.jsonl": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export findings as JSON line-delimited",
        "operationId": "exportFindingsJSONL",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered findings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Finding"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/subnet.stats.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Subnet utilization statistics as as CSV",
        "operationId": "exportSubnetUtilizationStatsCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mask",
            "in": "query",
            "description": "an optional subnet mask size (ex:24)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "subnet utilization stats as csv",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/snmp.arpcache.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "SNMP ARP cache data as CSV",
        "operationId": "exportSNMPARPCacheCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SNMP ARP cache data as csv",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/tasks.json": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Exports organization tasks",
        "operationId": "exportTasksJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered task results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/tasks.jsonl": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Organization tasks as JSON line-delimited",
        "operationId": "exportTasksJSONL",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered task results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/assets/type.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Top asset types as CSV",
        "operationId": "exportAssetTopTypesCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "top asset types and counts as csv",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/assets/os.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Top asset operating systems as CSV",
        "operationId": "exportAssetTopOSCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "top operating systems and counts as csv",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/assets/hw.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Top asset hardware products as CSV",
        "operationId": "exportAssetTopHWCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "top asset hardware platforms and counts as csv",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/assets/tags.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Top asset tags as CSV",
        "operationId": "exportAssetTopTagsCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "top asset tags and counts as csv",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/services/tcp.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Top TCP services as CSV",
        "operationId": "exportServicesTopTCPCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "top TCP services and counts as csv",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/services/udp.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Top UDP services as CSV",
        "operationId": "exportServicesTopUDPCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "top UDP services and counts as csv",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/services/protocols.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Top service protocols as CSV",
        "operationId": "exportServicesTopProtocolsCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "top service protocols and counts as csv",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/services/products.csv": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Top service products as CSV",
        "operationId": "exportServicesTopProductsCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "top service products and counts as csv",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/metrics": {
      "get": {
        "summary": "Export asset metrics",
        "operationId": "exportAssetMetricsJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "asset metrics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/inline_response_map200"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get organization details",
        "operationId": "getOrganization",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update organization details",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "organization options",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/key": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get API key details",
        "operationId": "getKey",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "api key details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove the current API key",
        "operationId": "removeKey",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/key/rotate": {
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Rotate the API key secret and return the updated key",
        "operationId": "rotateKey",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "api key details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/agents": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all agents. Legacy path for /org/explorers",
        "operationId": "getAgents",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of agents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Agent"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/agents/{agent_id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get details for a single agent. Legacy path for /org/explorers/{explorer_id}",
        "operationId": "getAgent",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_id",
            "in": "path",
            "description": "UUID of the agent",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "agent details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove and uninstall an agent. Legacy path for /org/explorers/{explorer_id}",
        "operationId": "removeAgent",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_id",
            "in": "path",
            "description": "UUID of the agent to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update the site associated with agent. Legacy path for /org/explorers/{explorer_id}",
        "operationId": "updateAgentSite",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_id",
            "in": "path",
            "description": "UUID of the agent to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "site_id to associate with the agent",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentSiteID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "agent details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/agents/{agent_id}/update": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Force an agent to update and restart. Legacy path for /org/explorers/{explorer_id}/update",
        "operationId": "upgradeAgent",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent_id",
            "in": "path",
            "description": "UUID of the agent to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/explorers": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all explorers",
        "description": "Get all explorers. This is the same call as legacy path /org/agents",
        "operationId": "getExplorers",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of agents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Explorer"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/explorers/{explorer_id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get details for a single explorer.",
        "description": "Get details for a single explorer. This is the same call as legacy path /org/agents/{agent_id}",
        "operationId": "getExplorer",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "explorer_id",
            "in": "path",
            "description": "UUID of the explorer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "explorer details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Explorer"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove and uninstall an explorer",
        "description": "Remove and uninstall an explorer. This is the same call as legacy path /org/agents/{agent_id}",
        "operationId": "removeExplorer",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "explorer_id",
            "in": "path",
            "description": "UUID of the explorer to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update the site associated with the explorer",
        "description": "Update the site associated with the explorer. This is the same call as legacy path /org/agents/{agent_id}",
        "operationId": "updateExplorerSite",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "explorer_id",
            "in": "path",
            "description": "UUID of the explorer to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "site_id to associate with the explorer",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExplorerSiteID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "explorer details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Explorer"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/explorers/{explorer_id}/update": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Force an explorer to update and restart",
        "description": "Force an explorer to update and restart. This is the same call as legacy path /org/agents/{agent_id}/update",
        "operationId": "upgradeExplorer",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "explorer_id",
            "in": "path",
            "description": "UUID of the explorer to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/hosted-zones": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all hosted zones",
        "description": "Get all hosted zones. Hosted Zones are only available to Enterprise licensed customers.",
        "operationId": "getHostedZones",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of hosted zones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostedZone"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/hosted-zones/{hosted_zone_id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get details for a single hosted zone.",
        "description": "Get details for a single Hosted Zone. Hosted Zones are only available to Enterprise licensed customers.",
        "operationId": "getHostedZone",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hosted_zone_id",
            "in": "path",
            "description": "UUID of the hosted zone",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "hosted zone details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostedZone"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/sites": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all sites",
        "operationId": "getSites",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of sites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Create a new site",
        "operationId": "createSite",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "site details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/sites/{site_id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get site details",
        "operationId": "getSite",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "in": "path",
            "description": "UUID or name of the site",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "site details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove a site and associated assets",
        "operationId": "removeSite",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "in": "path",
            "description": "UUID or name of the site to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update a site definition",
        "operationId": "updateSite",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "in": "path",
            "description": "UUID or name of the site to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "site object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "site details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/sites/{site_id}/import": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Import a scan data file into a site",
        "operationId": "importScanData",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "in": "path",
            "description": "UUID or name of the site to import scan data into",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "import task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/LicenseExpiredError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/ProcessingError"
          }
        }
      }
    },
    "/org/sites/{site_id}/import/nessus": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Import a Nessus scan data file into a site",
        "operationId": "importNessusScanData",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "in": "path",
            "description": "UUID or name of the site to import Nessus scan data into",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "import task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/LicenseExpiredError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/ProcessingError"
          }
        }
      }
    },
    "/org/sites/{site_id}/import/packet": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Import a packet capture file into a site",
        "operationId": "importPacketData",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "in": "path",
            "description": "UUID or name of the site to import packet capture into",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "import task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/LicenseExpiredError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/ProcessingError"
          }
        }
      }
    },
    "/org/sites/{site_id}/scan": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Create a scan task for a given site",
        "operationId": "createScan",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "in": "path",
            "description": "UUID or name of the site to scan",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "a created scan task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/LicenseExpiredError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/ProcessingError"
          }
        }
      }
    },
    "/org/sites/{site_id}/sample": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Create a traffic sampling task for a given site",
        "operationId": "createSample",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site_id",
            "in": "path",
            "description": "UUID or name of the site to scan",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SampleOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "a created scan task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/LicenseExpiredError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/ProcessingError"
          }
        }
      }
    },
    "/org/assets": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all assets",
        "operationId": "getAssets",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search query in runZero search query syntax",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of assets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/assets/{asset_id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get asset details",
        "operationId": "getAsset",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asset_id",
            "in": "path",
            "description": "UUID of the asset to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "asset details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove an asset",
        "operationId": "removeAsset",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asset_id",
            "in": "path",
            "description": "UUID of the asset to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/assets/bulk/delete": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Removes multiple assets by ID",
        "operationId": "removeBulkAssets",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "list of asset IDs to remove",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetIDs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/org/assets/{asset_id}/comments": {
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update asset comments",
        "operationId": "updateAssetComments",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asset_id",
            "in": "path",
            "description": "UUID of the asset to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "comments to apply to the asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetComments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "asset details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/assets/{asset_id}/tags": {
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update asset tags",
        "operationId": "updateAssetTags",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asset_id",
            "in": "path",
            "description": "UUID of the asset to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "tags to apply to the asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetTags"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "asset details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/assets/{asset_id}/criticality": {
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update asset criticality",
        "operationId": "updateAssetCriticality",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asset_id",
            "in": "path",
            "description": "UUID of the asset to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "comments to apply to the asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCriticality"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "asset details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/assets/merge": {
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Merge multiple assets",
        "operationId": "mergeAssets",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of Asset IDs to merge",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetIDs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/StatusMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/assets/bulk/tags": {
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update tags across multiple assets based on a search query",
        "operationId": "updateBulkAssetTags",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "search query to filter and tags to apply",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetTagsWithSearch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/StatusMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/assets/bulk/clearTags": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Clear all tags across multiple assets based on a search query",
        "operationId": "clearBulkAssetTags",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "search query to filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Search"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/StatusMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/assets/bulk/criticality": {
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update criticality across multiple assets based on a search query",
        "operationId": "updateBulkAssetCriticality",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "search query to filter and criticality to apply",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCriticalityWithSearch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/StatusMessage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/assets/{asset_id}/owners": {
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update asset owners",
        "operationId": "updateAssetOwners",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asset_id",
            "in": "path",
            "description": "UUID of the asset to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "list of ownerships to apply to the asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetOwnerships"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "asset details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/org/assets/bulk/owners": {
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update asset owners across multiple assets based on a search query",
        "operationId": "updateBulkAssetOwners",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "search query to filter and ownerships to apply",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetOwnershipsWithSearch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "updated asset count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/org/assets/bulk/clearOwners": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Clear all owners across multiple assets based on a search query",
        "operationId": "clearBulkAssetOwners",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "search query to filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Search"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "updated asset count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "403": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/org/custom-integrations/{custom_integration_id}/bulk/remove": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove custom integration from a list of assets",
        "operationId": "bulkRemoveCustomIntegration",
        "parameters": [
          {
            "name": "custom_integration_id",
            "in": "path",
            "description": "UUID of the custom integration",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "list of asset IDs to remove",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetIDs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "empty response"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestParamError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/org/assets/{asset_id}/custom-integrations/{custom_integration_id}/remove": {
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove single custom integration from asset",
        "operationId": "removeCustomIntegration",
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "UUID of the asset to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "custom_integration_id",
            "in": "path",
            "description": "UUID of the custom integration",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestParamError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/org/assets/{asset_id}/sources/{source_id}/remove": {
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove single source from asset",
        "operationId": "removeAssetSource",
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "UUID of the asset to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "source_id",
            "in": "path",
            "description": "UUID of the source",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestParamError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/org/custom-integrations": {
      "get": {
        "tags": [
          "Org"
        ],
        "summary": "Get all custom integrations",
        "operationId": "getOrgCustomIntegrations",
        "responses": {
          "200": {
            "description": "An array of all custom integrations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomIntegration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/org/custom-integrations/{customIntegrationId}": {
      "get": {
        "tags": [
          "Org"
        ],
        "summary": "Get single custom integration",
        "operationId": "getOrgCustomIntegration",
        "parameters": [
          {
            "name": "customIntegrationId",
            "in": "path",
            "description": "UUID of the custom integration",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom integration with given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomIntegration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/org/services": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all services",
        "operationId": "getServices",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/services/{service_id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get service details",
        "operationId": "getService",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "UUID of the service to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "service details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove a service",
        "operationId": "removeService",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "UUID of the service to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/wireless": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all wireless LANs",
        "operationId": "getWirelessLANs",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of wireless LANs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Wireless"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/wireless/{wireless_id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get wireless LAN details",
        "operationId": "getWirelessLAN",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wireless_id",
            "in": "path",
            "description": "UUID of the wireless LAN to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "wireless details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wireless"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove a wireless LAN",
        "operationId": "removeWirelessLAN",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wireless_id",
            "in": "path",
            "description": "UUID of the wireless LAN to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/tasks": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get all tasks (last 1000)",
        "operationId": "getTasks",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "an optional status string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/org/tasks/{task_id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get task details",
        "operationId": "getTask",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "UUID of the task to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Update task parameters",
        "operationId": "updateTask",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "UUID of the task to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "task object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/tasks/{task_id}/data": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Returns a temporary task scan data url",
        "operationId": "getTaskScanData",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "UUID of the task",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "303": {
            "description": "Redirection to scan data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/URL"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/tasks/{task_id}/changes": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Returns a temporary task change report data url",
        "operationId": "getTaskChangeReport",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "UUID of the task",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "303": {
            "description": "Redirection to scan data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/URL"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/tasks/{task_id}/log": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Returns a temporary task log data url",
        "operationId": "getTaskLog",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "UUID of the task",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "303": {
            "description": "Redirection to scan data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/URL"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/tasks/{task_id}/stop": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Signal that a task should be stopped or canceled.This will also remove recurring and scheduled tasks",
        "operationId": "stopTask",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "UUID of the task to stop",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "task information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/org/tasks/{task_id}/hide": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Signal that a completed task should be hidden",
        "operationId": "hideTask",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "UUID of the task to hide",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "task information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/account/orgs": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all organization details",
        "operationId": "getAccountOrganizations",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new organization",
        "operationId": "createAccountOrganization",
        "requestBody": {
          "description": "organization definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/account/orgs/{org_id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get organization details",
        "operationId": "getAccountOrganization",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "UUID of the organization to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "organization information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Remove this organization",
        "operationId": "removeAccountOrganization",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "UUID of the organization to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Update organization details",
        "operationId": "updateAccountOrganization",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "UUID of the organization to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "organization options",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/orgs/{org_id}/exportToken": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Removes the export token from the specified organization",
        "description": "This API has been deprecated.  Please use `DELETE /account/orgs/{org_id}/exportTokens/{key_id}` instead.  This API will fail if more than one export tokens exist for the given organization.",
        "operationId": "deleteAccountOrganizationExportTokenDeprecated",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "UUID of the organization to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "deprecated": true
      }
    },
    "/account/orgs/{org_id}/exportToken/rotate": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Rotates an organization export token and returns the updated token",
        "description": "This API has been deprecated.  Please use `PATCH /account/orgs/{org_id}/exportTokens/{key_id}/rotate` instead.  This API will fail if more than one export tokens exist for the given organization.",
        "operationId": "rotateAccountOrganizationExportTokenDeprecated",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "UUID of the organization to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "export token details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportToken"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "deprecated": true
      }
    },
    "/account/orgs/{org_id}/exportTokens": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all active export tokens for an organization",
        "operationId": "getAccountOrganizationExportTokens",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "UUID of the organization to retrieve export tokens for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of export tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExportToken"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new export token for an organization",
        "operationId": "createAccountOrganizationExportToken",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "UUID of the organization to create an export token for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "export token parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportTokenOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "export token details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportToken"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/account/orgs/{org_id}/exportTokens/{key_id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get export token details",
        "operationId": "getAccountOrganizationExportToken",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "UUID of the organization to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "UUID of the export token ID to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "export token details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportToken"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Removes the export token from the specified organization",
        "operationId": "deleteAccountOrganizationExportToken",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "UUID of the organization to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "UUID of the export token ID to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/orgs/{org_id}/exportTokens/{key_id}/rotate": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Rotates an organization export token and returns the updated token",
        "operationId": "rotateAccountOrganizationExportToken",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "description": "UUID of the organization to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "key_id",
            "in": "path",
            "description": "UUID of the export token ID to rotate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "export token details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportToken"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/license": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get license details",
        "operationId": "getAccountLicense",
        "responses": {
          "200": {
            "description": "license information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/License"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/sites": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all sites details across all organizations",
        "operationId": "getAccountSites",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of sites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Site"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/credentials": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all account credentials",
        "operationId": "getAccountCredentials",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Credential"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new credential",
        "operationId": "createAccountCredential",
        "requestBody": {
          "description": "credential parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "credential details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/account/credentials/{credential_id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get credential details",
        "operationId": "getAccountCredential",
        "parameters": [
          {
            "name": "credential_id",
            "in": "path",
            "description": "UUID of the credential to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "credential details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Remove this credential",
        "operationId": "removeAccountCredential",
        "parameters": [
          {
            "name": "credential_id",
            "in": "path",
            "description": "UUID of the credential to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/account/keys": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all active API keys",
        "operationId": "getAccountKeys",
        "responses": {
          "200": {
            "description": "array of keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/APIKey"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new key",
        "operationId": "createAccountKey",
        "requestBody": {
          "description": "key parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIKeyOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "key details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/account/keys/{key_id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get key details",
        "operationId": "getAccountKey",
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "description": "UUID of the key to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "api key information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Remove this key",
        "operationId": "removeAccountKey",
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "description": "UUID of the key to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/keys/{key_id}/rotate": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Rotates the key secret",
        "operationId": "rotateAccountKey",
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "description": "UUID of the key to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "key details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/events.json": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "System event log as JSON",
        "operationId": "exportEventsJSON",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "an optional list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered event results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/events.jsonl": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "System event log as JSON line-delimited",
        "operationId": "exportEventsJSONL",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "an optional list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered event results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/tasks": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all task details across all organizations (up to 1000)",
        "operationId": "getAccountTasks",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/tasks/templates": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all scan templates across all organizations (up to 1000)",
        "operationId": "getAccountScanTemplates",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of scan templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScanTemplate"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "description": "failed to parse search string"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Update scan template",
        "operationId": "updateAccountScanTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "scan template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanTemplate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "scan template or permissions not found"
          },
          "422": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new scan template",
        "operationId": "createAccountScanTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanTemplateOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "scan template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanTemplate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          }
        }
      }
    },
    "/account/tasks/templates/{scan_template_id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get scan template details",
        "operationId": "getAccountScanTemplate",
        "parameters": [
          {
            "name": "scan_template_id",
            "in": "path",
            "description": "UUID of the scan template to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "scan template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanTemplate"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "scan template not found"
          },
          "422": {
            "description": "invalid scan template id"
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Remove scan template",
        "operationId": "removeAccountScanTemplate",
        "parameters": [
          {
            "name": "scan_template_id",
            "in": "path",
            "description": "UUID of the scan template to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "scan template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanTemplate"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "scan template not found"
          },
          "422": {
            "description": "invalid request"
          }
        }
      }
    },
    "/account/agents": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all agents across all organizations",
        "operationId": "getAccountAgents",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Agent"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/users": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all users",
        "operationId": "getAccountUsers",
        "responses": {
          "200": {
            "description": "array of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new user account",
        "operationId": "createAccountUser",
        "requestBody": {
          "description": "user parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "key details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/account/users/invite": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new user account and send an email invite",
        "operationId": "createAccountUserInvite",
        "requestBody": {
          "description": "user invite parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInviteOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "key details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/account/users/{user_id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get user details",
        "operationId": "getAccountUser",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "UUID of the user to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Remove this user",
        "operationId": "removeAccountUser",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "UUID of the user to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Update a user's details",
        "operationId": "updateAccountUser",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "UUID of the user to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "user parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/users/{user_id}/resetMFA": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Resets the user's MFA tokens",
        "operationId": "resetAccountUserMFA",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "UUID of the user to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/users/{user_id}/resetLockout": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Resets the user's lockout status",
        "operationId": "resetAccountUserLockout",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "UUID of the user to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/users/{user_id}/resetPassword": {
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Sends the user a password reset email",
        "operationId": "resetAccountUserPassword",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "UUID of the user to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/groups": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all groups",
        "operationId": "getAccountGroups",
        "responses": {
          "200": {
            "description": "group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Update an existing group",
        "operationId": "updateAccountGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupPut"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new group",
        "operationId": "createAccountGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupPost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/groups/{group_id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get group details",
        "operationId": "getAccountGroup",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "UUID of the group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Remove this group",
        "operationId": "removeAccountGroup",
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "UUID of the group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/sso/groups": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all SSO group mappings",
        "operationId": "getAccountGroupMappings",
        "responses": {
          "200": {
            "description": "group mapping information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMapping"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Update an existing SSO group mapping",
        "operationId": "updateAccountGroupMapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMapping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMapping"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new SSO group mapping",
        "operationId": "createAccountGroupMapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMapping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMapping"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/sso/groups/{group_mapping_id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get SSO group mapping details",
        "operationId": "getAccountGroupMapping",
        "parameters": [
          {
            "name": "group_mapping_id",
            "in": "path",
            "description": "UUID of the SSO group mapping",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMapping"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Remove this SSO group mapping",
        "operationId": "removeAccountGroupMapping",
        "parameters": [
          {
            "name": "group_mapping_id",
            "in": "path",
            "description": "UUID of the SSO group mapping",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "empty response"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/assets/ownership-types": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all asset ownership types",
        "operationId": "getAccountAssetOwnershipTypes",
        "responses": {
          "200": {
            "description": "array of asset ownership types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetOwnershipType"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Update asset ownership types",
        "operationId": "updateAccountAssetOwnershipTypes",
        "requestBody": {
          "description": "array of asset ownership types",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssetOwnershipType"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "array of asset ownership types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetOwnershipType"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create new asset ownership types",
        "operationId": "createAccountAssetOwnershipTypes",
        "requestBody": {
          "description": "array of asset ownership types",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AssetOwnershipTypePost"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "array of asset ownership types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetOwnershipType"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete asset ownership types",
        "operationId": "deleteAccountAssetOwnershipTypes",
        "requestBody": {
          "description": "Array of ids",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "example": [
                  "2318e078-4164-4e1b-92a5-11e353093f4b",
                  "a352c76b-0eb7-4dab-adea-66e8b6016565"
                ],
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "array of remaining asset ownership types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetOwnershipType"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/account/assets/ownership-types/{ownership_type_id}": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete a single asset ownership type",
        "operationId": "deleteAccountAssetOwnershipType",
        "parameters": [
          {
            "name": "ownership_type_id",
            "in": "path",
            "description": "UUID of the asset ownership type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "array of remaining asset ownership types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetOwnershipType"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Update a single asset ownership type",
        "operationId": "updateAccountAssetOwnershipType",
        "parameters": [
          {
            "name": "ownership_type_id",
            "in": "path",
            "description": "UUID of the asset ownership type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetOwnershipTypePost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "updated asset ownership type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetOwnershipType"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/account/custom-integrations": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get all custom integrations",
        "operationId": "getAccountCustomIntegrations",
        "responses": {
          "200": {
            "description": "An array of all custom integrations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomIntegration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new custom integration",
        "operationId": "createAccountCustomIntegration",
        "requestBody": {
          "description": "The description of the custom integration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCustomIntegration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The custom integration created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomIntegration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/account/custom-integrations/{customIntegrationId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get single custom integration",
        "operationId": "getAccountCustomIntegration",
        "parameters": [
          {
            "name": "customIntegrationId",
            "in": "path",
            "description": "UUID of the custom integration",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom integration with given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomIntegration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Replace custom integration at provided ID",
        "operationId": "createAccountCustomIntegrationAndID",
        "parameters": [
          {
            "name": "customIntegrationId",
            "in": "path",
            "description": "UUID of the custom integration",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "single custom integration type",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCustomIntegration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated custom integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomIntegration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete an custom integration",
        "operationId": "deleteAccountCustomIntegration",
        "parameters": [
          {
            "name": "customIntegrationId",
            "in": "path",
            "description": "UUID of the custom integration",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted custom integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomIntegration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "Account"
        ],
        "summary": "Update a single custom integration",
        "operationId": "updateAccountCustomIntegration",
        "parameters": [
          {
            "name": "customIntegrationId",
            "in": "path",
            "description": "UUID of the custom integration",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseCustomIntegration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated custom integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomIntegration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/account/api/token": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Generate an access token using an API client",
        "operationId": "getAPIToken",
        "requestBody": {
          "description": "Client ID and secret",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ClientIDForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/account/api/rotate": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Rotate the API client secret",
        "operationId": "rotateAPIToken",
        "requestBody": {
          "description": "Client ID and secret",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ClientIDForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Client details with an updated api_client_secret value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIClient"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/assets/sync/created/assets.json": {
      "get": {
        "tags": [
          "Splunk"
        ],
        "summary": "Exports the asset inventory in a sync-friendly manner using created_at as a checkpoint. Requires the Splunk entitlement.",
        "operationId": "splunkAssetSyncCreatedJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "an optional list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "an optional unix timestamp to use as a checkpoint",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1576300370
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered asset results with a checkpoint wrapper",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsWithCheckpoint"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/assets/sync/updated/assets.json": {
      "get": {
        "tags": [
          "Splunk"
        ],
        "summary": "Exports the asset inventory in a sync-friendly manner using updated_at as a checkpoint. Requires the Splunk entitlement.",
        "operationId": "splunkAssetSyncUpdatedJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "an optional list of fields to export, comma-separated",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "an optional unix timestamp to use as a checkpoint",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1576300370
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered asset results with a checkpoint wrapper",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsWithCheckpoint"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/assets.servicenow.csv": {
      "get": {
        "tags": [
          "ServiceNow"
        ],
        "summary": "Export an asset inventory as CSV for ServiceNow integration",
        "operationId": "snowExportAssetsCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "asset export",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/assets.servicenow.json": {
      "get": {
        "tags": [
          "ServiceNow"
        ],
        "summary": "Exports the asset inventory as JSON",
        "operationId": "snowExportAssetsJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered asset results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetServiceNow"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/services.servicenow.csv": {
      "get": {
        "tags": [
          "ServiceNow"
        ],
        "summary": "Export a service inventory as CSV for ServiceNow integration",
        "operationId": "snowExportServicesCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "services export",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/export/org/assets.servicegraph.json": {
      "get": {
        "tags": [
          "ServiceNow"
        ],
        "summary": "Exports the asset inventory as JSON",
        "operationId": "snowServiceGraphExportAssetsJSON",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered asset results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetServiceNow"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequestBodyError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/NotAllowedForLicenseError"
          }
        }
      }
    },
    "/export/org/assets.cisco.csv": {
      "get": {
        "tags": [
          "Cisco SNTC"
        ],
        "summary": "Cisco serial number and model name export for Cisco Smart Net Total Care Service.",
        "operationId": "exportAssetsCiscoCSV",
        "parameters": [
          {
            "name": "_oid",
            "in": "query",
            "description": "The current Organization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "an optional search string for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filtered asset results",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "StatusMessage": {
        "type": "object"
      },
      "Problem": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\n",
            "example": "A short summary of the problem type."
          },
          "status": {
            "maximum": 600,
            "exclusiveMaximum": true,
            "minimum": 100,
            "type": "integer",
            "description": "The HTTP status code generated by the origin server for this occurrence of the problem.\n",
            "format": "int32"
          },
          "detail": {
            "type": "string",
            "description": "A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.\n",
            "example": "A human readable explanation specific to this occurrence of the problem."
          }
        },
        "description": "RFC7807 Problem JSON object from https://opensource.zalando.com/restful-api-guidelines/models/problem-1.0.1.yaml without the standard 'type' and 'instance' fields.\n"
      },
      "AWSCredentialFields": {
        "required": [
          "access_key",
          "secret_access_key"
        ],
        "type": "object",
        "properties": {
          "access_key": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "secret_access_key": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "regions": {
            "type": "string",
            "format": "string",
            "example": "us-west-1, us-east-2"
          },
          "use_cross_account_org": {
            "type": "string",
            "format": "string",
            "example": "true"
          },
          "role": {
            "type": "string",
            "format": "string",
            "example": "runzero-role"
          }
        }
      },
      "AzureClientSecretCredentialFields": {
        "required": [
          "client_id",
          "client_secret",
          "environment",
          "tenant_id"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "client_secret": {
            "type": "string",
            "format": "string",
            "example": "abcde~abcdefghiklmnopqrstuvwx_yz123456-7"
          },
          "tenant_id": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "environment": {
            "type": "string",
            "format": "string",
            "example": "global",
            "enum": [
              "global",
              "gcc",
              "gcc_high",
              "dod"
            ]
          },
          "multi_subscription": {
            "type": "string",
            "format": "string",
            "example": "true"
          },
          "subscription_id": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          }
        }
      },
      "AzureUsernamePasswordCredentialFields": {
        "required": [
          "client_id",
          "password",
          "tenant_id",
          "username"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "tenant_id": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "username": {
            "type": "string",
            "format": "string",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          }
        }
      },
      "CensysCredentialFields": {
        "required": [
          "client_id",
          "client_secret"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "client_secret": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "api_url": {
            "type": "string",
            "format": "string",
            "example": "https://search.censys.io"
          }
        }
      },
      "Certificate": {
        "required": [
          "id",
          "organization_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "type": {
            "type": "string",
            "enum": [
              "x509",
              "ssh"
            ]
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "updated_at": {
            "type": "integer",
            "description": "When the certificate was last seen in a response from a service, and updated.",
            "format": "int64",
            "example": 1576300370
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "names": {
            "type": "array",
            "description": "An assembled list of all names in the certificate.",
            "items": {
              "type": "string",
              "example": "CN=server,OU=Dept,O=Company"
            }
          },
          "self_signed": {
            "type": "boolean",
            "description": "Whether the certificate appears to be self-signed based on subject and authority."
          },
          "hidden": {
            "type": "boolean",
            "description": "Whether the certificate has been hidden from the default certificates view."
          },
          "serial": {
            "type": "string",
            "description": "The serial number of the certificate.",
            "format": "string",
            "example": "03beffa48e31b95581b0ebb0b1b3fe5ada9c"
          },
          "validity_start": {
            "type": "integer",
            "description": "When the certificate becomes valid.",
            "format": "int64",
            "example": 1576300370
          },
          "validity_end": {
            "type": "integer",
            "description": "When the certificate ceases to be valid.",
            "format": "int64",
            "example": 1576300370
          },
          "public_key": {
            "type": "string",
            "format": "base64"
          },
          "public_key_bits": {
            "type": "integer",
            "format": "int32",
            "example": 2048
          },
          "public_key_algorithm": {
            "type": "string",
            "format": "string",
            "example": "rsaEncryption"
          },
          "signature": {
            "type": "string",
            "format": "base64"
          },
          "signature_algorithm": {
            "type": "string",
            "format": "string",
            "example": "sha256WithRSAEncryption"
          },
          "fp_bkhash": {
            "type": "string",
            "description": "The badkeys hash.",
            "format": "string"
          },
          "fp_sha1": {
            "type": "string",
            "description": "The SHA1 hash of the certificate.",
            "format": "string"
          },
          "fp_sha256": {
            "type": "string",
            "description": "The SHA256 hash of the certificate.",
            "format": "string"
          },
          "fp_md5": {
            "type": "string",
            "description": "The MD5 hash of the certificate (for SSH).",
            "format": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Certificate_attributes"
            },
            "description": "Properties specific to the certificate type."
          }
        }
      },
      "CrowdstrikeCredentialFields": {
        "required": [
          "api_url",
          "client_id",
          "client_secret"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "client_secret": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "api_url": {
            "type": "string",
            "format": "string",
            "example": "example.crowdstrike.com"
          }
        }
      },
      "CustomIntegrationScriptCredentialFields": {
        "required": [
          "access_key",
          "access_secret"
        ],
        "type": "object",
        "properties": {
          "access_key": {
            "type": "string",
            "format": "string"
          },
          "access_secret": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "Finding": {
        "required": [
          "id",
          "organization_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "category": {
            "type": "string",
            "format": "string"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "finding_code": {
            "type": "string",
            "description": "A runZero-assigned code for the finding."
          },
          "name": {
            "type": "string",
            "description": "The title of the finding."
          },
          "description": {
            "type": "string",
            "description": "Additional information about the finding."
          },
          "solution": {
            "type": "string",
            "description": "Remediation information."
          },
          "links": {
            "$ref": "#/components/schemas/Finding_links"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "last_detected_at": {
            "type": "integer",
            "format": "int64"
          },
          "vulnerability_count": {
            "type": "integer",
            "format": "int64"
          },
          "risk_score": {
            "minimum": 0,
            "type": "number",
            "format": "float64"
          },
          "risk_rank": {
            "maximum": 4,
            "minimum": 0,
            "type": "integer",
            "description": "0 = info, 4 = critical",
            "format": "int32"
          }
        }
      },
      "GCPCredentialFields": {
        "type": "object",
        "properties": {
          "cross_project": {
            "type": "string",
            "format": "string",
            "example": "false"
          },
          "auth_provider_x509_cert_url": {
            "type": "string",
            "format": "string",
            "example": "https://www.googleapis.com/oauth2/v1/certs"
          },
          "auth_uri": {
            "type": "string",
            "format": "string",
            "example": "https://accounts.google.com/o/oauth2/auth"
          },
          "client_email": {
            "type": "string",
            "format": "string",
            "example": "example@example.iam.gserviceaccount.com"
          },
          "client_id": {
            "type": "string",
            "format": "string",
            "example": "111111111111111111111"
          },
          "client_x509_cert_url": {
            "type": "string",
            "format": "string",
            "example": "https://www.googleapis.com/robot/v1/metadata/x509/example.iam.gserviceaccount.com"
          },
          "private_key": {
            "type": "string",
            "description": "base64 encoded private key, beginning with -----BEGIN PRIVATE KEY-----",
            "format": "string"
          },
          "private_key_id": {
            "type": "string",
            "format": "string",
            "example": "1111111111111111111111111111111111111111"
          },
          "project_id": {
            "type": "string",
            "format": "string",
            "example": "example"
          },
          "token_uri": {
            "type": "string",
            "format": "string",
            "example": "https://oauth2.googleapis.com/token"
          },
          "type": {
            "type": "string",
            "format": "string",
            "example": "service_account"
          },
          "universe_domain": {
            "type": "string",
            "format": "string",
            "example": "googleapis.com"
          }
        }
      },
      "GoogleWorkspaceCredentialFields": {
        "required": [
          "delegate"
        ],
        "type": "object",
        "properties": {
          "delegate": {
            "type": "string",
            "format": "string",
            "example": "adminexample@example.com"
          },
          "customer_id": {
            "type": "string",
            "format": "string"
          },
          "auth_provider_x509_cert_url": {
            "type": "string",
            "format": "string",
            "example": "https://www.googleapis.com/oauth2/v1/certs"
          },
          "auth_uri": {
            "type": "string",
            "format": "string",
            "example": "https://accounts.google.com/o/oauth2/auth"
          },
          "client_email": {
            "type": "string",
            "format": "string",
            "example": "example@example.iam.gserviceaccount.com"
          },
          "client_id": {
            "type": "string",
            "format": "string",
            "example": "111111111111111111111"
          },
          "client_x509_cert_url": {
            "type": "string",
            "format": "string",
            "example": "https://www.googleapis.com/robot/v1/metadata/x509/example.iam.gserviceaccount.com"
          },
          "private_key": {
            "type": "string",
            "description": "base64 encoded private key, beginning with -----BEGIN PRIVATE KEY-----",
            "format": "string"
          },
          "private_key_id": {
            "type": "string",
            "format": "string",
            "example": "1111111111111111111111111111111111111111"
          },
          "project_id": {
            "type": "string",
            "format": "string",
            "example": "example"
          },
          "token_uri": {
            "type": "string",
            "format": "string",
            "example": "https://oauth2.googleapis.com/token"
          },
          "type": {
            "type": "string",
            "format": "string",
            "example": "service_account"
          },
          "universe_domain": {
            "type": "string",
            "format": "string",
            "example": "googleapis.com"
          }
        }
      },
      "InsightVMCredentialFields": {
        "required": [
          "api_url",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "api_url": {
            "type": "string",
            "format": "string",
            "example": "https://ivm.example:3780"
          },
          "username": {
            "type": "string",
            "format": "string",
            "example": "admin"
          },
          "password": {
            "type": "string",
            "format": "string",
            "example": "pass"
          },
          "insecure": {
            "type": "string",
            "format": "string",
            "example": "true"
          },
          "thumbprints": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "LDAPCredentialFields": {
        "required": [
          "base_dn",
          "password",
          "url",
          "username"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "string",
            "example": "ldap://example.com:389"
          },
          "username": {
            "type": "string",
            "format": "string",
            "example": "admin"
          },
          "password": {
            "type": "string",
            "format": "string",
            "example": "pass"
          },
          "base_dn": {
            "type": "string",
            "format": "string",
            "example": "dc=example,dc=com"
          },
          "insecure": {
            "type": "string",
            "format": "string",
            "example": "true"
          },
          "legacy_tls": {
            "type": "string",
            "format": "string",
            "example": "false"
          },
          "thumbprints": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "MECMCredentialFields": {
        "required": [
          "db_connection_string"
        ],
        "type": "object",
        "properties": {
          "db_connection_string": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "MirakiCredentialFields": {
        "required": [
          "api_key",
          "api_url"
        ],
        "type": "object",
        "properties": {
          "api_url": {
            "type": "string",
            "format": "string"
          },
          "api_key": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "MiradoreCredentialFields": {
        "required": [
          "api_key",
          "hostname"
        ],
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "format": "string",
            "example": "yourcompanyinc.online.miradore.com"
          },
          "api_key": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          }
        }
      },
      "NessusCredentialFields": {
        "required": [
          "access_key",
          "api_url",
          "secret_key"
        ],
        "type": "object",
        "properties": {
          "api_url": {
            "type": "string",
            "format": "string"
          },
          "access_key": {
            "type": "string",
            "format": "string"
          },
          "secret_key": {
            "type": "string",
            "format": "string"
          },
          "insecure": {
            "type": "string",
            "format": "string",
            "example": "false"
          },
          "thumbprints": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "NetboxCredentialFields": {
        "required": [
          "api_key",
          "api_url"
        ],
        "type": "object",
        "properties": {
          "api_url": {
            "type": "string",
            "format": "string"
          },
          "api_key": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "PaloAltoFirewallCredentialFields": {
        "required": [
          "api_key"
        ],
        "type": "object",
        "properties": {
          "api_key": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "QualysCredentialFields": {
        "required": [
          "api_url",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "api_url": {
            "type": "string",
            "format": "string"
          },
          "username": {
            "type": "string",
            "format": "string"
          },
          "password": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "SentinelOneCredentialFields": {
        "required": [
          "api_key",
          "api_url"
        ],
        "type": "object",
        "properties": {
          "api_url": {
            "type": "string",
            "format": "string"
          },
          "api_key": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "ShodanCredentialFields": {
        "required": [
          "api_key"
        ],
        "type": "object",
        "properties": {
          "api_key": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "SNMPv2CommunitiesCredentialFields": {
        "required": [
          "community"
        ],
        "type": "object",
        "properties": {
          "community": {
            "type": "string",
            "format": "string",
            "example": "public,private"
          }
        }
      },
      "SNMPv3CredentialFields": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "format": "string",
            "example": "user"
          },
          "context": {
            "type": "string",
            "format": "string",
            "example": "vlan-32"
          },
          "auth-protocol": {
            "type": "string",
            "format": "string",
            "example": "sha"
          },
          "auth-passphrase": {
            "type": "string",
            "format": "string",
            "example": "authpass"
          },
          "privacy-protocol": {
            "type": "string",
            "format": "string",
            "example": "aes"
          },
          "privacy-passphrase": {
            "type": "string",
            "format": "string",
            "example": "privpass"
          }
        }
      },
      "TaniumCredentialFields": {
        "required": [
          "api_token",
          "api_url"
        ],
        "type": "object",
        "properties": {
          "api_url": {
            "type": "string",
            "format": "string"
          },
          "api_token": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "TenableIoCredentialFields": {
        "required": [
          "access_key",
          "api_url",
          "secret_key"
        ],
        "type": "object",
        "properties": {
          "api_url": {
            "type": "string",
            "format": "string"
          },
          "access_key": {
            "type": "string",
            "format": "string"
          },
          "secret_key": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "TenableScCredentialFields": {
        "required": [
          "access_key",
          "api_url",
          "secret_key"
        ],
        "type": "object",
        "properties": {
          "api_url": {
            "type": "string",
            "format": "string"
          },
          "access_key": {
            "type": "string",
            "format": "string"
          },
          "secret_key": {
            "type": "string",
            "format": "string"
          },
          "insecure": {
            "type": "string",
            "format": "string",
            "example": "false"
          },
          "thumbprints": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "VMwareCredentialFields": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "format": "string",
            "example": "user"
          },
          "password": {
            "type": "string",
            "format": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "insecure": {
            "type": "string",
            "format": "string",
            "example": "true"
          },
          "thumbprints": {
            "type": "string",
            "format": "string",
            "example": "IP=SHA256:B64HASH"
          }
        }
      },
      "WizCredentialFields": {
        "required": [
          "api_url",
          "auth_url",
          "client_id",
          "client_secret"
        ],
        "type": "object",
        "properties": {
          "auth_url": {
            "type": "string",
            "format": "string",
            "example": "https://auth.app.wiz.io/"
          },
          "api_url": {
            "type": "string",
            "format": "string"
          },
          "client_id": {
            "type": "string",
            "format": "string"
          },
          "client_secret": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "X509CredentialFields": {
        "required": [
          "private_key",
          "x509_certificate"
        ],
        "type": "object",
        "properties": {
          "x509_certificate": {
            "type": "string",
            "format": "string"
          },
          "private_key": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "ComponentVersion": {
        "required": [
          "id",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "string",
            "example": "agent"
          },
          "version": {
            "type": "string",
            "format": "string",
            "example": "1.0.0"
          }
        },
        "description": "A component ID and version"
      },
      "HealthCheckResponse": {
        "required": [
          "status",
          "version"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "format": "string",
            "example": "ok"
          },
          "version": {
            "type": "string",
            "format": "string",
            "example": "3.0.0"
          }
        },
        "description": "A health check response and version"
      },
      "URL": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "url",
            "example": "https://www.runzero.com/docs/"
          }
        },
        "description": "A URL to a resource"
      },
      "SampleOptions": {
        "required": [
          "interfaces"
        ],
        "type": "object",
        "properties": {
          "explorer": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "agent": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "targets": {
            "type": "string",
            "example": "10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"
          },
          "excludes": {
            "type": "string"
          },
          "tags": {
            "type": "string",
            "example": "owner=IT location=Texas"
          },
          "interfaces": {
            "type": "string",
            "example": "eth0,wlan0"
          }
        },
        "description": "Options which can be set to create or modify traffic sampling."
      },
      "ScanOptions": {
        "required": [
          "targets"
        ],
        "type": "object",
        "properties": {
          "targets": {
            "type": "string",
            "example": "defaults"
          },
          "excludes": {
            "type": "string"
          },
          "scan-name": {
            "type": "string",
            "example": "My Scan"
          },
          "scan-description": {
            "type": "string",
            "description": "A description of the scan.",
            "example": "Scan of Wireless"
          },
          "scan-template": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "scan-frequency": {
            "type": "string",
            "description": "A string time duration value representing execution frequency, if scheduled to repeat.",
            "example": "hourly",
            "enum": [
              "once",
              "hourly",
              "daily",
              "weekly",
              "monthly",
              "continuous"
            ]
          },
          "scan-start": {
            "type": "string",
            "description": "Unix timestamp value indicating when the template was created.",
            "example": "0"
          },
          "scan-tags": {
            "type": "string",
            "example": "owner=IT location=Texas"
          },
          "scan-grace-period": {
            "type": "string",
            "example": "4"
          },
          "agent": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "explorer": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "hosted-zone-id": {
            "type": "string",
            "description": "The string 'auto' will use any available hosted zone. Otherwise, provide the string name (hostedzone1) or UUID (\"e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8\") of a hosted zone.",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "hosted-zone-name": {
            "type": "string",
            "description": "The string 'auto' will use any available hosted zone. Otherwise, provide the string name (hostedzone1) of the hosted zone.",
            "example": "auto"
          },
          "rate": {
            "type": "string",
            "example": "10000"
          },
          "max-host-rate": {
            "type": "string",
            "example": "100"
          },
          "passes": {
            "type": "string",
            "example": "3"
          },
          "max-attempts": {
            "type": "string",
            "example": "3"
          },
          "max-sockets": {
            "type": "string",
            "example": "500"
          },
          "max-group-size": {
            "type": "string",
            "example": "4096"
          },
          "max-ttl": {
            "type": "string",
            "example": "255"
          },
          "tos": {
            "type": "string",
            "example": "255"
          },
          "tcp-ports": {
            "type": "string",
            "example": "1-1000,5000-6000"
          },
          "tcp-excludes": {
            "type": "string",
            "example": "9500"
          },
          "screenshots": {
            "type": "string",
            "example": "true"
          },
          "nameservers": {
            "type": "string",
            "example": "8.8.8.8"
          },
          "subnet-ping": {
            "type": "string",
            "example": "true"
          },
          "subnet-ping-net-size": {
            "type": "string",
            "example": "256"
          },
          "subnet-ping-probes": {
            "type": "string",
            "description": "Optional subnet ping probe list as comma separated strings. The example shows possibilities.",
            "example": "arp, echo, syn, connect, netbios, snmp, ntp, sunrpc, ike, openvpn, mdns"
          },
          "subnet-ping-sample-rate": {
            "type": "string",
            "example": "3"
          },
          "host-ping": {
            "type": "string",
            "example": "false"
          },
          "host-ping-probes": {
            "type": "string",
            "description": "Optional host ping probe list as comma separated strings. The example shows possibilities.",
            "example": "arp, echo, syn, connect, netbios, snmp, ntp, sunrpc, ike, openvpn, mdns"
          },
          "probes": {
            "type": "string",
            "description": "Optional probe list, otherwise all probes are used",
            "example": "arp,bacnet,connect,dns,echo,ike,ipmi,mdns,memcache,mssql,natpmp,netbios,pca,rdns,rpcbind,sip,snmp,ssdp,syn,ubnt,wlan-list,wsd"
          }
        },
        "description": "Options which can be set to create or modify a scan."
      },
      "ScanTemplateOptions": {
        "required": [
          "acl",
          "global",
          "name",
          "organization_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the template.",
            "example": "My Scan Template"
          },
          "description": {
            "type": "string",
            "description": "Description of the template.",
            "example": "My Scan Template"
          },
          "organization_id": {
            "type": "string",
            "description": "The ID of the organization the template will be created in",
            "format": "uuid",
            "example": "f6cfb91a-52ea-4a86-bf9a-5a891a26f52b",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A number of scan parameter values. Currently there is no authoritative list of acceptable values. See existing templates for examples."
          },
          "global": {
            "type": "boolean",
            "description": "Whether the template is globally available to all organizations.",
            "example": false
          },
          "acl": {
            "type": "object",
            "additionalProperties": true,
            "description": "A map of IDs to strings which describe how the template may be accessed. Currently there is no authoritative list of acceptable values. See existing templates for examples.",
            "example": {
              "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8": "user"
            }
          }
        },
        "description": "Options which can be set to create a scan template."
      },
      "ScanTemplate": {
        "required": [
          "acl",
          "global",
          "id",
          "organization_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the template.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the template.",
            "example": "My Scan Template"
          },
          "description": {
            "type": "string",
            "description": "The description of the template.",
            "example": "My Scan Template"
          },
          "client_id": {
            "type": "string",
            "description": "ID of the account which owns the template.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "organization_id": {
            "type": "string",
            "description": "ID of the organization the template is available in.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "agent_id": {
            "type": "string",
            "description": "ID of the explorer which may execute the template.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "site_id": {
            "type": "string",
            "description": "ID of the site the template is being used in.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "cruncher_id": {
            "type": "string",
            "description": "ID of the runZero cruncher the task is executing on.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "created_at": {
            "type": "integer",
            "description": "Unix timestamp value indicating when the template was created.",
            "format": "int64",
            "example": 1576300370
          },
          "created_by": {
            "type": "string",
            "description": "The username of the account which created the template.",
            "example": "user@example.com"
          },
          "created_by_user_id": {
            "type": "string",
            "description": "The ID of the account which created the template.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "updated_at": {
            "type": "integer",
            "description": "Unix timestamp value indicating when the template was last modified.",
            "format": "int64",
            "example": 1576300370
          },
          "type": {
            "type": "string",
            "description": "The type of task the template creates.",
            "example": "scan"
          },
          "status": {
            "type": "string",
            "description": "The status of the last task using the template.",
            "example": "processed"
          },
          "error": {
            "type": "string",
            "description": "The error message, if any, of the last task using the template.",
            "example": "agent unavailable"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A number of task parameter values. Currently there is no authoritative list of in-use values. See existing templates for examples."
          },
          "stats": {
            "type": "object",
            "additionalProperties": true,
            "description": "A map of statistics about the last task executed with the template. Currently there is no authoritative list of in-use values. See existing templates for examples."
          },
          "hidden": {
            "type": "boolean",
            "description": "A flag indicating whether the item is hidden from common view.",
            "example": false
          },
          "parent_id": {
            "type": "string",
            "description": "The ID of the parent entity of the task scheduled.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "recur": {
            "type": "boolean",
            "description": "A flag representing whether derived tasks are scheduled to repeat.",
            "example": false
          },
          "recur_frequency": {
            "type": "string",
            "description": "A string time duration value representing execution frequency, if scheduled to repeat. You may use\nvalues including as once, hourly, daily, weekly, monthly, continuous\n",
            "example": "hourly"
          },
          "start_time": {
            "type": "integer",
            "description": "Unix timestamp representing the next execution time.",
            "format": "int64",
            "example": 1576300370
          },
          "recur_last": {
            "type": "integer",
            "description": "Unix timestamp representing the last execution if scheduled to repeat.",
            "format": "int64",
            "example": 1576300370
          },
          "recur_next": {
            "type": "integer",
            "description": "Unix timestamp representing the next execution if scheduled to repeat.",
            "format": "int64",
            "example": 1576300370
          },
          "recur_last_task_id": {
            "type": "string",
            "description": "The ID of the task that last executed if scheduled to repeat.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "grace_period": {
            "type": "string",
            "description": "Additional time beyond hard expiration deadline by which the task may still be allowed to execute.",
            "example": "4"
          },
          "custom_integration_id": {
            "type": "string",
            "description": "The ID of the custom integration source, if the last task executed with this template was an import of Asset Data.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "source_id": {
            "type": "string",
            "description": "The numeric ID of the data source, if the task executed with this template is a runZero scan or third party data connection import.",
            "example": "1"
          },
          "template_id": {
            "type": "string",
            "description": "The ID of the template.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "size_site": {
            "type": "integer",
            "description": "The size in assets of the site the last task the template was executed against.",
            "format": "int64",
            "example": 0
          },
          "size_data": {
            "type": "integer",
            "description": "The total size of result data of the last task the template was used with.",
            "format": "int64",
            "example": 0
          },
          "size_results": {
            "type": "integer",
            "description": "The number of results in the last task the template was used with.",
            "format": "int64",
            "example": 0
          },
          "hosted_zone_id": {
            "type": "string",
            "description": "The ID of the hosted zone that ran the last task the template was used with.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "linked_task_count": {
            "type": "integer",
            "description": "The number of tasks derived from the template.",
            "format": "int32",
            "example": 1
          },
          "global": {
            "type": "boolean",
            "description": "Whether the template is globally available to all organizations.",
            "example": false
          },
          "acl": {
            "type": "object",
            "additionalProperties": true,
            "description": "A map of IDs to strings which describe how the template may be accessed. Currently there is no authoritative list of in-use values. See existing templates for examples.",
            "example": {
              "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8": "user"
            }
          }
        },
        "description": "A scan task template"
      },
      "AgentSiteID": {
        "required": [
          "site_id"
        ],
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          }
        }
      },
      "Explorer": {
        "$ref": "#/components/schemas/Agent"
      },
      "ExplorerSiteID": {
        "$ref": "#/components/schemas/AgentSiteID"
      },
      "OrgOptions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "My Organization"
          },
          "description": {
            "type": "string",
            "example": "Wobbly Widgets, Inc."
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "expiration_assets_stale": {
            "type": "string",
            "format": "number",
            "example": "365"
          },
          "expiration_assets_offline": {
            "type": "string",
            "format": "number",
            "example": "365"
          },
          "expiration_integration_attributes": {
            "type": "string",
            "format": "number",
            "example": "365"
          },
          "expiration_scans": {
            "type": "string",
            "format": "number",
            "example": "365"
          },
          "expiration_vulnerabilities": {
            "type": "string",
            "format": "number",
            "example": "365"
          },
          "keep_latest_integration_attributes": {
            "type": "string",
            "example": "true"
          }
        }
      },
      "SiteOptions": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "New Site"
          },
          "description": {
            "type": "string",
            "example": "County Office"
          },
          "scope": {
            "type": "string",
            "example": "192.168.10.0/24"
          },
          "excludes": {
            "type": "string",
            "example": "192.168.10.1"
          },
          "subnets": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "CredentialFields": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AWSCredentialFields"
          },
          {
            "$ref": "#/components/schemas/AzureClientSecretCredentialFields"
          },
          {
            "$ref": "#/components/schemas/AzureUsernamePasswordCredentialFields"
          },
          {
            "$ref": "#/components/schemas/CensysCredentialFields"
          },
          {
            "$ref": "#/components/schemas/CrowdstrikeCredentialFields"
          },
          {
            "$ref": "#/components/schemas/CustomIntegrationScriptCredentialFields"
          },
          {
            "$ref": "#/components/schemas/GCPCredentialFields"
          },
          {
            "$ref": "#/components/schemas/GoogleWorkspaceCredentialFields"
          },
          {
            "$ref": "#/components/schemas/InsightVMCredentialFields"
          },
          {
            "$ref": "#/components/schemas/LDAPCredentialFields"
          },
          {
            "$ref": "#/components/schemas/MECMCredentialFields"
          },
          {
            "$ref": "#/components/schemas/MirakiCredentialFields"
          },
          {
            "$ref": "#/components/schemas/MiradoreCredentialFields"
          },
          {
            "$ref": "#/components/schemas/NessusCredentialFields"
          },
          {
            "$ref": "#/components/schemas/NetboxCredentialFields"
          },
          {
            "$ref": "#/components/schemas/PaloAltoFirewallCredentialFields"
          },
          {
            "$ref": "#/components/schemas/QualysCredentialFields"
          },
          {
            "$ref": "#/components/schemas/SentinelOneCredentialFields"
          },
          {
            "$ref": "#/components/schemas/ShodanCredentialFields"
          },
          {
            "$ref": "#/components/schemas/SNMPv2CommunitiesCredentialFields"
          },
          {
            "$ref": "#/components/schemas/SNMPv3CredentialFields"
          },
          {
            "$ref": "#/components/schemas/TaniumCredentialFields"
          },
          {
            "$ref": "#/components/schemas/TenableIoCredentialFields"
          },
          {
            "$ref": "#/components/schemas/TenableScCredentialFields"
          },
          {
            "$ref": "#/components/schemas/VMwareCredentialFields"
          },
          {
            "$ref": "#/components/schemas/WizCredentialFields"
          },
          {
            "$ref": "#/components/schemas/X509CredentialFields"
          }
        ]
      },
      "CredentialOptions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "credentials_name"
          },
          "type": {
            "type": "string",
            "example": "miradore_api_key_v1",
            "enum": [
              "aws_access_secret",
              "azure_client_secret",
              "azure_username_password",
              "censys_search_api_key",
              "crowdstrike_api_key",
              "custom_integration_credential",
              "gcp_service_account_key",
              "google_workspace_client_secret",
              "insightvm_username_password",
              "ldap_username_password",
              "mecm_db_connection_string",
              "meraki_api_key",
              "miradore_api_key_v1",
              "nessus_access_secret",
              "netbox_api_key",
              "palo_alto_api_key",
              "qualys_username_password",
              "sentinelone_api_key",
              "shodan_api_key",
              "snmpv2_community",
              "snmpv3_credential",
              "tanium_api_token",
              "tenable_access_secret",
              "tenable_security_center_access_secret",
              "vmware_username_password",
              "wiz_client_secret",
              "x509_keypair"
            ]
          },
          "acl": {
            "type": "object",
            "additionalProperties": true,
            "example": {
              "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8": "user",
              "e77602e0-3fb8-4734-aef9-fbc6fdcb0fe9": "none"
            }
          },
          "global": {
            "type": "boolean",
            "example": false
          },
          "cidrs": {
            "type": "string",
            "example": "10.0.0.17/32, 192.168.1.0/24"
          },
          "secret": {
            "$ref": "#/components/schemas/CredentialFields"
          }
        }
      },
      "APIKeyOptions": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "example": "Splunk integration key"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          }
        }
      },
      "ExportTokenOptions": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "example": "Splunk export key"
          }
        }
      },
      "AssetsWithCheckpoint": {
        "required": [
          "assets",
          "since"
        ],
        "type": "object",
        "properties": {
          "since": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          }
        }
      },
      "AssetComments": {
        "required": [
          "comments"
        ],
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "example": "Sales Laptop"
          }
        }
      },
      "AssetTags": {
        "required": [
          "tags"
        ],
        "type": "object",
        "properties": {
          "tags": {
            "type": "string",
            "example": "ThisTag=Value -OldTag"
          }
        }
      },
      "AssetCriticality": {
        "required": [
          "criticality"
        ],
        "type": "object",
        "properties": {
          "criticality": {
            "type": "string",
            "example": "high"
          }
        }
      },
      "AssetIDs": {
        "required": [
          "asset_ids"
        ],
        "type": "object",
        "properties": {
          "asset_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "453C191F-644E-4EA8-9727-0E81E5275C35"
            }
          }
        }
      },
      "AssetTagsWithSearch": {
        "required": [
          "search",
          "tags"
        ],
        "type": "object",
        "properties": {
          "tags": {
            "type": "string",
            "example": "ThisTag=Value -OldTag"
          },
          "search": {
            "type": "string",
            "example": "alive:true and os:windows"
          }
        }
      },
      "AssetCriticalityWithSearch": {
        "required": [
          "criticality",
          "search"
        ],
        "type": "object",
        "properties": {
          "criticality": {
            "type": "string",
            "example": "high"
          },
          "search": {
            "type": "string",
            "example": "alive:true and os:windows"
          }
        }
      },
      "Search": {
        "required": [
          "search"
        ],
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "example": "alive:true and os:windows"
          }
        }
      },
      "Asset": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "site_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "scanned": {
            "type": "boolean",
            "example": true
          },
          "alive": {
            "type": "boolean",
            "example": true
          },
          "first_seen": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "last_seen": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "detected_by": {
            "type": "string",
            "example": "icmp"
          },
          "type": {
            "type": "string",
            "example": "Server"
          },
          "os": {
            "type": "string",
            "example": "Ubuntu Linux"
          },
          "os_version": {
            "type": "string",
            "example": "18.04"
          },
          "hw": {
            "type": "string",
            "example": "Dell PowerEdge 2500"
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "192.168.0.1",
              "oneOf": [
                {
                  "format": "ipv4"
                },
                {
                  "format": "ipv6"
                }
              ]
            }
          },
          "addresses_extra": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "192.168.100.1",
              "oneOf": [
                {
                  "format": "ipv4"
                },
                {
                  "format": "ipv6"
                }
              ]
            }
          },
          "macs": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mac",
              "example": "11:22:33:44:55:66"
            }
          },
          "mac_vendors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Dell"
            }
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www"
            }
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www"
            }
          },
          "service_count": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "service_count_tcp": {
            "type": "integer",
            "format": "int64",
            "example": 7
          },
          "service_count_udp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "service_count_arp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "service_count_icmp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "lowest_ttl": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "lowest_rtt": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "last_agent_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "last_task_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "newest_mac": {
            "type": "string",
            "format": "mac",
            "example": "11:22:33:44:55:66"
          },
          "newest_mac_vendor": {
            "type": "string",
            "example": "Intel Corporate"
          },
          "newest_mac_age": {
            "type": "integer",
            "format": "int64",
            "example": 1304035200000000000
          },
          "comments": {
            "type": "string",
            "example": "File Server"
          },
          "service_ports_tcp": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "port",
              "example": "22"
            }
          },
          "service_ports_udp": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "port",
              "example": "53"
            }
          },
          "service_protocols": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "ssh"
            }
          },
          "service_products": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "bind"
            }
          },
          "org_name": {
            "type": "string",
            "example": "Test Labs"
          },
          "site_name": {
            "type": "string",
            "example": "Primary"
          },
          "agent_name": {
            "type": "string",
            "example": "LAPTOP-F4P1R6"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "services": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "rtts": {
            "type": "object",
            "additionalProperties": true
          },
          "risk_rank": {
            "maximum": 4,
            "minimum": -1,
            "type": "number",
            "description": "-1 = none, 0 = info, 4 = critical",
            "format": "int32"
          },
          "risk": {
            "type": "string",
            "format": "string",
            "example": "critical"
          },
          "credentials": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "vulnerability_count": {
            "type": "number",
            "format": "int64"
          },
          "finding_count": {
            "type": "number",
            "format": "int64"
          },
          "eol_os": {
            "type": "number",
            "description": "OS main EOL date",
            "format": "int64"
          },
          "eol_os_ext": {
            "type": "number",
            "description": "OS extended support EOL date",
            "format": "int64"
          },
          "sources": {
            "type": "array",
            "description": "Sources used for asset data",
            "items": {
              "type": "string",
              "format": "string"
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Service": {
        "required": [
          "id",
          "service_id"
        ],
        "type": "object",
        "properties": {
          "service_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "service_asset_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "service_created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "service_updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "service_address": {
            "type": "string",
            "example": "192.168.0.1",
            "oneOf": [
              {
                "format": "ipv4"
              },
              {
                "format": "ipv6"
              }
            ]
          },
          "service_transport": {
            "type": "string",
            "example": "tcp"
          },
          "service_vhost": {
            "type": "string",
            "example": "www"
          },
          "service_port": {
            "type": "string",
            "format": "port",
            "example": "80"
          },
          "service_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "service_protocol": {
            "type": "string",
            "example": "http tls"
          },
          "service_summary": {
            "type": "string",
            "example": "Login Page"
          },
          "service_screenshot_link": {
            "type": "string"
          },
          "service_link": {
            "type": "string",
            "example": "http://192.168.0.1:80/"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "site_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "alive": {
            "type": "boolean",
            "example": true
          },
          "first_seen": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "last_seen": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "detected_by": {
            "type": "string",
            "example": "icmp"
          },
          "type": {
            "type": "string",
            "example": "Server"
          },
          "os": {
            "type": "string",
            "example": "Ubuntu Linux"
          },
          "os_version": {
            "type": "string",
            "example": "18.04"
          },
          "hw": {
            "type": "string",
            "example": "Dell PowerEdge 2500"
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "192.168.0.1",
              "oneOf": [
                {
                  "format": "ipv4"
                },
                {
                  "format": "ipv6"
                }
              ]
            }
          },
          "addresses_extra": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "192.168.100.1",
              "oneOf": [
                {
                  "format": "ipv4"
                },
                {
                  "format": "ipv6"
                }
              ]
            }
          },
          "macs": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mac",
              "example": "11:22:33:44:55:66"
            }
          },
          "mac_vendors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Dell"
            }
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www"
            }
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "CORPNET"
            }
          },
          "service_count": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "service_count_tcp": {
            "type": "integer",
            "format": "int64",
            "example": 7
          },
          "service_count_udp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "service_count_arp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "service_count_icmp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "lowest_ttl": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "lowest_rtt": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "last_agent_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "last_task_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "newest_mac": {
            "type": "string",
            "format": "mac",
            "example": "11:22:33:44:55:66"
          },
          "newest_mac_vendor": {
            "type": "string",
            "example": "Intel Corporate"
          },
          "newest_mac_age": {
            "type": "integer",
            "format": "int64",
            "example": 1304035200000000000
          },
          "comments": {
            "type": "string",
            "example": "File Server"
          },
          "service_ports_tcp": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "port",
              "example": "22"
            }
          },
          "service_ports_udp": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "port",
              "example": "53"
            }
          },
          "service_ports_protocols": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "ssh"
            }
          },
          "service_ports_products": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "bind"
            }
          },
          "org_name": {
            "type": "string",
            "example": "Test Labs"
          },
          "site_name": {
            "type": "string",
            "example": "Primary"
          },
          "agent_name": {
            "type": "string",
            "example": "LAPTOP-F4P1R6"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "services": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "rtts": {
            "type": "object",
            "additionalProperties": true
          },
          "credentials": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Site": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "name": {
            "type": "string",
            "example": "Primary"
          },
          "description": {
            "type": "string",
            "example": "Headquarters"
          },
          "scope": {
            "type": "string",
            "example": "192.168.0.0/24"
          },
          "excludes": {
            "type": "string",
            "example": "192.168.0.5"
          },
          "subnets": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "Wireless": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "last_seen": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "site_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "last_agent_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "last_task_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "essid": {
            "type": "string",
            "format": "uuid"
          },
          "bssid": {
            "type": "string",
            "format": "mac",
            "example": "11:22:33:44:55:66"
          },
          "type": {
            "type": "string",
            "example": "infrastructure"
          },
          "authentication": {
            "type": "string",
            "example": "wpa2-psk"
          },
          "encryption": {
            "type": "string",
            "example": "aes"
          },
          "signal": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "example": 99
          },
          "channels": {
            "type": "string",
            "example": "11, 158+1"
          },
          "interface": {
            "type": "string",
            "example": "wlan0"
          },
          "vendor": {
            "type": "string",
            "example": "Ubiquiti Networks"
          },
          "family": {
            "type": "string",
            "example": "223344"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "org_name": {
            "type": "string",
            "example": "Test Labs"
          },
          "site_name": {
            "type": "string",
            "example": "Primary"
          },
          "agent_name": {
            "type": "string",
            "example": "LAPTOP-F4P1R6"
          }
        }
      },
      "Software": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "software_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "software_asset_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "software_organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "software_source_id": {
            "type": "integer",
            "example": 1
          },
          "software_created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "software_updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "software_service_address": {
            "type": "string",
            "example": "192.168.0.1",
            "oneOf": [
              {
                "format": "ipv4"
              },
              {
                "format": "ipv6"
              }
            ]
          },
          "software_service_transport": {
            "type": "string",
            "example": "tcp"
          },
          "software_service_port": {
            "type": "integer",
            "format": "int64",
            "example": 80
          },
          "software_installed_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "software_installed_size": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "software_installed_from": {
            "type": "string"
          },
          "software_app_id": {
            "type": "string"
          },
          "software_part": {
            "type": "string",
            "example": "a"
          },
          "software_vendor": {
            "type": "string",
            "example": "OpenBSD"
          },
          "software_product": {
            "type": "string",
            "example": "OpenSSH"
          },
          "software_version": {
            "type": "string",
            "example": "8.3p1"
          },
          "software_update": {
            "type": "string"
          },
          "software_edition": {
            "type": "string"
          },
          "software_language": {
            "type": "string"
          },
          "software_sw_edition": {
            "type": "string"
          },
          "software_target_sw": {
            "type": "string"
          },
          "software_target_hw": {
            "type": "string"
          },
          "software_other": {
            "type": "string"
          },
          "software_cpe23": {
            "type": "string",
            "example": "cpe:/a:openbsd:openssh:8.2"
          },
          "software_attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Vulnerability": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "vulnerability_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "vulnerability_asset_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "vulnerability_organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "vulnerability_source_id": {
            "type": "integer",
            "example": 1
          },
          "vulnerability_created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "vulnerability_updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "vulnerability_service_address": {
            "type": "string",
            "example": "192.168.0.1",
            "oneOf": [
              {
                "format": "ipv4"
              },
              {
                "format": "ipv6"
              }
            ]
          },
          "vulnerability_service_transport": {
            "type": "string",
            "example": "tcp"
          },
          "vulnerability_service_port": {
            "type": "integer",
            "format": "int64",
            "example": 80
          },
          "vulnerability_cpe23": {
            "type": "string",
            "example": "cpe:/o:cisco:ios"
          },
          "vulnerability_vuln_id": {
            "type": "string",
            "example": "103565"
          },
          "vulnerability_category": {
            "type": "string",
            "example": "Remote"
          },
          "vulnerability_name": {
            "type": "string",
            "example": "Cisco IOS Software DHCP Remote Code Execution Vulnerability"
          },
          "vulnerability_description": {
            "type": "string",
            "example": "The remote device is missing a vendor-supplied security patch."
          },
          "vulnerability_solution": {
            "type": "string",
            "example": "Upgrade to the relevant fixed version referenced in Cisco bug ID(s) CSCsm45390 and CSCuw77959."
          },
          "vulnerability_cve": {
            "type": "string",
            "example": "CVE-2017-12240"
          },
          "vulnerability_cvss2_base_score": {
            "type": "number",
            "format": "double",
            "example": 10
          },
          "vulnerability_cvss2_temporal_score": {
            "type": "number",
            "format": "double",
            "example": 8.7
          },
          "vulnerability_cvss3_base_score": {
            "type": "number",
            "format": "double",
            "example": 9.8
          },
          "vulnerability_cvss3_temporal_score": {
            "type": "number",
            "format": "double",
            "example": 9.4
          },
          "vulnerability_severity": {
            "type": "string",
            "example": "Critical"
          },
          "vulnerability_severity_score": {
            "type": "number",
            "format": "double",
            "example": 10
          },
          "vulnerability_risk": {
            "type": "string",
            "example": "High"
          },
          "vulnerability_risk_score": {
            "type": "number",
            "format": "double",
            "example": 7.4
          },
          "vulnerability_published_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "vulnerability_first_detected_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "vulnerability_last_detected_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "vulnerability_attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "site_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "alive": {
            "type": "boolean",
            "example": true
          },
          "first_seen": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "last_seen": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "detected_by": {
            "type": "string",
            "example": "icmp"
          },
          "type": {
            "type": "string",
            "example": "Server"
          },
          "os": {
            "type": "string",
            "example": "Ubuntu Linux"
          },
          "os_version": {
            "type": "string",
            "example": "18.04"
          },
          "hw": {
            "type": "string",
            "example": "Dell PowerEdge 2500"
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "192.168.0.1",
              "oneOf": [
                {
                  "format": "ipv4"
                },
                {
                  "format": "ipv6"
                }
              ]
            }
          },
          "addresses_extra": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "192.168.100.1",
              "oneOf": [
                {
                  "format": "ipv4"
                },
                {
                  "format": "ipv6"
                }
              ]
            }
          },
          "macs": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mac",
              "example": "11:22:33:44:55:66"
            }
          },
          "mac_vendors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Dell"
            }
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www"
            }
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "www"
            }
          },
          "service_count": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "service_count_tcp": {
            "type": "integer",
            "format": "int64",
            "example": 7
          },
          "service_count_udp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "service_count_arp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "service_count_icmp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "lowest_ttl": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "lowest_rtt": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "last_agent_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "last_task_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "newest_mac": {
            "type": "string",
            "format": "mac",
            "example": "11:22:33:44:55:66"
          },
          "newest_mac_vendor": {
            "type": "string",
            "example": "Intel Corporate"
          },
          "newest_mac_age": {
            "type": "integer",
            "format": "int64",
            "example": 1304035200000000000
          },
          "comments": {
            "type": "string",
            "example": "File Server"
          },
          "service_ports_tcp": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "port",
              "example": "22"
            }
          },
          "service_ports_udp": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "port",
              "example": "53"
            }
          },
          "service_ports_protocols": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "ssh"
            }
          },
          "service_ports_products": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "bind"
            }
          },
          "org_name": {
            "type": "string",
            "example": "Test Labs"
          },
          "site_name": {
            "type": "string",
            "example": "Primary"
          },
          "agent_name": {
            "type": "string",
            "example": "LAPTOP-F4P1R6"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "services": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "rtts": {
            "type": "object",
            "additionalProperties": true
          },
          "credentials": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "DirectoryUser": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "directory_user_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "directory_user_organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "directory_user_site_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "directory_user_source_id": {
            "type": "integer",
            "example": 1
          },
          "directory_user_created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "directory_user_updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "directory_user_user_id": {
            "type": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "directory_user_group_ids": {
            "type": "array",
            "example": [
              "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
              "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
            ],
            "items": {
              "type": "string"
            }
          },
          "directory_user_display_name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "directory_user_name": {
            "type": "string",
            "example": "CN=Jane Doe,OU=Employees,DC=example,DC=com"
          },
          "directory_user_first_name": {
            "type": "string",
            "example": "Jane"
          },
          "directory_user_last_name": {
            "type": "string",
            "example": "Doe"
          },
          "directory_user_description": {
            "type": "string",
            "example": "Example user"
          },
          "directory_user_email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "directory_user_email_normalized": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "directory_user_phone": {
            "type": "string",
            "example": "555-555-5555"
          },
          "directory_user_title": {
            "type": "string",
            "example": "Software Engineer"
          },
          "directory_user_location": {
            "type": "string",
            "example": "Remote"
          },
          "directory_user_last_logon_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "directory_user_attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "DirectoryGroup": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "directory_group_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "directory_group_organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "directory_group_site_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "directory_group_source_id": {
            "type": "integer",
            "example": 1
          },
          "directory_group_created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "directory_group_updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "directory_group_group_id": {
            "type": "string",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "directory_group_user_count": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "directory_group_name": {
            "type": "string",
            "example": "CN=Remote Desktop Users,CN=Builtin,DC=example,DC=com"
          },
          "directory_group_display_name": {
            "type": "string",
            "example": "Remote Desktop Users"
          },
          "directory_group_description": {
            "type": "string",
            "example": "Members in this group are granted the right to logon remotely"
          },
          "directory_group_email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "directory_group_email_normalized": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "directory_group_attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Organization": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "client_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "download_token": {
            "type": "string",
            "example": "DT11226D9EEEA2B035D42569585900"
          },
          "download_token_created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "name": {
            "type": "string",
            "example": "My Company"
          },
          "description": {
            "type": "string",
            "example": "All subdivisions of my company"
          },
          "inactive": {
            "type": "boolean",
            "example": false
          },
          "deactivated_at": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "service_count": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "service_count_tcp": {
            "type": "integer",
            "format": "int64",
            "example": 7
          },
          "service_count_udp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "service_count_arp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "service_count_icmp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "asset_count": {
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "project": {
            "type": "boolean",
            "example": false
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "expiration_assets_stale": {
            "type": "integer",
            "format": "int64",
            "example": 365
          },
          "expiration_assets_offline": {
            "type": "integer",
            "format": "int64",
            "example": 365
          },
          "expiration_integration_attributes": {
            "type": "integer",
            "format": "int64",
            "example": 365
          },
          "expiration_scans": {
            "type": "integer",
            "format": "int64",
            "example": 365
          },
          "expiration_vulnerabilities": {
            "type": "integer",
            "format": "int64",
            "example": 365
          },
          "export_token": {
            "type": "string",
            "example": "ET11226D9EEEA2B035D42569585900",
            "deprecated": true
          },
          "export_token_created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370,
            "deprecated": true
          },
          "export_token_last_used_at": {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "deprecated": true
          },
          "export_token_last_used_by": {
            "type": "string",
            "example": "127.0.0.1",
            "deprecated": true
          },
          "export_token_counter": {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "deprecated": true
          },
          "keep_latest_integration_attributes": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "Credential": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "client_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "name": {
            "type": "string",
            "example": "credentials_name"
          },
          "type": {
            "type": "string",
            "description": "The service the credentials are for.",
            "enum": [
              "miradore_api_key_v1",
              "aws_access_secret",
              "crowdstrike_api_key",
              "azure_client_secret",
              "azure_username_password",
              "censys_search_api_key",
              "snmpv2_community",
              "snmpv3_credential",
              "vmware_username_password"
            ]
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "created_by_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "created_by_email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "acl": {
            "type": "object",
            "additionalProperties": true,
            "example": {
              "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8": "user"
            }
          },
          "global": {
            "type": "boolean",
            "example": false
          },
          "cidrs": {
            "type": "array",
            "example": [
              "10.0.0.47/32",
              "192.168.1.0/24"
            ],
            "items": {
              "type": "string"
            }
          },
          "last_used_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "last_used_by_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          }
        }
      },
      "APIKey": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "client_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "created_by": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "comment": {
            "type": "string",
            "example": "API key used for Splunk integration"
          },
          "last_used_at": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "last_used_ip": {
            "type": "string",
            "example": "127.0.0.1"
          },
          "last_used_ua": {
            "type": "string",
            "example": "curl/7.44.1"
          },
          "counter": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "usage_today": {
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "usage_limit": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          },
          "token": {
            "type": "string",
            "example": "CTXXXXXXXXXXXXX"
          },
          "inactive": {
            "type": "boolean",
            "example": true
          },
          "type": {
            "type": "string",
            "example": "org"
          }
        }
      },
      "ExportToken": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "token": {
            "type": "string",
            "example": "ET11226D9EEEA2B035D42569585900"
          },
          "comment": {
            "type": "string",
            "example": "Export token used for Splunk integration"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "last_used_at": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "last_used_by": {
            "type": "string",
            "example": "127.0.0.1"
          },
          "counter": {
            "type": "integer",
            "format": "int64",
            "example": 0
          }
        }
      },
      "Agent": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "client_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "host_id": {
            "type": "string",
            "example": "6f9e6fe52271da70962e007183c5c9c9"
          },
          "hub_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "name": {
            "type": "string",
            "example": "RUNZERO-AGENT"
          },
          "site_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "last_checkin": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "os": {
            "type": "string",
            "example": "Windows"
          },
          "arch": {
            "type": "string",
            "example": "amd64"
          },
          "version": {
            "type": "string",
            "example": "1.2.3 (build 20191219224016) [fc50c5eefdc3ff5c60533c3c345d14d336396272]"
          },
          "external_ip": {
            "type": "string",
            "example": "1.1.1.1"
          },
          "internal_ip": {
            "type": "string",
            "example": "192.168.0.1",
            "oneOf": [
              {
                "format": "ipv4"
              },
              {
                "format": "ipv6"
              }
            ]
          },
          "system_info": {
            "type": "object",
            "additionalProperties": true
          },
          "connected": {
            "type": "boolean",
            "example": true
          },
          "inactive": {
            "type": "boolean",
            "example": false
          },
          "deactivated_at": {
            "type": "integer",
            "format": "int64",
            "example": 0
          }
        },
        "description": "A deployed service which performs scan tasks.\nExplorers may be referred to by their legacy name, Agents.\n"
      },
      "TaskBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "name": {
            "type": "string",
            "example": "Hourly Scan"
          },
          "description": {
            "type": "string",
            "example": "Scan the headquarters hourly"
          },
          "template_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "client_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "agent_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "hosted_zone_id": {
            "type": "string",
            "description": "The ID of the Hosted Zone which executes the task. If the\n",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "site_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "cruncher_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "created_by": {
            "type": "string",
            "example": "user@example.com"
          },
          "created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "custom_integration_id": {
            "type": "string",
            "description": "The ID of the custom integration source, if the last task executed with this template was an import of Asset Data.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "source_id": {
            "type": "integer",
            "description": "The numeric ID of the data source, if the task executed with this template is a runZero scan or third party data connection import.",
            "example": 1
          },
          "updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "type": {
            "type": "string",
            "example": "scan"
          },
          "status": {
            "type": "string",
            "example": "processed"
          },
          "error": {
            "type": "string",
            "example": "agent unavailable"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "stats": {
            "type": "object",
            "additionalProperties": true
          },
          "hidden": {
            "type": "boolean",
            "example": false
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "recur": {
            "type": "boolean",
            "example": false
          },
          "recur_frequency": {
            "type": "string",
            "example": "hourly"
          },
          "start_time": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "recur_last": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "recur_next": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "recur_last_task_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          }
        },
        "description": "All fields of a Task with none required"
      },
      "Task": {
        "required": [
          "id"
        ],
        "description": "A task object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskBase"
          }
        ]
      },
      "TaskOptions": {
        "properties": {
          "hosted_zone_name": {
            "type": "string",
            "description": "The string 'auto' will use any available hosted zone. Otherwise, provide the string name (hostedzone1) of the hosted zone.",
            "example": "auto"
          }
        },
        "description": "Options which can be set to create or modify a task.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskBase"
          }
        ]
      },
      "HostedZone": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the hosted zone",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "name": {
            "type": "string",
            "example": "zone1"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the hosted zone is enabled",
            "example": true
          },
          "updated_at": {
            "type": "string",
            "description": "The last modification time of the hosted zone",
            "format": "date-time",
            "example": "2023-03-06T18:14:50.52Z"
          },
          "processor_id": {
            "type": "string",
            "description": "The processor ID assigned to the hosted zone",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "explorers_concurrency": {
            "type": "integer",
            "description": "The number of concurrent explorer tasks that can be executed",
            "format": "int64",
            "example": 0
          },
          "explorers_total": {
            "type": "integer",
            "description": "The number of explorers available in the zone",
            "format": "int64",
            "example": 0
          },
          "tasks_active": {
            "type": "integer",
            "description": "The number of tasks executing in the zone",
            "format": "int64",
            "example": 0
          },
          "tasks_waiting": {
            "type": "integer",
            "description": "The number of tasks waiting to execute in the zone",
            "format": "int64",
            "example": 0
          },
          "organization_id": {
            "type": "string",
            "description": "The ID of the organization the hosted zone is assigned to",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          }
        },
        "description": "A hosted service which performs scan tasks. Hosted zones are only available to\nEnterprise customers.\n"
      },
      "License": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "name": {
            "type": "string",
            "example": "My Company"
          },
          "activated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "license_type": {
            "type": "string",
            "example": "platform"
          },
          "license_expiration": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "license_max_assets": {
            "type": "integer",
            "format": "int64",
            "example": 1000000
          },
          "license_live_asset_count": {
            "type": "integer",
            "format": "int64",
            "example": 1000
          },
          "license_project_asset_count": {
            "type": "integer",
            "format": "int64",
            "example": 5000
          },
          "via_reseller": {
            "type": "boolean",
            "example": false
          },
          "phone": {
            "type": "string",
            "example": "512-555-5555"
          },
          "address_street": {
            "type": "string",
            "example": "1111 Main St"
          },
          "address_country": {
            "type": "string",
            "example": "US"
          },
          "address_city": {
            "type": "string",
            "example": "Austin"
          },
          "address_region": {
            "type": "string",
            "example": "Texas"
          },
          "address_postal": {
            "type": "string",
            "example": "78700"
          },
          "subscription_period_start": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "subscription_period_end": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "subscription_cancel_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "subscription_canceled_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "settings": {
            "type": "object",
            "additionalProperties": true
          },
          "sso_type": {
            "type": "string",
            "example": "saml20"
          },
          "sso_domain": {
            "type": "string",
            "example": "runzero.com"
          },
          "sso_mode": {
            "type": "string",
            "example": "required"
          },
          "sso_login_message": {
            "type": "string",
            "example": "Hello"
          },
          "sso_login_issuer_url": {
            "type": "string",
            "example": "https://accounts.google.com/o/saml2?idpid=issuer"
          },
          "sso_login_login_url": {
            "type": "string",
            "example": "https://accounts.google.com/o/saml2?idpid=login"
          },
          "sso_login_logout_url": {
            "type": "string",
            "example": "https://accounts.google.com/o/saml2?idpid=logout"
          },
          "sso_default_role": {
            "type": "string",
            "example": "viewer"
          },
          "partner": {
            "type": "string",
            "example": "runZero"
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "client_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "site_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "action": {
            "type": "string",
            "example": "login"
          },
          "source_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "source_name": {
            "type": "string",
            "example": "SiteName"
          },
          "source_type": {
            "type": "string",
            "example": "api"
          },
          "target_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "target_name": {
            "type": "string",
            "example": "SiteName"
          },
          "target_type": {
            "type": "string",
            "example": "api"
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "details": {
            "type": "object",
            "additionalProperties": true
          },
          "state": {
            "type": "string",
            "example": "SiteName"
          },
          "processor_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "processed_at": {
            "type": "integer",
            "format": "int64",
            "example": 0
          }
        }
      },
      "User": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "client_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "name": {
            "type": "string",
            "example": "James Smith"
          },
          "first_name": {
            "type": "string",
            "example": "James"
          },
          "last_name": {
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "example": "jsmith@example.com"
          },
          "client_admin": {
            "type": "boolean",
            "example": true
          },
          "org_default_role": {
            "type": "string",
            "example": "admin"
          },
          "org_roles": {
            "type": "object",
            "additionalProperties": true
          },
          "password_enabled_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "invite_token_expiration": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "reset_token_expiration": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "terms_agreed_as_of": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "last_login_ip": {
            "type": "string",
            "example": "192.168.0.1",
            "oneOf": [
              {
                "format": "ipv4"
              },
              {
                "format": "ipv6"
              }
            ]
          },
          "last_login_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "last_login_ua": {
            "type": "string",
            "example": "curl/1.0"
          },
          "last_activity_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "sso_only": {
            "type": "boolean",
            "example": false
          },
          "login_failures": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "actions": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "last_action_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "mfa_enabled": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Group": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "description": {
            "type": "string",
            "example": "Viewers Group"
          },
          "name": {
            "type": "string",
            "example": "Viewers"
          },
          "role_summary": {
            "type": "string",
            "example": "all:viewer"
          },
          "user_count": {
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "created_by_email": {
            "type": "string",
            "example": "jsmith@example.com"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "expires_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "org_default_role": {
            "type": "string",
            "example": "admin"
          },
          "org_roles": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "GroupPost": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "Viewers Group"
          },
          "name": {
            "type": "string",
            "example": "Viewers"
          },
          "expires_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "org_default_role": {
            "type": "string",
            "example": "admin"
          },
          "org_roles": {
            "type": "object",
            "additionalProperties": true,
            "example": {
              "1a5e612e-4d64-45fe-aa3e-afba5cf3b9bf": "viewer,",
              "fd6d6662-732b-4c4b-8331-051178994384": "admin"
            }
          }
        }
      },
      "GroupPut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "description": {
            "type": "string",
            "example": "Viewers Group"
          },
          "name": {
            "type": "string",
            "example": "Viewers"
          },
          "expires_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "org_default_role": {
            "type": "string",
            "example": "admin"
          },
          "org_roles": {
            "type": "object",
            "additionalProperties": true,
            "example": {
              "1a5e612e-4d64-45fe-aa3e-afba5cf3b9bf": "viewer,",
              "fd6d6662-732b-4c4b-8331-051178994384": "admin"
            }
          }
        }
      },
      "GroupMapping": {
        "required": [
          "group_id",
          "id",
          "sso_attribute",
          "sso_value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "f6cfb91a-52ea-4a86-bf9a-5a891a26f52b"
          },
          "group_id": {
            "type": "string",
            "format": "uuid",
            "example": "2b096711-4d28-4417-8635-64af4f62c1ae"
          },
          "group_name": {
            "type": "string",
            "example": "Viewers Group"
          },
          "sso_attribute": {
            "type": "string",
            "example": "basic-attribute"
          },
          "sso_value": {
            "type": "string",
            "example": "basic-attribute-value"
          },
          "description": {
            "type": "string",
            "example": "Maps basic-attribute to Viewers Group"
          },
          "created_by_email": {
            "type": "string",
            "example": "jsmith@example.com"
          },
          "created_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          },
          "updated_at": {
            "type": "integer",
            "format": "int64",
            "example": 1576300370
          }
        }
      },
      "UserOptions": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "example": "James"
          },
          "last_name": {
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "example": "jsmith@example.com"
          },
          "client_admin": {
            "type": "boolean",
            "example": true
          },
          "org_default_role": {
            "type": "string",
            "example": "admin"
          },
          "org_roles": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "UserInviteOptions": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "example": "James"
          },
          "last_name": {
            "type": "string",
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "example": "jsmith@example.com"
          },
          "client_admin": {
            "type": "boolean",
            "example": true
          },
          "org_default_role": {
            "type": "string",
            "example": "admin"
          },
          "org_roles": {
            "type": "object",
            "additionalProperties": true
          },
          "subject": {
            "type": "string",
            "example": "Welcome to runZero"
          },
          "message": {
            "type": "string",
            "example": "You have been invited to the runZero Network Discovery platform"
          }
        }
      },
      "AssetServiceNow": {
        "required": [
          "asset_id"
        ],
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "organization": {
            "type": "string",
            "example": "Headquarters"
          },
          "site": {
            "type": "string",
            "example": "Primary"
          },
          "detected_by": {
            "type": "string",
            "example": "icmp"
          },
          "type": {
            "type": "string",
            "example": "Server"
          },
          "sys_class_name": {
            "type": "string",
            "example": "cmdb_ci_iot"
          },
          "os_vendor": {
            "type": "string",
            "example": "Microsoft"
          },
          "os_product": {
            "type": "string",
            "example": "Windows 10"
          },
          "os_version": {
            "type": "string",
            "example": "1903"
          },
          "hw_vendor": {
            "type": "string",
            "example": "Dell"
          },
          "hw_product": {
            "type": "string",
            "example": "PowerEdge"
          },
          "hw_version": {
            "type": "string",
            "example": "2.0"
          },
          "ip_address": {
            "type": "string",
            "example": "192.168.0.1",
            "oneOf": [
              {
                "format": "ipv4"
              },
              {
                "format": "ipv6"
              }
            ]
          },
          "addresses_scope": {
            "type": "string",
            "example": "192.168.100.1;192.168.100.2"
          },
          "addresses_extra": {
            "type": "string",
            "example": "192.168.0.5;192.168.0.3"
          },
          "mac_address": {
            "type": "string",
            "format": "mac",
            "example": "11:22:33:44:55:66"
          },
          "mac_manufacturer": {
            "type": "string",
            "example": "Dell"
          },
          "newest_mac_age": {
            "type": "string",
            "example": "2020-01-01"
          },
          "macs": {
            "type": "string",
            "format": "mac",
            "example": "11:22:33:44:55:66"
          },
          "mac_vendors": {
            "type": "string",
            "example": "Dell"
          },
          "name": {
            "type": "string",
            "example": "www;server"
          },
          "tags": {
            "type": "string",
            "example": "owner=IT;location=Austin"
          },
          "domains": {
            "type": "string",
            "example": "runzero.com;runzero.local.lan"
          },
          "service_count": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "service_count_tcp": {
            "type": "integer",
            "format": "int64",
            "example": 7
          },
          "service_count_udp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "service_count_arp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "service_count_icmp": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "lowest_ttl": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "lowest_rtt": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "alive": {
            "type": "boolean",
            "example": true
          },
          "first_discovered": {
            "type": "string",
            "example": "2006-01-02 15:04:05"
          },
          "last_discovered": {
            "type": "string",
            "example": "2006-01-02 15:04:05"
          },
          "last_updated": {
            "type": "string",
            "example": "2006-01-02 15:04:05"
          },
          "comments": {
            "type": "string",
            "example": "File Server"
          }
        }
      },
      "AssetOwnershipType": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "f6cfb91a-52ea-4a86-bf9a-5a891a26f52b"
          },
          "name": {
            "type": "string",
            "example": "Asset Owner"
          },
          "reference": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "order": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "hidden": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "AssetOwnershipTypePost": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Asset Owner"
          },
          "reference": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "order": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "hidden": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "AssetOwnerships": {
        "type": "object",
        "properties": {
          "ownerships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOwnerships_ownerships"
            }
          }
        }
      },
      "AssetOwnershipsWithSearch": {
        "required": [
          "ownerships",
          "search"
        ],
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "example": "alive:true and os:windows"
          },
          "ownerships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetOwnerships_ownerships"
            }
          }
        }
      },
      "BaseResponse": {
        "required": [
          "clientId",
          "createdAt",
          "createdById",
          "id",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the object",
            "format": "uuid",
            "example": "f6cfb91a-52ea-4a86-bf9a-5a891a26f52b",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "clientId": {
            "type": "string",
            "description": "The unique ID of the runZero client/customer account that owns the object",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "createdById": {
            "type": "string",
            "description": "The unique ID of the entity that created the object",
            "format": "uuid",
            "example": "f6cfb91a-52ea-4a86-bf9a-5a891a26f52b",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "A timestamp indicating creation time of the object",
            "format": "date-time",
            "example": "2023-03-06T18:14:50.52Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "A timestamp indicating last modified time of the object",
            "format": "date-time",
            "example": "2023-03-06T18:14:50.52Z"
          },
          "destroyedAt": {
            "type": "string",
            "description": "A timestamp indicating deletion time of the object",
            "format": "date-time",
            "example": "2023-03-06T18:14:50.52Z"
          }
        },
        "description": "Minimal identifying information with lifecycle metadata"
      },
      "BaseCustomIntegration": {
        "type": "object",
        "properties": {
          "name": {
            "pattern": "^\\S+$",
            "type": "string",
            "description": "The unique name of the custom integration, without spaces.",
            "example": "my-custom-integration"
          },
          "icon": {
            "type": "string",
            "description": "Base64 encoded png with maximum size 256x256 pixels",
            "format": "byte",
            "example": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAomVYSWZNTQAqAAAACAAFARIAAwAAAAEAAQAAARoABQAAAAEAAABKARsABQAAAAEAAABSASgAAwAAAAEAAgAAh2kABAAAAAEAAABaAAAAAAAAAJAAAAABAAAAkAAAAAEABJKGAAcAAAASAAAAkKABAAMAAAABAAEAAKACAAQAAAABAAAAIKADAAQAAAABAAAAIAAAAABBU0NJSQAAAFNjcmVlbnNob3TIMt7LAAAACXBIWXMAABYlAAAWJQFJUiTwAAADBWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNi4wLjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MTAyPC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT4xPC9leGlmOkNvbG9yU3BhY2U+CiAgICAgICAgIDxleGlmOlVzZXJDb21tZW50PlNjcmVlbnNob3Q8L2V4aWY6VXNlckNvbW1lbnQ+CiAgICAgICAgIDxleGlmOlBpeGVsWURpbWVuc2lvbj4xMDI8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICAgICA8dGlmZjpSZXNvbHV0aW9uVW5pdD4yPC90aWZmOlJlc29sdXRpb25Vbml0PgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CtVpwSkAAAVcSURBVFgJxVbZT1xlFP/NdmdhpgwMDBQQEISWNNKCMEJtrTFuTWN88MGqaVNNH/QPMK01NU2MtjbR2GhCNFZDYkwaY4021RcfGlPKYi2pAS0FOmWnUJYCs8+d8Zxv5sqFuUyhIeFk7vbds/zO75zz3dHFSbCBot/A2CK0cb0AMJFaZOr16XPUraYED+pcSY7tdTqd8rjkel8A6Yz5XVSWQaljfn4BCz4fZDkKH11nZu7B7c5FZUUFBWcVbRBpS6AYhSMR3L49gLHxcYzfmUDQ70cg4EdPnxcTk5PiuevmLdy83r4kO344+t77OHbkHTgcdm0QFERTZFkW6719/fEXX97Pk5LmsMVdxVvjVds98eq6nfG6xj3xbTUN8R31u4TNydOfJGLEYimxNEtAWqJmA4ODKC0pEVltrfbAYbcJOskPIsTKxOw8xmYXgLvTpHNP6KlPuaXbYCD6x70zxF4n8vPcKSykLcHZb5uFv9qGJ3GtywssDKn9A85SPFpRhMIn6lBWUoSC/DxYbTa4XC60d/yJpubzeKyqhAB0U4/Mrw6Akv0cGVz47XcY3WXo7BtCZXkhPj35FQo25xMLetgyMpDlzITFbIbBYIRZXBdHzm63o+nzz/BX+6AArVthHFdkIB6LYXxyGjkOG8b7u/D0/pewb+8LSxlQPXGxZbLhBIwGA2q2V6O1tQ2ZTickSUJp8UNCe/m+sCIA1jYZDQhFosKQA0SiUeGcWgk81Tzb3A8Gg148G1RZlj1cCj4UCckx+AIhWExGSORXkbQAYpSRWhg9B2Wi+crZcvAwOZ+YncO0PwCfP4hoOILROR+GqUlDgSCmaG0kGMG50SlceuUZ7KkqE8D1eh3SAlAHF/dMQ1KUXukaHMWJX1vw48hdEBKmiWsBkHMQOEIqri6LiQbFD2ZPLWsDkLRkJ0x3p3cYtWd+AGwSCq0Scq1mGCkewaBAQIgYXCDd4WgMAbb1h2mnXMrqAwHg4KGojBMXL4vgW+xW9ATDGJmmPYG7gX7ULICZspaM2O2wIo904gU5yKamFsI6JGsDQEZMINuOTc/iF6ppuc0sgu/OzMBbz3ngzrTDTRuWRTKJ0bQTK5ssZo4FPZVEaT89l4ZkbQA4uoKAqYzIsHGd5wM48FQNXttVK5yqTzJNDn83MmiDSiatfi0aeslC+gcFAWklvSlOJQZCwh8ultb2Drx+6DAOHn4bjtwd8A4MivXlk3VfBpQAYvySYyg8MRaV8FSwSCaqO8nA4BC+bz4LV1ElEOxHlJjQkrQAeE5j0YRjmZouQiPGdeSdbrnI3PYk3f/8i59+voCWK21wFm1BttOBqeFs8NbMwomoJcGbeiV5zwnp9QbMBsIw5ZWjpa0Drx58E2e+aFJpJ4LygsLAjZ5eHD92BN09/XikeDN6u67io1Pvim+IsneoHKzcA5JZQo4rC5HJeZTnu2gbDeL8ue/Qf8u7aL8Y//81m80q7h0ZFly9cgnIrcQbhw6ItWSVxL1ySmFA2WJtVis+OH6UdpQ7uHG9Q2w8bGQmYGpZuq1QuYMh8VpnlPDhqdMY+/sP+gznCYa4pMtFsweUOu19/lmqZSu+/PobtLRfE7YWSyJDMQUmA5y84dBhSvZFY4MH9C8KOTkuODMzhY0W9QoQTQDKSzbc2diAxz314g+FmAT69rPEuemoPJe5DGOz8CXHj//1gA/WIXumXStzoUCntAA4IM+tgbJz0nddLVyKj/fVoyBrE3kxwlOe+N4rc862iUNtlXqv+Z8wVW2xy/kdO14vScuAOohWUIVi1mNMWjpqH1r3q2ZAy3g91lLGcD2crsXHhgP4D/iMWRnl47GPAAAAAElFTkSuQmCC"
          },
          "description": {
            "type": "string",
            "description": "A text description of the custom integration",
            "example": "My custom integration description."
          }
        }
      },
      "CustomIntegration": {
        "required": [
          "name"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCustomIntegration"
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "NewCustomIntegration": {
        "required": [
          "name"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCustomIntegration"
          }
        ]
      },
      "NewAssetImport": {
        "required": [
          "assetData",
          "customIntegrationId",
          "importTask",
          "siteId"
        ],
        "type": "object",
        "properties": {
          "siteId": {
            "type": "string",
            "description": "The ID of the site assets are to be imported into.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "customIntegrationId": {
            "type": "string",
            "description": "The unique ID of the registered custom integration which produced the asset data. Uniqueness is not checked/enforced. See /account/custom-integrations api.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "importTask": {
            "$ref": "#/components/schemas/ImportTask"
          },
          "assetData": {
            "type": "string",
            "description": "A gzip (not .tar.gz) compressed file containing ImportAsset objects. The file data may be a JSON array of\nImportAsset objects, e.g. [{},{},...] or JSONL format, with a single JSON representation of an ImportAsset\nobject on each new line, e.g. {}\\n{}\\n...\n",
            "format": "binary"
          }
        },
        "description": "Represents a request to import asset data described by the specified custom integration into the specified site.\n\nAssets will be created new or merged according to merge rules defined by the version of the platform\nyou are uploading the asset data file to. Typically, this involves matching network and other unique\nsingle or grouped properties.\n\nThere is a maximum of 256 custom asset properties that can be applied to any asset. This means\nthat, aside from the per-import asset property limit set on ImportAsset, if a new import sets\ndifferent custom properties on the same asset, the new properties are combined with the\npre-existing ones.\n"
      },
      "ImportAsset": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 1024,
            "type": "string",
            "description": "Any value which can uniquely identify the asset within the custom integration."
          },
          "runZeroID": {
            "type": "string",
            "description": "The unique identifier of the runZero asset to merge into.",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8",
            "x-go-type": "uuid.UUID",
            "x-go-import": {
              "name": "uuid",
              "path": "github.com/gofrs/uuid"
            }
          },
          "networkInterfaces": {
            "title": "NetworkInterfaces",
            "maxItems": 256,
            "type": "array",
            "description": "The asset's networking configuration.",
            "items": {
              "$ref": "#/components/schemas/ImportAsset_networkInterfaces"
            }
          },
          "hostnames": {
            "maxItems": 100,
            "type": "array",
            "description": "Represents hostnames the asset is assigned or reachable at. These can be fully-qualified hostnames with the domain name, or a short hostname.",
            "items": {
              "maxLength": 260,
              "type": "string",
              "example": "host.domain.com"
            }
          },
          "domain": {
            "maxLength": 260,
            "type": "string",
            "description": "Represents a single domain name which could be applied to all non-fqdns in the hostnames field.",
            "example": "domain.com"
          },
          "firstSeenTS": {
            "type": "string",
            "description": "Represents the earliest time the asset was seen by the custom integration reporting it, using a date string as defined by RFC 3339, section 5.6.",
            "format": "date-time",
            "example": "2023-03-06T18:14:50.52Z"
          },
          "os": {
            "maxLength": 1024,
            "type": "string",
            "description": "The name of the asset's operating system. It is advisable to keep the data clean by normalizing to existing values when possible.",
            "example": "Ubuntu Linux 22.04"
          },
          "osVersion": {
            "maxLength": 1024,
            "type": "string",
            "description": "The version of the asset's operating system. It is advisable to keep the data clean by normalizing to existing values when possible.",
            "example": "22.04"
          },
          "manufacturer": {
            "maxLength": 1024,
            "type": "string",
            "description": "The manufacturer of the operating system of the asset. It is advisable to keep the data clean by normalizing to existing values when possible.",
            "example": "Apple Inc."
          },
          "model": {
            "maxLength": 1024,
            "type": "string",
            "description": "The hardware model of the asset. It is advisable to keep the data clean by normalizing to existing values when possible.",
            "example": "Macbook Air"
          },
          "tags": {
            "maxItems": 100,
            "type": "array",
            "description": "Arbitrary string tags applied to the asset.",
            "example": [
              "foo",
              "key=value"
            ],
            "items": {
              "maxLength": 1024,
              "type": "string"
            }
          },
          "deviceType": {
            "maxLength": 1024,
            "type": "string",
            "example": "Desktop"
          },
          "customAttributes": {
            "title": "CustomAttributes",
            "maxProperties": 1024,
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "maxLength": 1024,
                  "type": "string"
                }
              ]
            },
            "description": "Flat map of arbitrary string key/value pairs representing custom attribute data not described in properties above. Note the maximum number of keys and length of values. Additionally, property names may only be 256 characters long."
          }
        },
        "description": "Represents a custom asset to be created or merged after import."
      },
      "AccessToken": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "expires_in": {
            "type": "integer"
          }
        }
      },
      "APIClient": {
        "type": "object",
        "properties": {
          "api_client_id": {
            "type": "string",
            "format": "uuid",
            "example": "e77602e0-3fb8-4734-aef9-fbc6fdcb0fa8"
          },
          "api_client_secret": {
            "type": "string"
          }
        }
      },
      "ClientIDForm": {
        "required": [
          "client_id",
          "client_secret",
          "grant_type"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "example": "client_credential"
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          }
        }
      },
      "inline_response_map200": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string"
          },
          "metrics": {
            "type": "object"
          }
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "updated_asset_count": {
            "type": "integer",
            "example": 10
          }
        }
      },
      "Certificate_attributes": {
        "properties": {
          "subject": {
            "type": "string",
            "description": "The subject of the certificate.",
            "format": "dn"
          },
          "cn": {
            "type": "string",
            "description": "The Common Name field from the certificate (no longer used by web browsers).",
            "format": "string",
            "example": "www.example.com"
          },
          "version": {
            "type": "integer",
            "description": "The version of the certificate.",
            "format": "int32"
          },
          "issuer": {
            "type": "string",
            "description": "The authority which issued the certificate.",
            "format": "dn"
          },
          "subject_key_id": {
            "type": "string",
            "description": "The key ID of the subject of the certificate.",
            "format": "string"
          },
          "authority_key_id": {
            "type": "string",
            "description": "The key ID of the authority which signed the certificate.",
            "format": "string"
          },
          "ocsp_server": {
            "type": "array",
            "description": "Zero or more OCSP server URLs.",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "crl_distribution_points": {
            "type": "array",
            "description": "Zero or more URLs of CRLs.",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "issuing_certificate_url": {
            "type": "array",
            "description": "Zero or more URLs where the issuing certificate can be found.",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "is_ca": {
            "type": "boolean",
            "description": "Whether the certificate claims to be a Certificate Authority."
          },
          "key_usage": {
            "type": "array",
            "description": "Valid purposes the certificate's key can be used for.",
            "items": {
              "type": "string"
            }
          },
          "ext_key_usage": {
            "type": "array",
            "description": "Additional purposes the certificate's key can be used for.",
            "items": {
              "type": "string"
            }
          },
          "san_dns_names": {
            "type": "array",
            "description": "Subject Alternative Name hostnames.",
            "items": {
              "type": "string",
              "format": "hostname"
            }
          },
          "san_ip_addresses": {
            "type": "array",
            "description": "Subject Alternative Name IP addresses.",
            "items": {
              "type": "string",
              "oneOf": [
                {
                  "format": "ipv4"
                },
                {
                  "format": "ipv6"
                }
              ]
            }
          },
          "san_email_addresses": {
            "type": "array",
            "description": "Subject Alternative Name email addresses.",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "san_uris": {
            "type": "array",
            "description": "Subject Alternative Name URIs.",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "public_key_parameters": {
            "type": "object",
            "description": "Parameters specific to the public key type."
          }
        }
      },
      "Finding_links_cves": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "Finding_links": {
        "type": "object",
        "properties": {
          "cves": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Finding_links_cves"
            }
          },
          "rz_blog": {
            "type": "array",
            "description": "URLs of relevant runZero blog postings.",
            "items": {
              "$ref": "#/components/schemas/Finding_links_cves"
            }
          },
          "urls": {
            "type": "array",
            "description": "Additional relevant URLs.",
            "items": {
              "$ref": "#/components/schemas/Finding_links_cves"
            }
          }
        }
      },
      "AssetOwnerships_ownerships": {
        "type": "object",
        "properties": {
          "ownership_type_id": {
            "type": "string",
            "example": "2318e078-4164-4e1b-92a5-11e353093f4b"
          },
          "owner": {
            "type": "string",
            "example": "it@runzero.com"
          }
        }
      },
      "ImportTask": {
        "title": "ImportTask",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "example": "my import task"
          },
          "description": {
            "maxLength": 1024,
            "type": "string",
            "example": "importing assets from custom integration A"
          },
          "excludeUnknown": {
            "type": "boolean",
            "description": "Instructs the data ingestion process whether to skip assets which do not merge into an existing asset in the asset inventory",
            "example": true,
            "default": false
          },
          "tags": {
            "maxItems": 100,
            "type": "array",
            "description": "Arbitrary string tag values which are applied to the asset data import task created.",
            "example": [
              "tag1",
              "tag2"
            ],
            "items": {
              "maxLength": 1024,
              "type": "string"
            }
          }
        },
        "description": "Information which describes the task created when asset data is imported."
      },
      "ImportAsset_networkInterfaces": {
        "type": "object",
        "properties": {
          "ipv4Addresses": {
            "maxItems": 256,
            "type": "array",
            "description": "Represents IPV4 addresses. Addresses are ordered from most to least likely to uniquely identify the asset.",
            "items": {
              "type": "string",
              "format": "ipv4"
            }
          },
          "ipv6Addresses": {
            "maxItems": 100,
            "type": "array",
            "description": "Represents the IPV6 addresses. Addresses are ordered from most to least likely to uniquely identify the asset.",
            "items": {
              "type": "string",
              "format": "ipv6"
            }
          },
          "macAddress": {
            "maxLength": 23,
            "pattern": "^([A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2}$|^([A-Fa-f0-9]{2}:){7}[A-Fa-f0-9]{2}$|^([A-Fa-f0-9]{2}-){5}[A-Fa-f0-9]{2}$|^([A-Fa-f0-9]{2}-){7}[A-Fa-f0-9]{2}$|^([A-Fa-f0-9]{4}\\.){2}[A-Fa-f0-9]{4}$|^([A-Fa-f0-9]{4}\\.){3}[A-Fa-f0-9]{4}$|^([A-Fa-f0-9]{4} ){3}[A-Fa-f0-9]{4}$",
            "type": "string",
            "description": "Represents a MAC address in IEEE 802 MAC/EUI-48, or EUI-64 form in one of the following formats:\n  01:23:45:67:89:AB\n  01:23:45:67:89:ab:cd:ef\n  01-23-45-67-89-ab\n  01-23-45-67-89-ab-cd-ef\n  0123.4567.89ab\n  0123.4567.89ab.cdef\n  0123 4567 89ab cdEF\n",
            "example": "01:23:45:67:89:0A"
          }
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Problem"
            }
          }
        }
      },
      "LicenseExpiredError": {
        "description": "License has expired",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Problem"
            }
          }
        }
      },
      "ProcessingError": {
        "description": "Request could not be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Problem"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Problem"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Unexpected error occurred on the server",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Problem"
            }
          }
        }
      },
      "NotAllowedForLicenseError": {
        "description": "Action not allowed for this license type",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Problem"
            }
          }
        }
      },
      "InvalidRequestBodyError": {
        "description": "Invalid request body",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Problem"
            }
          }
        }
      },
      "InvalidRequestParamError": {
        "description": "Invalid request parameter",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Problem"
            }
          }
        }
      },
      "StatusMessage": {
        "description": "Summary of operation results"
      }
    },
    "parameters": {
      "orgID": {
        "name": "_oid",
        "in": "query",
        "description": "The current Organization",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "search": {
        "name": "search",
        "in": "query",
        "description": "A search query in runZero search query syntax",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "fields": {
        "name": "fields",
        "in": "query",
        "description": "A list of fields to export, comma-separated",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "oauthDefaults": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://console.runzero.com/api/v1.0/account/api/token",
            "scopes": {}
          }
        }
      }
    }
  }
}